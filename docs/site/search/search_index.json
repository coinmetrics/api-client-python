{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Coin Metrics Python API v4 client library \u00b6 This is an official Python API client for Coin Metrics API v4. Installation and Updates \u00b6 To install the client you can run the following command: pip install coinmetrics-api-client Note that the client is updated regularly to reflect the changes made in API v4 . Ensure that your latest version matches with what's in pyPI To update your version, run the following command: pip install coinmetrics-api-client -U Introduction \u00b6 You can use this client for querying all kinds of data with your API. To initialize the client you should use your API key, and the CoinMetricsClient class like the following. from coinmetrics.api_client import CoinMetricsClient client = CoinMetricsClient(\"<cm_api_key>\") # or to use community API: client = CoinMetricsClient() After that you can use the client object for getting stuff like available markets: print(client.catalog_markets()) or to query all available assets along with what is available for those assets, like metrics, markets: print(client.catalog_assets()) you can also use filters for the catalog endpoints like this: print(client.catalog_assets(assets=['btc'])) in this case you would get all the information for btc only You can use this client to connect to our API v4 and get catalog or timeseries data from python environment. It natively supports paging over the data so you can use it to iterate over timeseries entries seamlessly. The client can be used to query both pro and community data. The full list of methods can be found in the API Client Spec . Examples \u00b6 The API Client allows you to chain together workflows for importing, transforming, then exporting Coin Metrics data. Below are examples of common use-cases that can be altered to tailor your specific needs. Example Notebooks walkthrough_community.ipynb : Walks through the basic functionality available using the community client. Asset Metrics bbb_metrics_csv_exporter_using_plain_requests.py : Queries block-by-block metrics using the requests library and exports the output into a CSV file. bbb_metrics_json_exporter.py : Queries block-by-block metrics and exports the output into a JSON file. eod_metrics_csv_exporter.py : Exports a set of user-defined metrics and assets published at end-of-day and exports the output into a CSV file. reference_rates_json_exporter.py : Queries Coin Metrics Reference Rates at a user-defined frequency for a set of assets, then exports the output into a JSON file. Market Data books_json_exporter.py : Queries market orderbook data then exports the output into a JSON file. candles_json_exporter.py : Queries market candles data then exports the output into a JSON file. funding_rates_json_exporter.py : Queries market funding rates data then exports the output into a JSON file. trades_csv_exporter.py : Queries market trades data then exports the output into a CSV file. trades_json_exporter.py : Queries market trades data then exports the output into a JSON file. Getting timeseries data \u00b6 For getting timeseries data you want to use methods of the client class that start with get_ . For example if you want to get a bunch of market data trades for coinbase btc-usd pair you can run something similar to the following: for trade in client.get_market_trades( markets='coinbase-btc-usd-spot', start_time='2020-01-01', end_time='2020-01-03', limit_per_market=10 ): print(trade) Or if you want to see daily btc asset metrics you can use something like this: for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD', 'BlkHgt', 'AdrActCnt', 'AdrActRecCnt', 'FlowOutBFXUSD'], frequency='1d', limit_per_asset=10): print(metric_data) This will print you the requested metrics for all the days where we have any of the metrics present. DataFrames \u00b6 (New in >= 2021.9.30.14.30 ) Timeseries data can be transformed into a pandas dataframe by using the to_dataframe() method. The code snippet below shows how: import pandas as pd from coinmetrics.api_client import CoinMetricsClient from os import environ client = CoinMetricsClient() trades = client.get_market_trades( markets='coinbase-btc-usd-spot', start_time='2021-09-19T00:00:00Z', limit_per_market=10 ) trades_df = trades.to_dataframe() print(trades_df.head()) If you want to use dataframes, then you will need to install pandas Notes This only works with requests that return the type DataCollection . Thus, catalog requests, which return lists cannot be returned as dataframes. Please see the API Client Spec for a full list of requests and their return types. API restrictions apply. Some requests may return empty results due to limited access to the API from you API key. Type Conversion \u00b6 (New in >= 2021.12.17.18.00 ) As of version 2021.12.17.18.00 or later, outputs from the to_dataframe function automatically convert the dtypes for a dataframe to the optimal pandas types. metrics_list = [ 'volume_trusted_spot_usd_1d' , 'SplyFF' , 'AdrBalUSD1Cnt' ] asset_list = [ 'btc' , 'xmr' ] start_time = '2021-12-01' df_metrics = client . get_asset_metrics ( assets = asset_list , metrics = metrics_list , start_time = start_time , limit_per_asset = 3 ) . to_dataframe () print ( df_metrics . dtypes ) asset string time datetime64[ns, tzutc()] AdrBalUSD1Cnt Int64 SplyFF Float64 volume_trusted_spot_usd_1d Float64 dtype: object This can be turned off by setting optimize_pandas_types=False Alternatively, you can manually enter your own type conversion by passing in a dictionary for dtype_mapper . This can be done in conjunction with pandas' built in type optimizations. mapper = { 'SplyFF' : 'Float64' , 'AdrBalUSD1Cnt' : 'Int64' , } df_mapped = client . get_asset_metrics ( assets = asset_list , metrics = metrics_list , start_time = start_time , limit_per_asset = 3 ) . to_dataframe ( dtype_mapper = mapper , optimize_pandas_types = True ) print ( df_mapped . dtypes ) asset object time datetime64[ns, tzutc()] AdrBalUSD1Cnt Int64 SplyFF Float64 volume_trusted_spot_usd_1d float64 dtype: object Or as strictly the only types in the dataframe dtype_mapper = { 'ReferenceRateUSD' : np . float64 , 'time' : np . datetime64 } df = client . get_asset_metrics ( assets = 'btc' , metrics = 'ReferenceRateUSD' , start_time = '2022-06-15' , limit_per_asset = 1 ) . to_dataframe ( dtype_mapper = dtype_mapper , optimize_pandas_types = False ) df . info () RangeIndex: 1 entries, 0 to 0 Data columns (total 3 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 asset 1 non-null object 1 time 1 non-null datetime64[ns] 2 ReferenceRateUSD 1 non-null float64 dtypes: datetime64[ns](1), float64(1), object(1) memory usage: 152.0+ bytes Note that in order to pass a custom datetime object, setting a dtype_mapper is mandatory. Pandas type conversion tends to be more performant. But if there are custom operations that must be done using numpy datatypes, this option will let you perform them. Paging \u00b6 You can make the datapoints to iterate from start (default) or from end. for that you should use a paging_from argument like the following: from coinmetrics.api_client import CoinMetricsClient from coinmetrics.constants import PagingFrom client = CoinMetricsClient() for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD'], paging_from=PagingFrom.START): print(metric_data) PagingFrom.END: is available but by default it will page from the start. SSL Certs verification \u00b6 Sometimes your organization network have special rules on SSL certs verification and in this case you might face the following error when running the script: SSLError: HTTPSConnectionPool(host='api.coinmetrics.io', port=443): Max retries exceeded with url: <some_url_path> (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1123)'))) In this case, you can pass an option during client initialization to disable ssl verification for requests like this: client = CoinMetricsClient ( verify_ssl_certs = False ) We don't recommend setting it to False by default and you should make sure you understand the security risks of disabling SSL certs verification. Additionally, you may choose to specify the path to the SSL certificates on your machine. This may cause errors where Python is unable to locate the certificates on your machine, particularly when using Python virtual environments. from coinmetrics.api_client import CoinMetricsClient SSL_CERT_LOCATION = '/Users/<USER_NAME>/Library/Python/3.8/lib/python/site-packages/certifi/cacert.pem' client = CoinMetricsClient ( verify_ssl_certs = SSL_CERT_LOCATION ) A quick way to find the certs on your machine is: python3 -c \"import requests; print(requests.certs.where())\" And note that this will change based on whether or not you are using a Python virtual environment or not Installing and running coinmetrics package and other python packages behind a secure python network \u00b6 Related to SSL Certs verification, you may have trouble installing and updating PyPi packages to your local environment. So you may need to choose the best solution for your company and environment - either using package managers or installing offline. Installing using package managers \u00b6 Full instructions for setting up your environment to use conda, pip, yarn, npm, etc. can be found here . Additionally, a workaround to disable SSL verification when installing a trusted Python package is this: pip install --trusted-host pypi.python.org <packagename> Although it is important to make sure you understand the risks associated with disabling SSL verification and ensure compliance with company policies. Installing Python packages locally/ offline \u00b6 It may be easier to download and install the package locally. Steps: 1. Download the files for the Coin Metrics API Client from PyPi 2. Install it locally Requests Proxy \u00b6 Sometimes your organization has special rules on making requests to third parties and you have to use proxies in order to comply with the rules. For proxies that don't require auth you can specify them similar to this example: client = CoinMetricsClient ( proxy_url = f 'http://<hostname>:<port>' ) For proxies that require auth, you should be able to specify username and password similar to this example: client = CoinMetricsClient ( proxy_url = f 'http://<username>:<password>@<hostname>:<port>' ) Extended documentation \u00b6 For more information about the available methods in the client please reference API Client Spec","title":"Home"},{"location":"index.html#coin-metrics-python-api-v4-client-library","text":"This is an official Python API client for Coin Metrics API v4.","title":"Coin Metrics Python API v4 client library"},{"location":"index.html#installation-and-updates","text":"To install the client you can run the following command: pip install coinmetrics-api-client Note that the client is updated regularly to reflect the changes made in API v4 . Ensure that your latest version matches with what's in pyPI To update your version, run the following command: pip install coinmetrics-api-client -U","title":"Installation and Updates"},{"location":"index.html#introduction","text":"You can use this client for querying all kinds of data with your API. To initialize the client you should use your API key, and the CoinMetricsClient class like the following. from coinmetrics.api_client import CoinMetricsClient client = CoinMetricsClient(\"<cm_api_key>\") # or to use community API: client = CoinMetricsClient() After that you can use the client object for getting stuff like available markets: print(client.catalog_markets()) or to query all available assets along with what is available for those assets, like metrics, markets: print(client.catalog_assets()) you can also use filters for the catalog endpoints like this: print(client.catalog_assets(assets=['btc'])) in this case you would get all the information for btc only You can use this client to connect to our API v4 and get catalog or timeseries data from python environment. It natively supports paging over the data so you can use it to iterate over timeseries entries seamlessly. The client can be used to query both pro and community data. The full list of methods can be found in the API Client Spec .","title":"Introduction"},{"location":"index.html#examples","text":"The API Client allows you to chain together workflows for importing, transforming, then exporting Coin Metrics data. Below are examples of common use-cases that can be altered to tailor your specific needs. Example Notebooks walkthrough_community.ipynb : Walks through the basic functionality available using the community client. Asset Metrics bbb_metrics_csv_exporter_using_plain_requests.py : Queries block-by-block metrics using the requests library and exports the output into a CSV file. bbb_metrics_json_exporter.py : Queries block-by-block metrics and exports the output into a JSON file. eod_metrics_csv_exporter.py : Exports a set of user-defined metrics and assets published at end-of-day and exports the output into a CSV file. reference_rates_json_exporter.py : Queries Coin Metrics Reference Rates at a user-defined frequency for a set of assets, then exports the output into a JSON file. Market Data books_json_exporter.py : Queries market orderbook data then exports the output into a JSON file. candles_json_exporter.py : Queries market candles data then exports the output into a JSON file. funding_rates_json_exporter.py : Queries market funding rates data then exports the output into a JSON file. trades_csv_exporter.py : Queries market trades data then exports the output into a CSV file. trades_json_exporter.py : Queries market trades data then exports the output into a JSON file.","title":"Examples"},{"location":"index.html#getting-timeseries-data","text":"For getting timeseries data you want to use methods of the client class that start with get_ . For example if you want to get a bunch of market data trades for coinbase btc-usd pair you can run something similar to the following: for trade in client.get_market_trades( markets='coinbase-btc-usd-spot', start_time='2020-01-01', end_time='2020-01-03', limit_per_market=10 ): print(trade) Or if you want to see daily btc asset metrics you can use something like this: for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD', 'BlkHgt', 'AdrActCnt', 'AdrActRecCnt', 'FlowOutBFXUSD'], frequency='1d', limit_per_asset=10): print(metric_data) This will print you the requested metrics for all the days where we have any of the metrics present.","title":"Getting timeseries data"},{"location":"index.html#dataframes","text":"(New in >= 2021.9.30.14.30 ) Timeseries data can be transformed into a pandas dataframe by using the to_dataframe() method. The code snippet below shows how: import pandas as pd from coinmetrics.api_client import CoinMetricsClient from os import environ client = CoinMetricsClient() trades = client.get_market_trades( markets='coinbase-btc-usd-spot', start_time='2021-09-19T00:00:00Z', limit_per_market=10 ) trades_df = trades.to_dataframe() print(trades_df.head()) If you want to use dataframes, then you will need to install pandas Notes This only works with requests that return the type DataCollection . Thus, catalog requests, which return lists cannot be returned as dataframes. Please see the API Client Spec for a full list of requests and their return types. API restrictions apply. Some requests may return empty results due to limited access to the API from you API key.","title":"DataFrames"},{"location":"index.html#type-conversion","text":"(New in >= 2021.12.17.18.00 ) As of version 2021.12.17.18.00 or later, outputs from the to_dataframe function automatically convert the dtypes for a dataframe to the optimal pandas types. metrics_list = [ 'volume_trusted_spot_usd_1d' , 'SplyFF' , 'AdrBalUSD1Cnt' ] asset_list = [ 'btc' , 'xmr' ] start_time = '2021-12-01' df_metrics = client . get_asset_metrics ( assets = asset_list , metrics = metrics_list , start_time = start_time , limit_per_asset = 3 ) . to_dataframe () print ( df_metrics . dtypes ) asset string time datetime64[ns, tzutc()] AdrBalUSD1Cnt Int64 SplyFF Float64 volume_trusted_spot_usd_1d Float64 dtype: object This can be turned off by setting optimize_pandas_types=False Alternatively, you can manually enter your own type conversion by passing in a dictionary for dtype_mapper . This can be done in conjunction with pandas' built in type optimizations. mapper = { 'SplyFF' : 'Float64' , 'AdrBalUSD1Cnt' : 'Int64' , } df_mapped = client . get_asset_metrics ( assets = asset_list , metrics = metrics_list , start_time = start_time , limit_per_asset = 3 ) . to_dataframe ( dtype_mapper = mapper , optimize_pandas_types = True ) print ( df_mapped . dtypes ) asset object time datetime64[ns, tzutc()] AdrBalUSD1Cnt Int64 SplyFF Float64 volume_trusted_spot_usd_1d float64 dtype: object Or as strictly the only types in the dataframe dtype_mapper = { 'ReferenceRateUSD' : np . float64 , 'time' : np . datetime64 } df = client . get_asset_metrics ( assets = 'btc' , metrics = 'ReferenceRateUSD' , start_time = '2022-06-15' , limit_per_asset = 1 ) . to_dataframe ( dtype_mapper = dtype_mapper , optimize_pandas_types = False ) df . info () RangeIndex: 1 entries, 0 to 0 Data columns (total 3 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 asset 1 non-null object 1 time 1 non-null datetime64[ns] 2 ReferenceRateUSD 1 non-null float64 dtypes: datetime64[ns](1), float64(1), object(1) memory usage: 152.0+ bytes Note that in order to pass a custom datetime object, setting a dtype_mapper is mandatory. Pandas type conversion tends to be more performant. But if there are custom operations that must be done using numpy datatypes, this option will let you perform them.","title":"Type Conversion"},{"location":"index.html#paging","text":"You can make the datapoints to iterate from start (default) or from end. for that you should use a paging_from argument like the following: from coinmetrics.api_client import CoinMetricsClient from coinmetrics.constants import PagingFrom client = CoinMetricsClient() for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD'], paging_from=PagingFrom.START): print(metric_data) PagingFrom.END: is available but by default it will page from the start.","title":"Paging"},{"location":"index.html#ssl-certs-verification","text":"Sometimes your organization network have special rules on SSL certs verification and in this case you might face the following error when running the script: SSLError: HTTPSConnectionPool(host='api.coinmetrics.io', port=443): Max retries exceeded with url: <some_url_path> (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1123)'))) In this case, you can pass an option during client initialization to disable ssl verification for requests like this: client = CoinMetricsClient ( verify_ssl_certs = False ) We don't recommend setting it to False by default and you should make sure you understand the security risks of disabling SSL certs verification. Additionally, you may choose to specify the path to the SSL certificates on your machine. This may cause errors where Python is unable to locate the certificates on your machine, particularly when using Python virtual environments. from coinmetrics.api_client import CoinMetricsClient SSL_CERT_LOCATION = '/Users/<USER_NAME>/Library/Python/3.8/lib/python/site-packages/certifi/cacert.pem' client = CoinMetricsClient ( verify_ssl_certs = SSL_CERT_LOCATION ) A quick way to find the certs on your machine is: python3 -c \"import requests; print(requests.certs.where())\" And note that this will change based on whether or not you are using a Python virtual environment or not","title":"SSL Certs verification"},{"location":"index.html#installing-and-running-coinmetrics-package-and-other-python-packages-behind-a-secure-python-network","text":"Related to SSL Certs verification, you may have trouble installing and updating PyPi packages to your local environment. So you may need to choose the best solution for your company and environment - either using package managers or installing offline.","title":"Installing and running coinmetrics package and other python packages behind a secure python network"},{"location":"index.html#installing-using-package-managers","text":"Full instructions for setting up your environment to use conda, pip, yarn, npm, etc. can be found here . Additionally, a workaround to disable SSL verification when installing a trusted Python package is this: pip install --trusted-host pypi.python.org <packagename> Although it is important to make sure you understand the risks associated with disabling SSL verification and ensure compliance with company policies.","title":"Installing using package managers"},{"location":"index.html#installing-python-packages-locally-offline","text":"It may be easier to download and install the package locally. Steps: 1. Download the files for the Coin Metrics API Client from PyPi 2. Install it locally","title":"Installing Python packages locally/ offline"},{"location":"index.html#requests-proxy","text":"Sometimes your organization has special rules on making requests to third parties and you have to use proxies in order to comply with the rules. For proxies that don't require auth you can specify them similar to this example: client = CoinMetricsClient ( proxy_url = f 'http://<hostname>:<port>' ) For proxies that require auth, you should be able to specify username and password similar to this example: client = CoinMetricsClient ( proxy_url = f 'http://<username>:<password>@<hostname>:<port>' )","title":"Requests Proxy"},{"location":"index.html#extended-documentation","text":"For more information about the available methods in the client please reference API Client Spec","title":"Extended documentation"},{"location":"FlatFilesExport.html","text":"Exporting flat files \u00b6 Along with the API client we provide a data exporting tool which allow downloading large amount of data as flat files rather than from the API itself. The tool allows users to download daily files over our entire provided history for market trades, market quotes, and market candles. Installation and set up \u00b6 The tool is installed a long with the coinmetrics-api-client , it's recommended to create a new Python [virtual environment] for your project and install the package: python -m venv .venv source .venv/bin/activate pip install coinmetrics-api-client The export tool requires access to a CoinMetrics API key, and is accessed with the environment variable CM_API_KEY , the easiest way to set this is to run export CM_API_KEY=<API_KEY> in your terminal on MacOS/Linux or just set CM_API_KEY=<API_KEY> on Windows. Additionally, you have the option of passing it in which each command instead. To confirm the tool is installed correct execute the command coinmetrics export --help which brings up relevant documentation. At the bottom of the help message all the available commands are shown: Commands: get-asset-pairs get-exchanges market-candles-future Used to export data related to future market... market-candles-spot Used to export data related to spot market candles. market-quotes-future Used to export data related to future market... market-quotes-spot Used to export data related to spot market quotes... market-trades-future Used to export data related to future market... market-trades-spot Used to export data related to spot market trades. Exporting Market Trades Files \u00b6 Further documentation is available on any of the commands by running coinmetrics export <command> --help , for example running coinmetrics export market-trades-spot --help prints: Usage: coinmetrics export market-trades-spot [OPTIONS] EXCHANGES [START_DATE]: [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m -%d %H:%M:%S] [END_DATE]:[%Y-%m-% d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Used to export data related to spot market trades. Format: coinmetrics export market-trades-spot <exchanges> <start_date> <end_date> Example: coinmetrics export market-trades-spot coinbase,binance 2022-01-01 2022-01-03. Arguments: EXCHANGES Pass in arguments as a list of strings separated by by commas i.e. binance,coinbase,bitmex [required] [START_DATE]:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] [default: 2022-08-10] [END_DATE]:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] [default: 2022-08-10] Options: --output-format TEXT [default: json.gz] --threaded / --no-threaded [default: False] --api-key TEXT --help Show this message and exit. Example: \u00b6 If you want to get the flat files for spot-market-trades from coinbase and binance for the first 5 days of June 2022: coinmetrics export market-trades-spot binance,coinbase 2022-06-01 2022-06-05 In your current directory you will see: market-trades-spot \u251c\u2500\u2500 binance \u2502 \u251c\u2500\u2500 2022-06-01.json.gz \u2502 \u251c\u2500\u2500 2022-06-02.json.gz \u2502 \u251c\u2500\u2500 2022-06-03.json.gz \u2502 \u251c\u2500\u2500 2022-06-04.json.gz \u2502 \u2514\u2500\u2500 2022-06-05.json.gz \u2514\u2500\u2500 coinbase \u251c\u2500\u2500 2022-06-01.json.gz \u251c\u2500\u2500 2022-06-02.json.gz \u251c\u2500\u2500 2022-06-03.json.gz \u251c\u2500\u2500 2022-06-04.json.gz \u2514\u2500\u2500 2022-06-05.json.gz By default the files are downloaded as gzipped json files - they are compressed in order to take up less space. If you instead wish to download the data as a csv or json you can use: coinmetrics export market-trades-spot binance,coinbase 2022-06-01 2022-06-05 --output-format csv The functionality for getting future, rather than spot market trades is the exact same, just replace market-trades-spot with market-trades-future In order to figure out what exchanges are supported for a flat file type you can run coinmetrics export get-exchanges <command> , so in this case running coinmetrics export get-exchanges market-trades-spot Exporting market quotes \u00b6 Market quotes are similar to market trades, except data is separated by exchange and by asset-pair. So you must provide both what exchanges you are querying as well the specific asset pairs. Example if you wanted to export files to market quotes for ETHUSDT and BTCUSDT over a certain timeframe as json files: coinmetrics export market-quotes-spot binance ETHUSDT,BTCUSDT 2022-03-03 2022-03-05 --output-format json In order to find what asset pairs are availible you can query this information with coinmetrics export get-asset-pairs <command> <exchange> so in this case, for Binance you would run coinmetrics export get-asset-pairs market-quotes-spot binance . If you are comfortable with command line tools it may be helpful to string this with unix command line tools like grep . For example, to find all the BTC related pairs for binance you might run coinmetrics export get-asset-pairs market-quotes-spot binance | grep BTC . The functionality is the same for market-qutoes-futures . Exporting market candles \u00b6 Exporting market candles also functions similar to market trades, however you must specify a frequency in addition to an exchange and date range. The frequency denominates the range which the market candles cover. These frequencies are currently \"1m\", \"5m\", \"10m\", \"15m\", \"30m\", \"1h\", and \"1d\" . Example to download 5m spot market candles for coinbase and binance for a date range: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 Which creates these files: market-candles-spot-5m \u251c\u2500\u2500 binance \u2502 \u251c\u2500\u2500 2022-01-01.json.gz \u2502 \u251c\u2500\u2500 2022-01-02.json.gz \u2502 \u251c\u2500\u2500 2022-01-03.json.gz \u2502 \u251c\u2500\u2500 2022-01-04.json.gz \u2502 \u2514\u2500\u2500 2022-01-05.json.gz \u2514\u2500\u2500 coinbase \u251c\u2500\u2500 2022-01-01.json.gz \u251c\u2500\u2500 2022-01-02.json.gz \u251c\u2500\u2500 2022-01-03.json.gz \u251c\u2500\u2500 2022-01-04.json.gz \u2514\u2500\u2500 2022-01-05.json.gz The functionality is the same for market-candles-future Using API Key without setting an environment variable \u00b6 If you don't wish to put your CoinMetrics API key in your environment, you may also pass it in with any command with the flag --api-key . Example: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 --api-key <API_KEY> Downloading files in parallel \u00b6 If you are downloading many files and want to speed the process up there is an option to concurrently download multiple rather than one at a time, using the --threaded flag. Example: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 --threaded Note that using this option will consume more system resources and network bandwith, and the download speed will still be limited by egress from the files server as well as the specs of your machine. Using the CoinMetricsDataExporter in Python instead of CLI \u00b6 Depending on the use case it might be more convenient to use the CoinMetricsDataExporter directly in Python rather than from the CLI. There is several examples here as well as one below: from coinmetrics.data_exporter import CoinMetricsDataExporter from datetime import datetime CM_API_KEY = \"<YOUR_API_KEY>\" data_exporter = CoinMetricsDataExporter ( api_key = CM_API_KEY ) if __name__ == \"__main__\" : \"\"\" This script will export all the daily market-trades-spot files for Coinbase and Gemini for the month of January \"\"\" start_date = datetime ( 2019 , 1 , 1 ) end_date = datetime ( 2019 , 1 , 31 ) exchanges = [ \"coinbase\" , \"gemini\" ] data_exporter . export_market_trades_spot_data ( start_date = start_date , end_date = end_date , exchanges = exchanges , threaded = True )","title":"Flat Files Exporter"},{"location":"FlatFilesExport.html#exporting-flat-files","text":"Along with the API client we provide a data exporting tool which allow downloading large amount of data as flat files rather than from the API itself. The tool allows users to download daily files over our entire provided history for market trades, market quotes, and market candles.","title":"Exporting flat files"},{"location":"FlatFilesExport.html#installation-and-set-up","text":"The tool is installed a long with the coinmetrics-api-client , it's recommended to create a new Python [virtual environment] for your project and install the package: python -m venv .venv source .venv/bin/activate pip install coinmetrics-api-client The export tool requires access to a CoinMetrics API key, and is accessed with the environment variable CM_API_KEY , the easiest way to set this is to run export CM_API_KEY=<API_KEY> in your terminal on MacOS/Linux or just set CM_API_KEY=<API_KEY> on Windows. Additionally, you have the option of passing it in which each command instead. To confirm the tool is installed correct execute the command coinmetrics export --help which brings up relevant documentation. At the bottom of the help message all the available commands are shown: Commands: get-asset-pairs get-exchanges market-candles-future Used to export data related to future market... market-candles-spot Used to export data related to spot market candles. market-quotes-future Used to export data related to future market... market-quotes-spot Used to export data related to spot market quotes... market-trades-future Used to export data related to future market... market-trades-spot Used to export data related to spot market trades.","title":"Installation and set up"},{"location":"FlatFilesExport.html#exporting-market-trades-files","text":"Further documentation is available on any of the commands by running coinmetrics export <command> --help , for example running coinmetrics export market-trades-spot --help prints: Usage: coinmetrics export market-trades-spot [OPTIONS] EXCHANGES [START_DATE]: [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m -%d %H:%M:%S] [END_DATE]:[%Y-%m-% d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Used to export data related to spot market trades. Format: coinmetrics export market-trades-spot <exchanges> <start_date> <end_date> Example: coinmetrics export market-trades-spot coinbase,binance 2022-01-01 2022-01-03. Arguments: EXCHANGES Pass in arguments as a list of strings separated by by commas i.e. binance,coinbase,bitmex [required] [START_DATE]:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] [default: 2022-08-10] [END_DATE]:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] [default: 2022-08-10] Options: --output-format TEXT [default: json.gz] --threaded / --no-threaded [default: False] --api-key TEXT --help Show this message and exit.","title":"Exporting Market Trades Files"},{"location":"FlatFilesExport.html#example","text":"If you want to get the flat files for spot-market-trades from coinbase and binance for the first 5 days of June 2022: coinmetrics export market-trades-spot binance,coinbase 2022-06-01 2022-06-05 In your current directory you will see: market-trades-spot \u251c\u2500\u2500 binance \u2502 \u251c\u2500\u2500 2022-06-01.json.gz \u2502 \u251c\u2500\u2500 2022-06-02.json.gz \u2502 \u251c\u2500\u2500 2022-06-03.json.gz \u2502 \u251c\u2500\u2500 2022-06-04.json.gz \u2502 \u2514\u2500\u2500 2022-06-05.json.gz \u2514\u2500\u2500 coinbase \u251c\u2500\u2500 2022-06-01.json.gz \u251c\u2500\u2500 2022-06-02.json.gz \u251c\u2500\u2500 2022-06-03.json.gz \u251c\u2500\u2500 2022-06-04.json.gz \u2514\u2500\u2500 2022-06-05.json.gz By default the files are downloaded as gzipped json files - they are compressed in order to take up less space. If you instead wish to download the data as a csv or json you can use: coinmetrics export market-trades-spot binance,coinbase 2022-06-01 2022-06-05 --output-format csv The functionality for getting future, rather than spot market trades is the exact same, just replace market-trades-spot with market-trades-future In order to figure out what exchanges are supported for a flat file type you can run coinmetrics export get-exchanges <command> , so in this case running coinmetrics export get-exchanges market-trades-spot","title":"Example:"},{"location":"FlatFilesExport.html#exporting-market-quotes","text":"Market quotes are similar to market trades, except data is separated by exchange and by asset-pair. So you must provide both what exchanges you are querying as well the specific asset pairs. Example if you wanted to export files to market quotes for ETHUSDT and BTCUSDT over a certain timeframe as json files: coinmetrics export market-quotes-spot binance ETHUSDT,BTCUSDT 2022-03-03 2022-03-05 --output-format json In order to find what asset pairs are availible you can query this information with coinmetrics export get-asset-pairs <command> <exchange> so in this case, for Binance you would run coinmetrics export get-asset-pairs market-quotes-spot binance . If you are comfortable with command line tools it may be helpful to string this with unix command line tools like grep . For example, to find all the BTC related pairs for binance you might run coinmetrics export get-asset-pairs market-quotes-spot binance | grep BTC . The functionality is the same for market-qutoes-futures .","title":"Exporting market quotes"},{"location":"FlatFilesExport.html#exporting-market-candles","text":"Exporting market candles also functions similar to market trades, however you must specify a frequency in addition to an exchange and date range. The frequency denominates the range which the market candles cover. These frequencies are currently \"1m\", \"5m\", \"10m\", \"15m\", \"30m\", \"1h\", and \"1d\" . Example to download 5m spot market candles for coinbase and binance for a date range: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 Which creates these files: market-candles-spot-5m \u251c\u2500\u2500 binance \u2502 \u251c\u2500\u2500 2022-01-01.json.gz \u2502 \u251c\u2500\u2500 2022-01-02.json.gz \u2502 \u251c\u2500\u2500 2022-01-03.json.gz \u2502 \u251c\u2500\u2500 2022-01-04.json.gz \u2502 \u2514\u2500\u2500 2022-01-05.json.gz \u2514\u2500\u2500 coinbase \u251c\u2500\u2500 2022-01-01.json.gz \u251c\u2500\u2500 2022-01-02.json.gz \u251c\u2500\u2500 2022-01-03.json.gz \u251c\u2500\u2500 2022-01-04.json.gz \u2514\u2500\u2500 2022-01-05.json.gz The functionality is the same for market-candles-future","title":"Exporting market candles"},{"location":"FlatFilesExport.html#using-api-key-without-setting-an-environment-variable","text":"If you don't wish to put your CoinMetrics API key in your environment, you may also pass it in with any command with the flag --api-key . Example: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 --api-key <API_KEY>","title":"Using API Key without setting an environment variable"},{"location":"FlatFilesExport.html#downloading-files-in-parallel","text":"If you are downloading many files and want to speed the process up there is an option to concurrently download multiple rather than one at a time, using the --threaded flag. Example: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 --threaded Note that using this option will consume more system resources and network bandwith, and the download speed will still be limited by egress from the files server as well as the specs of your machine.","title":"Downloading files in parallel"},{"location":"FlatFilesExport.html#using-the-coinmetricsdataexporter-in-python-instead-of-cli","text":"Depending on the use case it might be more convenient to use the CoinMetricsDataExporter directly in Python rather than from the CLI. There is several examples here as well as one below: from coinmetrics.data_exporter import CoinMetricsDataExporter from datetime import datetime CM_API_KEY = \"<YOUR_API_KEY>\" data_exporter = CoinMetricsDataExporter ( api_key = CM_API_KEY ) if __name__ == \"__main__\" : \"\"\" This script will export all the daily market-trades-spot files for Coinbase and Gemini for the month of January \"\"\" start_date = datetime ( 2019 , 1 , 1 ) end_date = datetime ( 2019 , 1 , 31 ) exchanges = [ \"coinbase\" , \"gemini\" ] data_exporter . export_market_trades_spot_data ( start_date = start_date , end_date = end_date , exchanges = exchanges , threaded = True )","title":"Using the CoinMetricsDataExporter in Python instead of CLI"},{"location":"api_client.html","text":"coinmetrics.api_client \u00b6 CoinMetricsClient Objects \u00b6 class CoinMetricsClient () catalog_assets \u00b6 | catalog_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetsData Returns meta information about available assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. Returns : list(dict(str, any)) : Information that is available for requested assets, like: Full name, metrics and available frequencies, markets, exchanges, etc. catalog_asset_alerts \u00b6 | catalog_asset_alerts ( assets : Optional [ Union [ List [ str ], str ]] = None , alerts : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetAlertsData Returns meta information about available assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. alerts ( list(str), str ): A single alert or alert name to return info for. If no alerts provided, all available alerts are returned. Returns : list(dict(str, any)) : Information that is available for requested assets alerts. catalog_asset_pairs \u00b6 | catalog_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairsData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested asset-asset pair like metrics and their respective frequencies and time ranges catalog_asset_pair_candles \u00b6 | catalog_asset_pair_candles ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairCandlesData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Returns a list of available asset pair candles along with the time ranges of available data per candle duration. catalog_exchanges \u00b6 | catalog_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangesData Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all available exchanges are returned. Returns : list(dict(str, any)) : Information that is available for requested exchanges, like: markets, min and max time available. catalog_exchange_assets \u00b6 | catalog_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangeAssetsData Returns meta information about available exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested exchange-asset pair like metrics and their respective frequencies and time ranges catalog_indexes \u00b6 | catalog_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogIndexesData Returns meta information about available indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all available indexes are returned. Returns : list(dict(str, any)) : Information that is available for requested indexes, like: Full name, and available frequencies. catalog_institutions \u00b6 | catalog_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogInstitutionsData Returns meta information about available institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested institution like metrics and their respective frequencies and time ranges. catalog_markets \u00b6 | catalog_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketsData Returns list of available markets that correspond to a filter. If no filter is set, returns all available assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_market_trades \u00b6 | catalog_market_trades ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with trades support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market trades that are available for the provided filter, as well as the time frames they are available catalog_metrics \u00b6 | catalog_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of available metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_market_metrics \u00b6 | catalog_market_metrics ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketMetricsData Returns list of available markets with metrics support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_market_candles \u00b6 | catalog_market_candles ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketCandlesData Returns list of available markets with candles support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_market_orderbooks \u00b6 | catalog_market_orderbooks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with orderbooks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets orderbooks that correspond to a filter catalog_market_quotes \u00b6 | catalog_market_quotes ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with quotes support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets quotes that correspond to a filter catalog_market_funding_rates \u00b6 | catalog_market_funding_rates ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with funding rates support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about funding rates that correspond to a filter catalog_market_greeks \u00b6 | catalog_market_greeks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with greeks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market greeks that correspond to the filter catalog_market_open_interest \u00b6 | catalog_market_open_interest ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with open interest support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market open interest that correspond to a filter catalog_market_liquidations \u00b6 | catalog_market_liquidations ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with liquidations support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market liquidations that correspond to a filter catalog_full_assets \u00b6 | catalog_full_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetsData Returns meta information about supported assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all supported assets are returned. Returns : list(dict(str, any)) : Information that is supported for requested assets, like: Full name, metrics and supported frequencies, markets, exchanges, etc. catalog_full_asset_alerts \u00b6 | catalog_full_asset_alerts ( assets : Optional [ Union [ List [ str ], str ]] = None , alerts : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetAlertsData Returns meta information about supported assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. alerts ( list(str), str ): A single alert or alert name to return info for. If no alerts provided, all available alerts are returned. Returns : list(dict(str, any)) : Information that is available for requested assets alerts. catalog_full_asset_pairs \u00b6 | catalog_full_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairsData Returns meta information about supported asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested asset-asset pair like metrics and their respective frequencies and time ranges catalog_full_asset_pair_candles \u00b6 | catalog_full_asset_pair_candles ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairCandlesData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Returns a list of available asset pair candles along with the time ranges of available data per candle duration. catalog_full_exchanges \u00b6 | catalog_full_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangesData Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all supported exchanges are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchanges, like: markets, min and max time supported. catalog_full_exchange_assets \u00b6 | catalog_full_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangeAssetsData Returns meta information about supported exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchange-asset pair like metrics and their respective frequencies and time ranges catalog_full_indexes \u00b6 | catalog_full_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogIndexesData Returns meta information about supported indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all supported indexes are returned. Returns : list(dict(str, any)) : Information that is supported for requested indexes, like: Full name, and supported frequencies. catalog_full_institutions \u00b6 | catalog_full_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogInstitutionsData Returns meta information about supported institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested institution like metrics and their respective frequencies and time ranges. catalog_full_markets \u00b6 | catalog_full_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketsData Returns list of supported markets that correspond to a filter. If no filter is set, returns all supported assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max supported time frames. catalog_full_market_trades \u00b6 | catalog_full_market_trades ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with trades support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market trades that are available for the provided filter, as well as the time frames they are available catalog_full_metrics \u00b6 | catalog_full_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of supported metrics along with information for them like description, category, precision and assets for which a metric is supported. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all supported metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is supported. catalog_full_market_metrics \u00b6 | catalog_full_market_metrics ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketMetricsData Returns list of supported markets with metrics support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_full_market_candles \u00b6 | catalog_full_market_candles ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketCandlesData Returns list of available markets with candles support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_full_market_orderbooks \u00b6 | catalog_full_market_orderbooks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with orderbooks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets orderbooks that correspond to a filter catalog_full_market_quotes \u00b6 | catalog_full_market_quotes ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with quotes support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets quotes that correspond to a filter catalog_full_market_funding_rates \u00b6 | catalog_full_market_funding_rates ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with funding rates support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about funding rates that correspond to a filter catalog_full_market_open_interest \u00b6 | catalog_full_market_open_interest ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with open interest support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market open interest that correspond to a filter catalog_full_market_liquidations \u00b6 | catalog_full_market_liquidations ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with liquidations support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market liquidations that correspond to a filter get_asset_alerts \u00b6 | get_asset_alerts ( assets : Union [ List [ str ], str ], alerts : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns asset alerts for the specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' alerts ( list(str), str ): list of asset alert names page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Asset alerts timeseries. get_asset_chains \u00b6 | get_asset_chains ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns the chains of blocks for the specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Asset chains timeseries. get_asset_metrics \u00b6 | get_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_asset : Optional [ int ] = None ) -> DataCollection Returns requested metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"asset\", \"height\", or \"time\". Default is \"asset\". Metrics with 1b frequency are sorted by (asset, height, block_hash) tuples by default. Metrics with other frequencies are sorted by (asset, time) by default. If you want to sort 1d metrics by (time, asset) you should choose time as value for the sort parameter. Sorting by time is useful if you request metrics for a set of assets. limit_per_asset ( int ): How many entries per asset the result should contain. Returns : DataCollection : Asset Metrics timeseries. get_exchange_metrics \u00b6 | get_exchange_metrics ( exchanges : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. 'exchange', 'time'. Metrics are sorted by 'exchange' by default. limit_per_exchange ( int ): How many entries per exchange the result should contain. Returns : DataCollection : Asset Metrics timeseries. get_exchange_asset_metrics \u00b6 | get_exchange_asset_metrics ( exchange_assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange_asset : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchange-asset. Arguments : exchange_assets ( list(str), str ): A single exchange-asset pairs (e.g. \"binance-btc\" or a list of exchange-asset-pair to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"exchange_asset\", \"time\". Default is \"exchange_asset\". limit_per_exchange_asset ( int ): How many entries per exchange-asset the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries. get_pair_metrics \u00b6 | get_pair_metrics ( pairs : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns metrics books for specified asset-asset pairs. Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g.\"pair\", \"time\". \"pair\" by default limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries. get_pair_candles \u00b6 | get_pair_candles ( pairs : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns candles for specified asset pairs. Results are ordered by tuple (pair, time). Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Asset pair candles timeseries. get_institution_metrics \u00b6 | get_institution_metrics ( institutions : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_institution : Optional [ int ] = None ) -> DataCollection Returns metrics for specified institutions. Arguments : institutions ( list(str), str ): A single institution name or a list of institutions to return info for. metrics ( list(str), str ): list of institution-specific metric names, e.g. 'gbtc_total_assets' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"institution\", or \"time\". Default is \"institution\". limit_per_institution ( int ): How many entries per institution the result should contain. Returns : DataCollection : Asset Metrics timeseries. get_index_levels \u00b6 | get_index_levels ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_index : Optional [ int ] = None ) -> DataCollection Returns index levels for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_index ( int ): How many entries per index the result should contain. Returns : DataCollection : Index Levels timeseries. get_index_constituents \u00b6 | get_index_constituents ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns index constituents for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Index Constituents timeseries. get_market_metrics \u00b6 | get_market_metrics ( markets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market metrics for specified markets, frequency and date range. For more information on market metrics, see: https://docs.coinmetrics.io/api/v4#operation/getTimeseriesMarketMetrics Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' metrics ( list(str), str ): list of metrics, i.e. 'liquidations_reported_future_buy_units_1d'. See market metrics catalog for a list of supported metrics: https://docs.coinmetrics.io/api/v4#operation/getCatalogMarketMetrics frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Candles timeseries. get_market_candles \u00b6 | get_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market candles for specified markets, frequency and date range. For more information on market candles, see: https://docs.coinmetrics.io/info/markets/candles Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Candles timeseries. get_market_trades \u00b6 | get_market_trades ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market trades for specified markets and date range. For more information on market trades, see: https://docs.coinmetrics.io/info/markets/trades Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Trades timeseries. get_market_open_interest \u00b6 | get_market_open_interest ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market open interest for specified markets and date range. For more information on open interest, see: https://docs.coinmetrics.io/info/markets/openinterest Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Open Interest timeseries. get_market_liquidations \u00b6 | get_market_liquidations ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market liquidations for specified markets and date range. For more information on liquidations, see: https://docs.coinmetrics.io/info/markets/liquidations Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Liquidations timeseries. get_market_funding_rates \u00b6 | get_market_funding_rates ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market funding rates for specified markets and date range. For more information on funding rates, see: https://docs.coinmetrics.io/info/markets/fundingrates Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Funding Rates timeseries. get_market_orderbooks \u00b6 | get_market_orderbooks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , depth_limit : Optional [ str ] = \"100\" , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market order books for specified markets and date range. For more information on order books, see: https://docs.coinmetrics.io/info/markets/orderbook Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. depth_limit ( str ): book depth limit, 100 levels max or full book that is not limited and provided as is from the exchange. Full book snapshots are collected once per hour timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Order Books timeseries. get_market_quotes \u00b6 | get_market_quotes ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market quotes for specified markets and date range. For more information on quotes, see: https://docs.coinmetrics.io/info/markets/quotes Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Quotes timeseries. get_market_contract_prices \u00b6 | get_market_contract_prices ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns contract prices for specified markets. This includes index price and mark price that are used by the exchange for settlement and risk management purposes. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Contract Prices timeseries. get_market_implied_volatility \u00b6 | get_market_implied_volatility ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns implied volatility for specified markets. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Volatility timeseries. get_market_greeks \u00b6 | get_market_greeks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns greeks for option markets. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Volatility timeseries. get_mining_pool_tips_summary \u00b6 | get_mining_pool_tips_summary ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mining pool tips summaries for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mining Pool Tips timeseries. get_mempool_feerates \u00b6 | get_mempool_feerates ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = 200 , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mempool feerates for the specified assets. Note: for this method, page_size must be <= 200. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mempool Fee Rates timeseries. get_stream_asset_metrics \u00b6 | get_stream_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Asset Metrics timeseries stream. get_stream_market_trades \u00b6 | get_stream_market_trades ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market trades. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Trades timeseries stream. get_stream_market_orderbooks \u00b6 | get_stream_market_orderbooks ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market orderbooks. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Orderbooks timeseries stream. get_stream_market_quotes \u00b6 | get_stream_market_quotes ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market quotes. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Quotes timeseries stream. get_stream_market_candles \u00b6 | get_stream_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market candles. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. frequency ( str ): Candle duration. Supported values are 1m, 5m, 10m, 15m, 30m, 1h, 4h, 1d. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Candles timeseries stream. get_list_of_blocks \u00b6 | get_list_of_blocks ( asset : str , block_hashes : Optional [ Union [ List [ str ], str ]] = None , heights : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain blocks metadata. Arguments : asset ( str ): Asset name block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. heights ( str, list(str) ): Optional comma separated list of block heights to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata get_list_of_accounts \u00b6 | get_list_of_accounts ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata get_list_of_transactions \u00b6 | get_list_of_transactions ( asset : str , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain transactions metadata. Arguments : asset ( str ): Asset name transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of transaction metadata get_list_of_balance_updates \u00b6 | get_list_of_balance_updates ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts balance updates. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of balance updates get_list_of_blocks_v2 \u00b6 | get_list_of_blocks_v2 ( asset : str , block_hashes : Optional [ Union [ List [ str ], str ]] = None , heights : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain blocks metadata. Arguments : asset ( str ): Asset name block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. heights ( str, list(str) ): Optional comma separated list of block heights to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata get_list_of_accounts_v2 \u00b6 | get_list_of_accounts_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata get_list_of_sub_accounts_v2 \u00b6 | get_list_of_sub_accounts_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain sub-accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata get_list_of_transactions_v2 \u00b6 | get_list_of_transactions_v2 ( asset : str , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain transactions metadata. Arguments : asset ( str ): Asset name transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of transaction metadata get_list_of_balance_updates_v2 \u00b6 | get_list_of_balance_updates_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts balance updates. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of balance updates get_full_block \u00b6 | get_full_block ( asset : str , block_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain block with all transactions and balance updates. Arguments : asset ( str ): Asset name block_hash ( str ): block hash Returns : list(dict(str), any) : blockchain block data get_full_transaction \u00b6 | get_full_transaction ( asset : str , transaction_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates. Arguments : asset ( str ): Asset name transaction_hash ( str ): transaction hash Returns : list(dict(str), any) : block transaction data get_full_transaction_for_block \u00b6 | get_full_transaction_for_block ( asset : str , block_hash : str , transaction_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates for a specific block. Arguments : asset ( str ): Asset name block_hash ( str ): block hash transaction_hash ( str ): transaction hash Returns : list(dict(str, Any)) : block transaction data with balance updates get_full_block_v2 \u00b6 | get_full_block_v2 ( asset : str , block_hash : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain block with all transactions and balance updates. Arguments : asset ( str ): Asset name block_hash ( str ): block hash include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str), any) : blockchain block data get_full_transaction_v2 \u00b6 | get_full_transaction_v2 ( asset : str , txid : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates. Arguments : asset ( str ): Asset name txid ( str ): transaction identifier include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str), any) : block transaction data get_full_transaction_for_block_v2 \u00b6 | get_full_transaction_for_block_v2 ( asset : str , block_hash : str , txid : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates for a specific block. Arguments : asset ( str ): Asset name block_hash ( str ): block hash txid ( str ): transaction identifier include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str, Any)) : block transaction data with balance updates get_transaction_tracker \u00b6 | get_transaction_tracker ( asset : str , txids : Optional [ Union [ List [ str ], str ]] = None , replacements_for_txids : Optional [ Union [ List [ str ], str ]] = None , replacements_only : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns status updates for the specified or all transactions. Arguments : asset ( str ): Asset name txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to track. replacements_for_txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to get the corresponding replacement transactions for. Mutually exclusive with txids. replacements_only ( bool ): Boolean indicating if the response should contain only the replacement transactions. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : status updates for the specified or all transactions.","title":"API Client Spec"},{"location":"api_client.html#coinmetricsapi_client","text":"","title":"coinmetrics.api_client"},{"location":"api_client.html#coinmetricsclient-objects","text":"class CoinMetricsClient ()","title":"CoinMetricsClient Objects"},{"location":"api_client.html#catalog_assets","text":"| catalog_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetsData Returns meta information about available assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. Returns : list(dict(str, any)) : Information that is available for requested assets, like: Full name, metrics and available frequencies, markets, exchanges, etc.","title":"catalog_assets"},{"location":"api_client.html#catalog_asset_alerts","text":"| catalog_asset_alerts ( assets : Optional [ Union [ List [ str ], str ]] = None , alerts : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetAlertsData Returns meta information about available assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. alerts ( list(str), str ): A single alert or alert name to return info for. If no alerts provided, all available alerts are returned. Returns : list(dict(str, any)) : Information that is available for requested assets alerts.","title":"catalog_asset_alerts"},{"location":"api_client.html#catalog_asset_pairs","text":"| catalog_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairsData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested asset-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_asset_pairs"},{"location":"api_client.html#catalog_asset_pair_candles","text":"| catalog_asset_pair_candles ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairCandlesData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Returns a list of available asset pair candles along with the time ranges of available data per candle duration.","title":"catalog_asset_pair_candles"},{"location":"api_client.html#catalog_exchanges","text":"| catalog_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangesData Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all available exchanges are returned. Returns : list(dict(str, any)) : Information that is available for requested exchanges, like: markets, min and max time available.","title":"catalog_exchanges"},{"location":"api_client.html#catalog_exchange_assets","text":"| catalog_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangeAssetsData Returns meta information about available exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested exchange-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_exchange_assets"},{"location":"api_client.html#catalog_indexes","text":"| catalog_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogIndexesData Returns meta information about available indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all available indexes are returned. Returns : list(dict(str, any)) : Information that is available for requested indexes, like: Full name, and available frequencies.","title":"catalog_indexes"},{"location":"api_client.html#catalog_institutions","text":"| catalog_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogInstitutionsData Returns meta information about available institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested institution like metrics and their respective frequencies and time ranges.","title":"catalog_institutions"},{"location":"api_client.html#catalog_markets","text":"| catalog_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketsData Returns list of available markets that correspond to a filter. If no filter is set, returns all available assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_markets"},{"location":"api_client.html#catalog_market_trades","text":"| catalog_market_trades ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with trades support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market trades that are available for the provided filter, as well as the time frames they are available","title":"catalog_market_trades"},{"location":"api_client.html#catalog_metrics","text":"| catalog_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of available metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_metrics"},{"location":"api_client.html#catalog_market_metrics","text":"| catalog_market_metrics ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketMetricsData Returns list of available markets with metrics support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_market_metrics"},{"location":"api_client.html#catalog_market_candles","text":"| catalog_market_candles ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketCandlesData Returns list of available markets with candles support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_market_candles"},{"location":"api_client.html#catalog_market_orderbooks","text":"| catalog_market_orderbooks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with orderbooks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets orderbooks that correspond to a filter","title":"catalog_market_orderbooks"},{"location":"api_client.html#catalog_market_quotes","text":"| catalog_market_quotes ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with quotes support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets quotes that correspond to a filter","title":"catalog_market_quotes"},{"location":"api_client.html#catalog_market_funding_rates","text":"| catalog_market_funding_rates ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with funding rates support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about funding rates that correspond to a filter","title":"catalog_market_funding_rates"},{"location":"api_client.html#catalog_market_greeks","text":"| catalog_market_greeks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with greeks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market greeks that correspond to the filter","title":"catalog_market_greeks"},{"location":"api_client.html#catalog_market_open_interest","text":"| catalog_market_open_interest ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with open interest support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market open interest that correspond to a filter","title":"catalog_market_open_interest"},{"location":"api_client.html#catalog_market_liquidations","text":"| catalog_market_liquidations ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with liquidations support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market liquidations that correspond to a filter","title":"catalog_market_liquidations"},{"location":"api_client.html#catalog_full_assets","text":"| catalog_full_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetsData Returns meta information about supported assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all supported assets are returned. Returns : list(dict(str, any)) : Information that is supported for requested assets, like: Full name, metrics and supported frequencies, markets, exchanges, etc.","title":"catalog_full_assets"},{"location":"api_client.html#catalog_full_asset_alerts","text":"| catalog_full_asset_alerts ( assets : Optional [ Union [ List [ str ], str ]] = None , alerts : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetAlertsData Returns meta information about supported assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. alerts ( list(str), str ): A single alert or alert name to return info for. If no alerts provided, all available alerts are returned. Returns : list(dict(str, any)) : Information that is available for requested assets alerts.","title":"catalog_full_asset_alerts"},{"location":"api_client.html#catalog_full_asset_pairs","text":"| catalog_full_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairsData Returns meta information about supported asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested asset-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_full_asset_pairs"},{"location":"api_client.html#catalog_full_asset_pair_candles","text":"| catalog_full_asset_pair_candles ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairCandlesData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Returns a list of available asset pair candles along with the time ranges of available data per candle duration.","title":"catalog_full_asset_pair_candles"},{"location":"api_client.html#catalog_full_exchanges","text":"| catalog_full_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangesData Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all supported exchanges are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchanges, like: markets, min and max time supported.","title":"catalog_full_exchanges"},{"location":"api_client.html#catalog_full_exchange_assets","text":"| catalog_full_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangeAssetsData Returns meta information about supported exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchange-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_full_exchange_assets"},{"location":"api_client.html#catalog_full_indexes","text":"| catalog_full_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogIndexesData Returns meta information about supported indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all supported indexes are returned. Returns : list(dict(str, any)) : Information that is supported for requested indexes, like: Full name, and supported frequencies.","title":"catalog_full_indexes"},{"location":"api_client.html#catalog_full_institutions","text":"| catalog_full_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogInstitutionsData Returns meta information about supported institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested institution like metrics and their respective frequencies and time ranges.","title":"catalog_full_institutions"},{"location":"api_client.html#catalog_full_markets","text":"| catalog_full_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketsData Returns list of supported markets that correspond to a filter. If no filter is set, returns all supported assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max supported time frames.","title":"catalog_full_markets"},{"location":"api_client.html#catalog_full_market_trades","text":"| catalog_full_market_trades ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with trades support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market trades that are available for the provided filter, as well as the time frames they are available","title":"catalog_full_market_trades"},{"location":"api_client.html#catalog_full_metrics","text":"| catalog_full_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of supported metrics along with information for them like description, category, precision and assets for which a metric is supported. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all supported metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is supported.","title":"catalog_full_metrics"},{"location":"api_client.html#catalog_full_market_metrics","text":"| catalog_full_market_metrics ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketMetricsData Returns list of supported markets with metrics support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_full_market_metrics"},{"location":"api_client.html#catalog_full_market_candles","text":"| catalog_full_market_candles ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketCandlesData Returns list of available markets with candles support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_full_market_candles"},{"location":"api_client.html#catalog_full_market_orderbooks","text":"| catalog_full_market_orderbooks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with orderbooks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets orderbooks that correspond to a filter","title":"catalog_full_market_orderbooks"},{"location":"api_client.html#catalog_full_market_quotes","text":"| catalog_full_market_quotes ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with quotes support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets quotes that correspond to a filter","title":"catalog_full_market_quotes"},{"location":"api_client.html#catalog_full_market_funding_rates","text":"| catalog_full_market_funding_rates ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with funding rates support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about funding rates that correspond to a filter","title":"catalog_full_market_funding_rates"},{"location":"api_client.html#catalog_full_market_open_interest","text":"| catalog_full_market_open_interest ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with open interest support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market open interest that correspond to a filter","title":"catalog_full_market_open_interest"},{"location":"api_client.html#catalog_full_market_liquidations","text":"| catalog_full_market_liquidations ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with liquidations support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market liquidations that correspond to a filter","title":"catalog_full_market_liquidations"},{"location":"api_client.html#get_asset_alerts","text":"| get_asset_alerts ( assets : Union [ List [ str ], str ], alerts : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns asset alerts for the specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' alerts ( list(str), str ): list of asset alert names page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Asset alerts timeseries.","title":"get_asset_alerts"},{"location":"api_client.html#get_asset_chains","text":"| get_asset_chains ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns the chains of blocks for the specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Asset chains timeseries.","title":"get_asset_chains"},{"location":"api_client.html#get_asset_metrics","text":"| get_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_asset : Optional [ int ] = None ) -> DataCollection Returns requested metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"asset\", \"height\", or \"time\". Default is \"asset\". Metrics with 1b frequency are sorted by (asset, height, block_hash) tuples by default. Metrics with other frequencies are sorted by (asset, time) by default. If you want to sort 1d metrics by (time, asset) you should choose time as value for the sort parameter. Sorting by time is useful if you request metrics for a set of assets. limit_per_asset ( int ): How many entries per asset the result should contain. Returns : DataCollection : Asset Metrics timeseries.","title":"get_asset_metrics"},{"location":"api_client.html#get_exchange_metrics","text":"| get_exchange_metrics ( exchanges : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. 'exchange', 'time'. Metrics are sorted by 'exchange' by default. limit_per_exchange ( int ): How many entries per exchange the result should contain. Returns : DataCollection : Asset Metrics timeseries.","title":"get_exchange_metrics"},{"location":"api_client.html#get_exchange_asset_metrics","text":"| get_exchange_asset_metrics ( exchange_assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange_asset : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchange-asset. Arguments : exchange_assets ( list(str), str ): A single exchange-asset pairs (e.g. \"binance-btc\" or a list of exchange-asset-pair to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"exchange_asset\", \"time\". Default is \"exchange_asset\". limit_per_exchange_asset ( int ): How many entries per exchange-asset the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries.","title":"get_exchange_asset_metrics"},{"location":"api_client.html#get_pair_metrics","text":"| get_pair_metrics ( pairs : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns metrics books for specified asset-asset pairs. Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g.\"pair\", \"time\". \"pair\" by default limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries.","title":"get_pair_metrics"},{"location":"api_client.html#get_pair_candles","text":"| get_pair_candles ( pairs : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns candles for specified asset pairs. Results are ordered by tuple (pair, time). Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Asset pair candles timeseries.","title":"get_pair_candles"},{"location":"api_client.html#get_institution_metrics","text":"| get_institution_metrics ( institutions : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_institution : Optional [ int ] = None ) -> DataCollection Returns metrics for specified institutions. Arguments : institutions ( list(str), str ): A single institution name or a list of institutions to return info for. metrics ( list(str), str ): list of institution-specific metric names, e.g. 'gbtc_total_assets' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"institution\", or \"time\". Default is \"institution\". limit_per_institution ( int ): How many entries per institution the result should contain. Returns : DataCollection : Asset Metrics timeseries.","title":"get_institution_metrics"},{"location":"api_client.html#get_index_levels","text":"| get_index_levels ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_index : Optional [ int ] = None ) -> DataCollection Returns index levels for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_index ( int ): How many entries per index the result should contain. Returns : DataCollection : Index Levels timeseries.","title":"get_index_levels"},{"location":"api_client.html#get_index_constituents","text":"| get_index_constituents ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns index constituents for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Index Constituents timeseries.","title":"get_index_constituents"},{"location":"api_client.html#get_market_metrics","text":"| get_market_metrics ( markets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market metrics for specified markets, frequency and date range. For more information on market metrics, see: https://docs.coinmetrics.io/api/v4#operation/getTimeseriesMarketMetrics Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' metrics ( list(str), str ): list of metrics, i.e. 'liquidations_reported_future_buy_units_1d'. See market metrics catalog for a list of supported metrics: https://docs.coinmetrics.io/api/v4#operation/getCatalogMarketMetrics frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Candles timeseries.","title":"get_market_metrics"},{"location":"api_client.html#get_market_candles","text":"| get_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market candles for specified markets, frequency and date range. For more information on market candles, see: https://docs.coinmetrics.io/info/markets/candles Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Candles timeseries.","title":"get_market_candles"},{"location":"api_client.html#get_market_trades","text":"| get_market_trades ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market trades for specified markets and date range. For more information on market trades, see: https://docs.coinmetrics.io/info/markets/trades Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Trades timeseries.","title":"get_market_trades"},{"location":"api_client.html#get_market_open_interest","text":"| get_market_open_interest ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market open interest for specified markets and date range. For more information on open interest, see: https://docs.coinmetrics.io/info/markets/openinterest Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Open Interest timeseries.","title":"get_market_open_interest"},{"location":"api_client.html#get_market_liquidations","text":"| get_market_liquidations ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market liquidations for specified markets and date range. For more information on liquidations, see: https://docs.coinmetrics.io/info/markets/liquidations Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Liquidations timeseries.","title":"get_market_liquidations"},{"location":"api_client.html#get_market_funding_rates","text":"| get_market_funding_rates ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market funding rates for specified markets and date range. For more information on funding rates, see: https://docs.coinmetrics.io/info/markets/fundingrates Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Funding Rates timeseries.","title":"get_market_funding_rates"},{"location":"api_client.html#get_market_orderbooks","text":"| get_market_orderbooks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , depth_limit : Optional [ str ] = \"100\" , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market order books for specified markets and date range. For more information on order books, see: https://docs.coinmetrics.io/info/markets/orderbook Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. depth_limit ( str ): book depth limit, 100 levels max or full book that is not limited and provided as is from the exchange. Full book snapshots are collected once per hour timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Order Books timeseries.","title":"get_market_orderbooks"},{"location":"api_client.html#get_market_quotes","text":"| get_market_quotes ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market quotes for specified markets and date range. For more information on quotes, see: https://docs.coinmetrics.io/info/markets/quotes Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Quotes timeseries.","title":"get_market_quotes"},{"location":"api_client.html#get_market_contract_prices","text":"| get_market_contract_prices ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns contract prices for specified markets. This includes index price and mark price that are used by the exchange for settlement and risk management purposes. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Contract Prices timeseries.","title":"get_market_contract_prices"},{"location":"api_client.html#get_market_implied_volatility","text":"| get_market_implied_volatility ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns implied volatility for specified markets. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Volatility timeseries.","title":"get_market_implied_volatility"},{"location":"api_client.html#get_market_greeks","text":"| get_market_greeks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns greeks for option markets. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Volatility timeseries.","title":"get_market_greeks"},{"location":"api_client.html#get_mining_pool_tips_summary","text":"| get_mining_pool_tips_summary ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mining pool tips summaries for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mining Pool Tips timeseries.","title":"get_mining_pool_tips_summary"},{"location":"api_client.html#get_mempool_feerates","text":"| get_mempool_feerates ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = 200 , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mempool feerates for the specified assets. Note: for this method, page_size must be <= 200. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mempool Fee Rates timeseries.","title":"get_mempool_feerates"},{"location":"api_client.html#get_stream_asset_metrics","text":"| get_stream_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Asset Metrics timeseries stream.","title":"get_stream_asset_metrics"},{"location":"api_client.html#get_stream_market_trades","text":"| get_stream_market_trades ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market trades. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Trades timeseries stream.","title":"get_stream_market_trades"},{"location":"api_client.html#get_stream_market_orderbooks","text":"| get_stream_market_orderbooks ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market orderbooks. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Orderbooks timeseries stream.","title":"get_stream_market_orderbooks"},{"location":"api_client.html#get_stream_market_quotes","text":"| get_stream_market_quotes ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market quotes. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Quotes timeseries stream.","title":"get_stream_market_quotes"},{"location":"api_client.html#get_stream_market_candles","text":"| get_stream_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market candles. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. frequency ( str ): Candle duration. Supported values are 1m, 5m, 10m, 15m, 30m, 1h, 4h, 1d. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Candles timeseries stream.","title":"get_stream_market_candles"},{"location":"api_client.html#get_list_of_blocks","text":"| get_list_of_blocks ( asset : str , block_hashes : Optional [ Union [ List [ str ], str ]] = None , heights : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain blocks metadata. Arguments : asset ( str ): Asset name block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. heights ( str, list(str) ): Optional comma separated list of block heights to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata","title":"get_list_of_blocks"},{"location":"api_client.html#get_list_of_accounts","text":"| get_list_of_accounts ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata","title":"get_list_of_accounts"},{"location":"api_client.html#get_list_of_transactions","text":"| get_list_of_transactions ( asset : str , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain transactions metadata. Arguments : asset ( str ): Asset name transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of transaction metadata","title":"get_list_of_transactions"},{"location":"api_client.html#get_list_of_balance_updates","text":"| get_list_of_balance_updates ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts balance updates. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of balance updates","title":"get_list_of_balance_updates"},{"location":"api_client.html#get_list_of_blocks_v2","text":"| get_list_of_blocks_v2 ( asset : str , block_hashes : Optional [ Union [ List [ str ], str ]] = None , heights : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain blocks metadata. Arguments : asset ( str ): Asset name block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. heights ( str, list(str) ): Optional comma separated list of block heights to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata","title":"get_list_of_blocks_v2"},{"location":"api_client.html#get_list_of_accounts_v2","text":"| get_list_of_accounts_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata","title":"get_list_of_accounts_v2"},{"location":"api_client.html#get_list_of_sub_accounts_v2","text":"| get_list_of_sub_accounts_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain sub-accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata","title":"get_list_of_sub_accounts_v2"},{"location":"api_client.html#get_list_of_transactions_v2","text":"| get_list_of_transactions_v2 ( asset : str , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain transactions metadata. Arguments : asset ( str ): Asset name transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of transaction metadata","title":"get_list_of_transactions_v2"},{"location":"api_client.html#get_list_of_balance_updates_v2","text":"| get_list_of_balance_updates_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts balance updates. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of balance updates","title":"get_list_of_balance_updates_v2"},{"location":"api_client.html#get_full_block","text":"| get_full_block ( asset : str , block_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain block with all transactions and balance updates. Arguments : asset ( str ): Asset name block_hash ( str ): block hash Returns : list(dict(str), any) : blockchain block data","title":"get_full_block"},{"location":"api_client.html#get_full_transaction","text":"| get_full_transaction ( asset : str , transaction_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates. Arguments : asset ( str ): Asset name transaction_hash ( str ): transaction hash Returns : list(dict(str), any) : block transaction data","title":"get_full_transaction"},{"location":"api_client.html#get_full_transaction_for_block","text":"| get_full_transaction_for_block ( asset : str , block_hash : str , transaction_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates for a specific block. Arguments : asset ( str ): Asset name block_hash ( str ): block hash transaction_hash ( str ): transaction hash Returns : list(dict(str, Any)) : block transaction data with balance updates","title":"get_full_transaction_for_block"},{"location":"api_client.html#get_full_block_v2","text":"| get_full_block_v2 ( asset : str , block_hash : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain block with all transactions and balance updates. Arguments : asset ( str ): Asset name block_hash ( str ): block hash include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str), any) : blockchain block data","title":"get_full_block_v2"},{"location":"api_client.html#get_full_transaction_v2","text":"| get_full_transaction_v2 ( asset : str , txid : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates. Arguments : asset ( str ): Asset name txid ( str ): transaction identifier include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str), any) : block transaction data","title":"get_full_transaction_v2"},{"location":"api_client.html#get_full_transaction_for_block_v2","text":"| get_full_transaction_for_block_v2 ( asset : str , block_hash : str , txid : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates for a specific block. Arguments : asset ( str ): Asset name block_hash ( str ): block hash txid ( str ): transaction identifier include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str, Any)) : block transaction data with balance updates","title":"get_full_transaction_for_block_v2"},{"location":"api_client.html#get_transaction_tracker","text":"| get_transaction_tracker ( asset : str , txids : Optional [ Union [ List [ str ], str ]] = None , replacements_for_txids : Optional [ Union [ List [ str ], str ]] = None , replacements_only : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns status updates for the specified or all transactions. Arguments : asset ( str ): Asset name txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to track. replacements_for_txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to get the corresponding replacement transactions for. Mutually exclusive with txids. replacements_only ( bool ): Boolean indicating if the response should contain only the replacement transactions. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : status updates for the specified or all transactions.","title":"get_transaction_tracker"}]}