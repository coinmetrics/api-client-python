{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Coin Metrics Python API v4 client library \u00b6 This is an official Python API client for Coin Metrics API v4. Installation and Updates \u00b6 To install the client you can run the following command: pip install coinmetrics-api-client Note that the client is updated regularly to reflect the changes made in API v4 . Ensure that your latest version matches with what's in pyPI To update your version, run the following command: pip install coinmetrics-api-client -U Introduction \u00b6 You can use this client for querying all kinds of data with your API. To initialize the client you should use your API key, and the CoinMetricsClient class like the following. from coinmetrics.api_client import CoinMetricsClient client = CoinMetricsClient(\"<cm_api_key>\") # or to use community API: client = CoinMetricsClient() After that you can use the client object for getting information such as available market trades as a list of dictionaries: print(client.catalog_market_trades_v2().to_list()) or to iterate over each page of data: for data in client . catalog_market_trades_v2 (): print ( data ) you can also use filters for the catalog endpoints like this: print(client.catalog_market_trades_v2(exchange=\"binance\").to_list()) All the catalog V2 endpoints meant to help access the historical data served by other endpoints. For example, you can get all the BTC market trades for a certain day from binance like this: import os from coinmetrics.api_client import CoinMetricsClient client = CoinMetricsClient ( os . environ [ 'CM_API_KEY' ]) btc_binance_markets = [ market [ 'market' ] for market in client . catalog_market_trades_v2 ( exchange = \"binance\" , asset = \"btc\" ) . to_list ()] start_time = \"2023-01-01\" end_time = \"2023-01-02\" binance_market_trades = client . get_market_trades ( markets = btc_binance_markets , start_time = start_time , end_time = end_time , page_size = 1000 ) . export_to_csv ( \"binance_trades.csv\" ) in this case you would get all the information markets that trade on binance only. You can use this client to connect to our API v4 and get catalog or timeseries data from python environment. It natively supports paging over the data so you can use it to iterate over timeseries entries seamlessly. The client can be used to query both pro and community data. The full list of methods can be found in the API Client Spec . If you'd like a more holistic view of what is offered from an API endpoint you can use the to_dataframe() function associated with our catalog endpoints. The code snippet below shows getting a dataframe of information on all the assets that data is provided for: print ( client . catalog_market_metrics_v2 ( exchange = \"binance\" , page_size = 1000 ) . to_dataframe ()) Output: market metrics 0 binance-1000BTTCUSDT-future [{'metric': 'liquidity_depth_0_1_percent_ask_v... 1 binance-1000FLOKIUSDT-future [{'metric': 'liquidations_reported_future_buy_... 2 binance-1000LUNCBUSD-future [{'metric': 'liquidations_reported_future_buy_... 3 binance-1000LUNCUSDT-future [{'metric': 'liquidations_reported_future_buy_... 4 binance-1000PEPEUSDT-future [{'metric': 'liquidations_reported_future_buy_... Now you can use the pandas Dataframe functionality to do useful transformations, such as filtering out the assets without metrics available, then saving that data to a csv file: import pandas as pd import os from coinmetrics.api_client import CoinMetricsClient from datetime import timedelta client = CoinMetricsClient ( os . environ [ 'CM_API_KEY' ]) binance_markets = client . catalog_market_trades_v2 ( exchange = \"binance\" , page_size = 1000 ) . to_dataframe () binance_markets [ 'max_time' ] = pd . to_datetime ( binance_markets [ 'max_time' ], utc = True ) current_utc_time = pd . Timestamp . now ( tz = 'UTC' ) one_day_ago = current_utc_time - timedelta ( days = 1 ) filtered_binance_markets = binance_markets [ binance_markets [ 'max_time' ] > one_day_ago ] Parallel execution for faster data export \u00b6 There are times when it may be useful to pull in large amounts of data at once. The most effective way to do this when calling the CoinMetrics API is to split your request into many different queries. This functionality is now built into the API Client directly to allow for faster data export: import os from coinmetrics.api_client import CoinMetricsClient if __name__ == '__main__' : client = CoinMetricsClient ( os . environ [ 'CM_API_KEY' ]) binance_eth_markets = [ market [ 'market' ] for market in client . catalog_market_candles ( exchange = \"binance\" , base = \"eth\" )] start_time = \"2022-03-01\" end_time = \"2023-05-01\" client . get_market_candles ( markets = binance_eth_markets , start_time = start_time , end_time = end_time , page_size = 1000 ) . parallel () . export_to_json_files () What this feature does is rather request all the data in one thread, it will split into many threads or processes and either store them in separate files in the case of .parallel().export_to_csv_files() and .parallel().export_to_json_files or combine them all into one file or data structure in the case of .parallel().to_list() , .parallel().to_dataframe() , .parallel().export_to_json() . It's important to know that in order to send more requests per second to the CoinMetrics this uses the parallel tasks features in Python's concurrent.futures package. This means when using this feature, the API Client will use significantly more resources and may approach the Coin Metrics rate limits . In terms of resource usage and speed, these usages are in order from most performant to least: * .export_to_json_files() * .export_to_csv_files() * .to_list() * .export_to_json() * .to_dataframe() Splitting single parameter queries into many requests for increased performance \u00b6 There is a feature time_increment that can be used to split a single query into many based on time range, and then combine them later. Consider this example where we speed up getting a 2 months worth of BTC ReferenceRateUSD data into many parallel threads to create a dataframe faster: import datetime import os from coinmetrics.api_client import CoinMetricsClient from dateutil.relativedelta import relativedelta client = CoinMetricsClient ( os . environ . get ( \"CM_API_KEY\" )) start_time = datetime . datetime . now () assets = [ \"btc\" , \"eth\" , \"algo\" ] if __name__ == '__main__' : client . get_asset_metrics ( assets = assets , metrics = \"ReferenceRateUSD\" , frequency = \"1m\" , start_time = \"2022-03-01\" , end_time = \"2023-03-01\" , page_size = 1000 , end_inclusive = False ) . parallel ( time_increment = relativedelta ( months = 1 )) . export_to_csv ( \"btcRRs.csv\" ) print ( f \"Time taken parallel: { datetime . datetime . now () - start_time } \" ) start_time = datetime . datetime . now () client . get_asset_metrics ( assets = assets , metrics = \"ReferenceRateUSD\" , frequency = \"1m\" , start_time = \"2022-03-01\" , end_time = \"2023-03-01\" , page_size = 1000 , end_inclusive = False ) . export_to_csv ( \"btcRRsNormal.csv\" ) Notice we pass in the time_increment=relativedelta(months=1) so that means we will split the threads up by month, in addition to by asset. So this will run a total 36 separate threads, 12 threads for each month x 3 threads for each asset. The difference it takes in time is dramatic: Exporting to dataframe type: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 36/36 [00:00<00:00, 54.62it/s] Time taken parallel: 0:00:36.654147 Time taken normal: 0:05:20.073826 Please note that for short time periods you can pass in a time_increment with datetime.timedelta to specify up to several weeks, for larger time frames you can use dateutil.relativedelta.relativedelta in order to split requests up by increments of months or years. To keep in mind when using using parallel feature or generally writing high performance code using API Client: \u00b6 If you are using a small page_size and trying to export a large number amount of, this will be your biggest bottleneck. Generally the fastest page_size is 1000 to 10000 If you are unsure why an action is taking a long time, running the CoinMetricsClient using verbose=True or debug=True can give better insight into what is happening under the hood The parallel feature is best used when you are exporting a large amount of data, that can be split by query params into many smaller requests. A good example of this is market candles over a long time frame - if you are querying hundreds of markets and are sure there will be data, using .parallel().export_to_csv_files(\"...\") can have a huge performance increase, if you are just querying a single market you will not see a difference The parallel feature is highly configurable, there is several configuration options that may be suitable for advanced users like tweaking the max_workers parameter, or changing the default ProcessPoolExecutor to a ThreadPoolExectuor Using multithreaded code is inherently more complex, it will be harder to debug issues with long running queries when running parallel exports compared to normal single threaded code For that reason, this tool is best suited for exporting historical data rather than supporting a real time production system The methods that create separate files for each thread will be the safest and most performant to use - .export_to_csv_files() and .export_to_json_files() . Using the methods that return a single output - .export_to_csv() , export_to_list() , and .export_to_dataframe() need to join the data from many threads before it can be returned, this may use a lot of memory if you are accessing data types like market orderbooks or market trades and could fail altogether If using export_to_csv/json_files() functions, note that by default they will be saved in the directory format /{endpoint}/{parallelize_on} . For example, in export_to_json_files() , client.get_market_trades(\"coinbase-eth-btc-spot,coinbase-eth-usdc-spot\").parallel(\"markets\") will create a file each like ./market-trades/coinbase-eth-btc-spot.json, ./market-trades/coinbase-eth-usdc-spot.json client.get_asset_metrics('btc,eth', 'ReferenceRateUSD', start_time='2024-01-01', limit_per_asset=1).parallel(\"assets,metrics\", time_increment=timedelta(days=1)) will create a file each like ./asset-metrics/btc/ReferenceRateUSD/start_time=2024-01-01T00-00-00Z.json, ./asset-metrics/eth/ReferenceRateUSD/start_time=2024-01-01T00-00-00Z.json If you get the error BrokenProcessPool it might be because you're missing a main() function Examples \u00b6 The API Client allows you to chain together workflows for importing, transforming, then exporting Coin Metrics data. Below are examples of common use-cases that can be altered to tailor your specific needs. In addition to the examples listed below, there's examples covering all the API methods, found in the examples directory . Example Notebooks walkthrough_community.ipynb : Walks through the basic functionality available using the community client. Asset Metrics bbb_metrics_csv_exporter_using_plain_requests.py : Queries block-by-block metrics using the requests library and exports the output into a CSV file. bbb_metrics_json_exporter.py : Queries block-by-block metrics and exports the output into a JSON file. eod_metrics_csv_exporter.py : Exports a set of user-defined metrics and assets published at end-of-day and exports the output into a CSV file. reference_rates_json_exporter.py : Queries Coin Metrics Reference Rates at a user-defined frequency for a set of assets, then exports the output into a JSON file. Market Data books_json_exporter.py : Queries market orderbook data then exports the output into a JSON file. candles_json_exporter.py : Queries market candles data then exports the output into a JSON file. funding_rates_json_exporter.py : Queries market funding rates data then exports the output into a JSON file. trades_csv_exporter.py : Queries market trades data then exports the output into a CSV file. trades_json_exporter.py : Queries market trades data then exports the output into a JSON file. ** Parallel processing exports * candles_csv_export.py : Exports market candles in parallel to many separate csv files * candles_json_export.py : Exports market candles in parallel to many separate json files * market_trades_list.py : Creates a list of market trades, using .parallel() feature to improve performance * market_orderbooks.py : Exports market orderbooks to many csv files * candles_csv_export_manual.py : Example of parallelism using the API Client without using the .parallel() feature * btc_1m_metrics_export.py : Example of splitting a large request for asset metrics by metric to improve performance, exporting a single csv and also separate csv. * market_orderbooks_csv_exporter_by_day.py : Example of splitting a market orderbook export up by day, to increase export performance Getting timeseries data \u00b6 For getting timeseries data you want to use methods of the client class that start with get_ . It's important to note that the timeseries endpoints return data of a parent class type DataCollection . The DataCollection class is meant to support a variety of different data export and data manipulation use cases, so just calling one of the client methods such as data = client.get_market_trades(markets=\"coinbase-btc-usd-spot\") will not actually retrieve the data related to this API call. You must then call a function on this DataCollection such as data.export_to_csv(\"coinbase_btc_usd_spot_trades.csv) or data.to_dataframe() in order to access the data. There is more explicit examples below.If you are curious to see how the API calls are being made and with what parameters, instantiating the client with the verbose argument like CoinMetricsClient(api_key=<YOUR_API_KEY>, verbose=True) will print the API calls as well as information on performance to console. For example if you want to get a bunch of market data trades for coinbase btc-usd pair you can run something similar to the following: for trade in client.get_market_trades( markets='coinbase-btc-usd-spot', start_time='2020-01-01', end_time='2020-01-03', limit_per_market=10 ): print(trade) This example uses the DataCollection as a Python iterator, so with each iteration of the Python for loop it will call the Coin Metrics API and return data. The default page_size for calls to the API is 100, so each call will return 100 trades until it reaches the end of the query. To get more trades in each API call, you can add the parameter page_size to the .get_market_trades() method call, up to a maximum of 10000. Or if you want to see daily btc asset metrics you can use something like this: for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD', 'BlkHgt', 'AdrActCnt', 'AdrActRecCnt', 'FlowOutBFXUSD'], frequency='1d', limit_per_asset=10): print(metric_data) This will print you the requested metrics for all the days where we have any of the metrics present. DataFrames \u00b6 (New in >= 2021.9.30.14.30 ) Timeseries data can be transformed into a pandas dataframe by using the to_dataframe() method. The code snippet below shows how: import pandas as pd from coinmetrics.api_client import CoinMetricsClient from os import environ client = CoinMetricsClient() trades = client.get_market_trades( markets='coinbase-btc-usd-spot', start_time='2021-09-19T00:00:00Z', limit_per_market=10 ) trades_df = trades.to_dataframe() print(trades_df.head()) If you want to use dataframes, then you will need to install pandas Notes This only works with requests that return the type DataCollection . Thus, catalog requests, which return lists cannot be returned as dataframes. Please see the API Client Spec for a full list of requests and their return types. API restrictions apply. Some requests may return empty results due to limited access to the API from you API key. Type Conversion \u00b6 (New in >= 2021.12.17.18.00 ) As of version 2021.12.17.18.00 or later, outputs from the to_dataframe function automatically convert the dtypes for a dataframe to the optimal pandas types. metrics_list = [ 'volume_trusted_spot_usd_1d' , 'SplyFF' , 'AdrBalUSD1Cnt' ] asset_list = [ 'btc' , 'xmr' ] start_time = '2021-12-01' df_metrics = client . get_asset_metrics ( assets = asset_list , metrics = metrics_list , start_time = start_time , limit_per_asset = 3 ) . to_dataframe () print ( df_metrics . dtypes ) asset string time datetime64[ns, tzutc()] AdrBalUSD1Cnt Int64 SplyFF Float64 volume_trusted_spot_usd_1d Float64 dtype: object This can be turned off by setting optimize_pandas_types=False Alternatively, you can manually enter your own type conversion by passing in a dictionary for dtype_mapper . This can be done in conjunction with pandas' built in type optimizations. mapper = { 'SplyFF' : 'Float64' , 'AdrBalUSD1Cnt' : 'Int64' , } df_mapped = client . get_asset_metrics ( assets = asset_list , metrics = metrics_list , start_time = start_time , limit_per_asset = 3 ) . to_dataframe ( dtype_mapper = mapper , optimize_pandas_types = True ) print ( df_mapped . dtypes ) asset object time datetime64[ns, tzutc()] AdrBalUSD1Cnt Int64 SplyFF Float64 volume_trusted_spot_usd_1d float64 dtype: object Or as strictly the only types in the dataframe dtype_mapper = { 'ReferenceRateUSD' : np . float64 , 'time' : np . datetime64 } df = client . get_asset_metrics ( assets = 'btc' , metrics = 'ReferenceRateUSD' , start_time = '2022-06-15' , limit_per_asset = 1 ) . to_dataframe ( dtype_mapper = dtype_mapper , optimize_pandas_types = False ) df . info () RangeIndex: 1 entries, 0 to 0 Data columns (total 3 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 asset 1 non-null object 1 time 1 non-null datetime64[ns] 2 ReferenceRateUSD 1 non-null float64 dtypes: datetime64[ns](1), float64(1), object(1) memory usage: 152.0+ bytes Note that in order to pass a custom datetime object, setting a dtype_mapper is mandatory. Pandas type conversion tends to be more performant. But if there are custom operations that must be done using numpy datatypes, this option will let you perform them. Exporting to csv and json files: \u00b6 You can also easily export timeseries data to csv and json files with builtin functions on the DataCollection type. For example this script will export Coinbase btc and eth trades for a date to csv and json files respectively: start_date = datetime . date ( year = 2022 , month = 1 , day = 1 ) end_date = datetime . datetime ( year = 2022 , month = 1 , day = 1 ) market_trades_btc = client . get_market_trades ( page_size = 1000 , markets = \"coinbase-btc-usd-spot\" , start_time = start_date , end_time = end_date ) market_trades_btc . export_to_csv ( \"jan_1_2022_coinbase_btc_trades.csv\" ) market_trades_eth = client . get_market_trades ( page_size = 1000 , markets = \"coinbase-eth-usd-spot\" , start_time = start_date , end_time = end_date ) market_trades_eth . export_to_json ( \"jan_1_2022_coinbase_eth.json\" ) Paging \u00b6 You can make the datapoints to iterate from start (default) or from end. for that you should use a paging_from argument like the following: from coinmetrics.api_client import CoinMetricsClient from coinmetrics.constants import PagingFrom client = CoinMetricsClient() for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD'], paging_from=PagingFrom.START): print(metric_data) PagingFrom.END: is available but by default it will page from the start. Debugging the API Client \u00b6 There are two additional options for the API Client - debug_mode and verbose . These two options log network calls to the console, and in the case of debug_mode it will generate a log file of all the network requests and the time it takes to call them. These tools can be used to diagnose issues in your code and also to get a better understanding of request times so that users can write more performant code. For example, running the below code: import os from coinmetrics.api_client import CoinMetricsClient api_key = os . environ [ 'CM_API_KEY' ] if __name__ == '__main__' : client = CoinMetricsClient ( api_key = api_key , debug_mode = True ) reference_rates_example = client . get_asset_metrics ( assets = [ 'btc' , 'algo' , 'eth' ], metrics = [ 'ReferenceRateUSD' ]) for data in reference_rates_example : continue The console output will look like: [DEBUG] 2023-01-09 11:01:02,044 - Starting API Client debugging session. logging to stdout and cm_api_client_debug_2023_01_09_11_01_02.txt [DEBUG] 2023-01-09 11:01:02,044 - Using coinmetrics version 2022.11.14.16 [DEBUG] 2023-01-09 11:01:02,044 - Current state of API Client, excluding API KEY: {'_verify_ssl_certs': True, '_api_base_url': 'https://api.coinmetrics.io/v4', '_ws_api_base_url': 'wss://api.coinmetrics.io/v4', '_http_header': {'Api-Client-Version': '2022.11.14.16'}, '_proxies': {'http': None, 'https': None}, 'debug_mode': True, 'verbose': False} [DEBUG] 2023-01-09 11:01:02,044 - Attempting to call url: timeseries/asset-metrics with params: {'assets': ['btc', 'algo', 'eth'], 'metrics': ['ReferenceRateUSD'], 'frequency': None, 'page_size': None, 'paging_from': 'start', 'start_time': None, 'end_time': None, 'start_height': None, 'end_height': None, 'start_inclusive': None, 'end_inclusive': None, 'timezone': None, 'sort': None, 'limit_per_asset': None} [DEBUG] 2023-01-09 11:01:02,387 - Response status code: 200 for url: https://api.coinmetrics.io/v4/timeseries/asset-metrics?api_key=[REDACTED]&assets=btc%2Calgo%2Ceth&metrics=ReferenceRateUSD&paging_from=start took: 0:00:00.342874 response body size (bytes): 9832 [DEBUG] 2023-01-09 11:01:02,388 - Attempting to call url: timeseries/asset-metrics with params: {'assets': ['btc', 'algo', 'eth'], 'metrics': ['ReferenceRateUSD'], 'frequency': None, 'page_size': None, 'paging_from': 'start', 'start_time': None, 'end_time': None, 'start_height': None, 'end_height': None, 'start_inclusive': None, 'end_inclusive': None, 'timezone': None, 'sort': None, 'limit_per_asset': None, 'next_page_token': '0.MjAxOS0wOS0zMFQwMDowMDowMFo'} [DEBUG] 2023-01-09 11:01:02,559 - Response status code: 200 for url: https://api.coinmetrics.io/v4/timeseries/asset-metrics?api_key=[REDACTED]&assets=btc%2Calgo%2Ceth&metrics=ReferenceRateUSD&paging_from=start&next_page_token=0.MjAxOS0wOS0zMFQwMDowMDowMFo took: 0:00:00.171487 response body size (bytes): 9857 Then it can be easier to understand what network calls the API Client is making, and where any issues may exist. If you wish to dig even deeper, you may consider modifying the _send_request() method of the API Client to log additional data about the state of your environment, or anything else that would help diagnose issues. You will notice a log file generated in the format cm_api_client_debug_2023_01_09_11_01_02.txt . This log file might be helpful for your own use or to give more context if you are working with Coin Metrics customer success. SSL Certs verification \u00b6 Sometimes your organization network have special rules on SSL certs verification and in this case you might face the following error when running the script: SSLError: HTTPSConnectionPool(host='api.coinmetrics.io', port=443): Max retries exceeded with url: <some_url_path> (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1123)'))) In this case, you can pass an option during client initialization to disable ssl verification for requests like this: client = CoinMetricsClient ( verify_ssl_certs = False ) We don't recommend setting it to False by default and you should make sure you understand the security risks of disabling SSL certs verification. Additionally, you may choose to specify the path to the SSL certificates on your machine. This may cause errors where Python is unable to locate the certificates on your machine, particularly when using Python virtual environments. from coinmetrics.api_client import CoinMetricsClient SSL_CERT_LOCATION = '/Users/<USER_NAME>/Library/Python/3.8/lib/python/site-packages/certifi/cacert.pem' client = CoinMetricsClient ( verify_ssl_certs = SSL_CERT_LOCATION ) A quick way to find the certs on your machine is: python3 -c \"import requests; print(requests.certs.where())\" And note that this will change based on whether or not you are using a Python virtual environment or not Installing and running coinmetrics package and other python packages behind a secure python network \u00b6 Related to SSL Certs verification, you may have trouble installing and updating PyPi packages to your local environment. So you may need to choose the best solution for your company and environment - either using package managers or installing offline. Installing using package managers \u00b6 Full instructions for setting up your environment to use conda, pip, yarn, npm, etc. can be found here . Additionally, a workaround to disable SSL verification when installing a trusted Python package is this: pip install --trusted-host pypi.python.org <packagename> Although it is important to make sure you understand the risks associated with disabling SSL verification and ensure compliance with company policies. Installing Python packages locally/ offline \u00b6 It may be easier to download and install the package locally. Steps: 1. Download the files for the Coin Metrics API Client from PyPi 2. Install it locally Requests Proxy \u00b6 Sometimes your organization has special rules on making requests to third parties and you have to use proxies in order to comply with the rules. For proxies that don't require auth you can specify them similar to this example: client = CoinMetricsClient ( proxy_url = f 'http://<hostname>:<port>' ) For proxies that require auth, you should be able to specify username and password similar to this example: client = CoinMetricsClient ( proxy_url = f 'http://<username>:<password>@<hostname>:<port>' ) Extended documentation \u00b6 For more information about the available methods in the client please reference API Client Spec","title":"Home"},{"location":"index.html#coin-metrics-python-api-v4-client-library","text":"This is an official Python API client for Coin Metrics API v4.","title":"Coin Metrics Python API v4 client library"},{"location":"index.html#installation-and-updates","text":"To install the client you can run the following command: pip install coinmetrics-api-client Note that the client is updated regularly to reflect the changes made in API v4 . Ensure that your latest version matches with what's in pyPI To update your version, run the following command: pip install coinmetrics-api-client -U","title":"Installation and Updates"},{"location":"index.html#introduction","text":"You can use this client for querying all kinds of data with your API. To initialize the client you should use your API key, and the CoinMetricsClient class like the following. from coinmetrics.api_client import CoinMetricsClient client = CoinMetricsClient(\"<cm_api_key>\") # or to use community API: client = CoinMetricsClient() After that you can use the client object for getting information such as available market trades as a list of dictionaries: print(client.catalog_market_trades_v2().to_list()) or to iterate over each page of data: for data in client . catalog_market_trades_v2 (): print ( data ) you can also use filters for the catalog endpoints like this: print(client.catalog_market_trades_v2(exchange=\"binance\").to_list()) All the catalog V2 endpoints meant to help access the historical data served by other endpoints. For example, you can get all the BTC market trades for a certain day from binance like this: import os from coinmetrics.api_client import CoinMetricsClient client = CoinMetricsClient ( os . environ [ 'CM_API_KEY' ]) btc_binance_markets = [ market [ 'market' ] for market in client . catalog_market_trades_v2 ( exchange = \"binance\" , asset = \"btc\" ) . to_list ()] start_time = \"2023-01-01\" end_time = \"2023-01-02\" binance_market_trades = client . get_market_trades ( markets = btc_binance_markets , start_time = start_time , end_time = end_time , page_size = 1000 ) . export_to_csv ( \"binance_trades.csv\" ) in this case you would get all the information markets that trade on binance only. You can use this client to connect to our API v4 and get catalog or timeseries data from python environment. It natively supports paging over the data so you can use it to iterate over timeseries entries seamlessly. The client can be used to query both pro and community data. The full list of methods can be found in the API Client Spec . If you'd like a more holistic view of what is offered from an API endpoint you can use the to_dataframe() function associated with our catalog endpoints. The code snippet below shows getting a dataframe of information on all the assets that data is provided for: print ( client . catalog_market_metrics_v2 ( exchange = \"binance\" , page_size = 1000 ) . to_dataframe ()) Output: market metrics 0 binance-1000BTTCUSDT-future [{'metric': 'liquidity_depth_0_1_percent_ask_v... 1 binance-1000FLOKIUSDT-future [{'metric': 'liquidations_reported_future_buy_... 2 binance-1000LUNCBUSD-future [{'metric': 'liquidations_reported_future_buy_... 3 binance-1000LUNCUSDT-future [{'metric': 'liquidations_reported_future_buy_... 4 binance-1000PEPEUSDT-future [{'metric': 'liquidations_reported_future_buy_... Now you can use the pandas Dataframe functionality to do useful transformations, such as filtering out the assets without metrics available, then saving that data to a csv file: import pandas as pd import os from coinmetrics.api_client import CoinMetricsClient from datetime import timedelta client = CoinMetricsClient ( os . environ [ 'CM_API_KEY' ]) binance_markets = client . catalog_market_trades_v2 ( exchange = \"binance\" , page_size = 1000 ) . to_dataframe () binance_markets [ 'max_time' ] = pd . to_datetime ( binance_markets [ 'max_time' ], utc = True ) current_utc_time = pd . Timestamp . now ( tz = 'UTC' ) one_day_ago = current_utc_time - timedelta ( days = 1 ) filtered_binance_markets = binance_markets [ binance_markets [ 'max_time' ] > one_day_ago ]","title":"Introduction"},{"location":"index.html#parallel-execution-for-faster-data-export","text":"There are times when it may be useful to pull in large amounts of data at once. The most effective way to do this when calling the CoinMetrics API is to split your request into many different queries. This functionality is now built into the API Client directly to allow for faster data export: import os from coinmetrics.api_client import CoinMetricsClient if __name__ == '__main__' : client = CoinMetricsClient ( os . environ [ 'CM_API_KEY' ]) binance_eth_markets = [ market [ 'market' ] for market in client . catalog_market_candles ( exchange = \"binance\" , base = \"eth\" )] start_time = \"2022-03-01\" end_time = \"2023-05-01\" client . get_market_candles ( markets = binance_eth_markets , start_time = start_time , end_time = end_time , page_size = 1000 ) . parallel () . export_to_json_files () What this feature does is rather request all the data in one thread, it will split into many threads or processes and either store them in separate files in the case of .parallel().export_to_csv_files() and .parallel().export_to_json_files or combine them all into one file or data structure in the case of .parallel().to_list() , .parallel().to_dataframe() , .parallel().export_to_json() . It's important to know that in order to send more requests per second to the CoinMetrics this uses the parallel tasks features in Python's concurrent.futures package. This means when using this feature, the API Client will use significantly more resources and may approach the Coin Metrics rate limits . In terms of resource usage and speed, these usages are in order from most performant to least: * .export_to_json_files() * .export_to_csv_files() * .to_list() * .export_to_json() * .to_dataframe()","title":"Parallel execution for faster data export"},{"location":"index.html#splitting-single-parameter-queries-into-many-requests-for-increased-performance","text":"There is a feature time_increment that can be used to split a single query into many based on time range, and then combine them later. Consider this example where we speed up getting a 2 months worth of BTC ReferenceRateUSD data into many parallel threads to create a dataframe faster: import datetime import os from coinmetrics.api_client import CoinMetricsClient from dateutil.relativedelta import relativedelta client = CoinMetricsClient ( os . environ . get ( \"CM_API_KEY\" )) start_time = datetime . datetime . now () assets = [ \"btc\" , \"eth\" , \"algo\" ] if __name__ == '__main__' : client . get_asset_metrics ( assets = assets , metrics = \"ReferenceRateUSD\" , frequency = \"1m\" , start_time = \"2022-03-01\" , end_time = \"2023-03-01\" , page_size = 1000 , end_inclusive = False ) . parallel ( time_increment = relativedelta ( months = 1 )) . export_to_csv ( \"btcRRs.csv\" ) print ( f \"Time taken parallel: { datetime . datetime . now () - start_time } \" ) start_time = datetime . datetime . now () client . get_asset_metrics ( assets = assets , metrics = \"ReferenceRateUSD\" , frequency = \"1m\" , start_time = \"2022-03-01\" , end_time = \"2023-03-01\" , page_size = 1000 , end_inclusive = False ) . export_to_csv ( \"btcRRsNormal.csv\" ) Notice we pass in the time_increment=relativedelta(months=1) so that means we will split the threads up by month, in addition to by asset. So this will run a total 36 separate threads, 12 threads for each month x 3 threads for each asset. The difference it takes in time is dramatic: Exporting to dataframe type: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 36/36 [00:00<00:00, 54.62it/s] Time taken parallel: 0:00:36.654147 Time taken normal: 0:05:20.073826 Please note that for short time periods you can pass in a time_increment with datetime.timedelta to specify up to several weeks, for larger time frames you can use dateutil.relativedelta.relativedelta in order to split requests up by increments of months or years.","title":"Splitting single parameter queries into many requests for increased performance"},{"location":"index.html#to-keep-in-mind-when-using-using-parallel-feature-or-generally-writing-high-performance-code-using-api-client","text":"If you are using a small page_size and trying to export a large number amount of, this will be your biggest bottleneck. Generally the fastest page_size is 1000 to 10000 If you are unsure why an action is taking a long time, running the CoinMetricsClient using verbose=True or debug=True can give better insight into what is happening under the hood The parallel feature is best used when you are exporting a large amount of data, that can be split by query params into many smaller requests. A good example of this is market candles over a long time frame - if you are querying hundreds of markets and are sure there will be data, using .parallel().export_to_csv_files(\"...\") can have a huge performance increase, if you are just querying a single market you will not see a difference The parallel feature is highly configurable, there is several configuration options that may be suitable for advanced users like tweaking the max_workers parameter, or changing the default ProcessPoolExecutor to a ThreadPoolExectuor Using multithreaded code is inherently more complex, it will be harder to debug issues with long running queries when running parallel exports compared to normal single threaded code For that reason, this tool is best suited for exporting historical data rather than supporting a real time production system The methods that create separate files for each thread will be the safest and most performant to use - .export_to_csv_files() and .export_to_json_files() . Using the methods that return a single output - .export_to_csv() , export_to_list() , and .export_to_dataframe() need to join the data from many threads before it can be returned, this may use a lot of memory if you are accessing data types like market orderbooks or market trades and could fail altogether If using export_to_csv/json_files() functions, note that by default they will be saved in the directory format /{endpoint}/{parallelize_on} . For example, in export_to_json_files() , client.get_market_trades(\"coinbase-eth-btc-spot,coinbase-eth-usdc-spot\").parallel(\"markets\") will create a file each like ./market-trades/coinbase-eth-btc-spot.json, ./market-trades/coinbase-eth-usdc-spot.json client.get_asset_metrics('btc,eth', 'ReferenceRateUSD', start_time='2024-01-01', limit_per_asset=1).parallel(\"assets,metrics\", time_increment=timedelta(days=1)) will create a file each like ./asset-metrics/btc/ReferenceRateUSD/start_time=2024-01-01T00-00-00Z.json, ./asset-metrics/eth/ReferenceRateUSD/start_time=2024-01-01T00-00-00Z.json If you get the error BrokenProcessPool it might be because you're missing a main() function","title":"To keep in mind when using using parallel feature or generally writing high performance code using API Client:"},{"location":"index.html#examples","text":"The API Client allows you to chain together workflows for importing, transforming, then exporting Coin Metrics data. Below are examples of common use-cases that can be altered to tailor your specific needs. In addition to the examples listed below, there's examples covering all the API methods, found in the examples directory . Example Notebooks walkthrough_community.ipynb : Walks through the basic functionality available using the community client. Asset Metrics bbb_metrics_csv_exporter_using_plain_requests.py : Queries block-by-block metrics using the requests library and exports the output into a CSV file. bbb_metrics_json_exporter.py : Queries block-by-block metrics and exports the output into a JSON file. eod_metrics_csv_exporter.py : Exports a set of user-defined metrics and assets published at end-of-day and exports the output into a CSV file. reference_rates_json_exporter.py : Queries Coin Metrics Reference Rates at a user-defined frequency for a set of assets, then exports the output into a JSON file. Market Data books_json_exporter.py : Queries market orderbook data then exports the output into a JSON file. candles_json_exporter.py : Queries market candles data then exports the output into a JSON file. funding_rates_json_exporter.py : Queries market funding rates data then exports the output into a JSON file. trades_csv_exporter.py : Queries market trades data then exports the output into a CSV file. trades_json_exporter.py : Queries market trades data then exports the output into a JSON file. ** Parallel processing exports * candles_csv_export.py : Exports market candles in parallel to many separate csv files * candles_json_export.py : Exports market candles in parallel to many separate json files * market_trades_list.py : Creates a list of market trades, using .parallel() feature to improve performance * market_orderbooks.py : Exports market orderbooks to many csv files * candles_csv_export_manual.py : Example of parallelism using the API Client without using the .parallel() feature * btc_1m_metrics_export.py : Example of splitting a large request for asset metrics by metric to improve performance, exporting a single csv and also separate csv. * market_orderbooks_csv_exporter_by_day.py : Example of splitting a market orderbook export up by day, to increase export performance","title":"Examples"},{"location":"index.html#getting-timeseries-data","text":"For getting timeseries data you want to use methods of the client class that start with get_ . It's important to note that the timeseries endpoints return data of a parent class type DataCollection . The DataCollection class is meant to support a variety of different data export and data manipulation use cases, so just calling one of the client methods such as data = client.get_market_trades(markets=\"coinbase-btc-usd-spot\") will not actually retrieve the data related to this API call. You must then call a function on this DataCollection such as data.export_to_csv(\"coinbase_btc_usd_spot_trades.csv) or data.to_dataframe() in order to access the data. There is more explicit examples below.If you are curious to see how the API calls are being made and with what parameters, instantiating the client with the verbose argument like CoinMetricsClient(api_key=<YOUR_API_KEY>, verbose=True) will print the API calls as well as information on performance to console. For example if you want to get a bunch of market data trades for coinbase btc-usd pair you can run something similar to the following: for trade in client.get_market_trades( markets='coinbase-btc-usd-spot', start_time='2020-01-01', end_time='2020-01-03', limit_per_market=10 ): print(trade) This example uses the DataCollection as a Python iterator, so with each iteration of the Python for loop it will call the Coin Metrics API and return data. The default page_size for calls to the API is 100, so each call will return 100 trades until it reaches the end of the query. To get more trades in each API call, you can add the parameter page_size to the .get_market_trades() method call, up to a maximum of 10000. Or if you want to see daily btc asset metrics you can use something like this: for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD', 'BlkHgt', 'AdrActCnt', 'AdrActRecCnt', 'FlowOutBFXUSD'], frequency='1d', limit_per_asset=10): print(metric_data) This will print you the requested metrics for all the days where we have any of the metrics present.","title":"Getting timeseries data"},{"location":"index.html#dataframes","text":"(New in >= 2021.9.30.14.30 ) Timeseries data can be transformed into a pandas dataframe by using the to_dataframe() method. The code snippet below shows how: import pandas as pd from coinmetrics.api_client import CoinMetricsClient from os import environ client = CoinMetricsClient() trades = client.get_market_trades( markets='coinbase-btc-usd-spot', start_time='2021-09-19T00:00:00Z', limit_per_market=10 ) trades_df = trades.to_dataframe() print(trades_df.head()) If you want to use dataframes, then you will need to install pandas Notes This only works with requests that return the type DataCollection . Thus, catalog requests, which return lists cannot be returned as dataframes. Please see the API Client Spec for a full list of requests and their return types. API restrictions apply. Some requests may return empty results due to limited access to the API from you API key.","title":"DataFrames"},{"location":"index.html#type-conversion","text":"(New in >= 2021.12.17.18.00 ) As of version 2021.12.17.18.00 or later, outputs from the to_dataframe function automatically convert the dtypes for a dataframe to the optimal pandas types. metrics_list = [ 'volume_trusted_spot_usd_1d' , 'SplyFF' , 'AdrBalUSD1Cnt' ] asset_list = [ 'btc' , 'xmr' ] start_time = '2021-12-01' df_metrics = client . get_asset_metrics ( assets = asset_list , metrics = metrics_list , start_time = start_time , limit_per_asset = 3 ) . to_dataframe () print ( df_metrics . dtypes ) asset string time datetime64[ns, tzutc()] AdrBalUSD1Cnt Int64 SplyFF Float64 volume_trusted_spot_usd_1d Float64 dtype: object This can be turned off by setting optimize_pandas_types=False Alternatively, you can manually enter your own type conversion by passing in a dictionary for dtype_mapper . This can be done in conjunction with pandas' built in type optimizations. mapper = { 'SplyFF' : 'Float64' , 'AdrBalUSD1Cnt' : 'Int64' , } df_mapped = client . get_asset_metrics ( assets = asset_list , metrics = metrics_list , start_time = start_time , limit_per_asset = 3 ) . to_dataframe ( dtype_mapper = mapper , optimize_pandas_types = True ) print ( df_mapped . dtypes ) asset object time datetime64[ns, tzutc()] AdrBalUSD1Cnt Int64 SplyFF Float64 volume_trusted_spot_usd_1d float64 dtype: object Or as strictly the only types in the dataframe dtype_mapper = { 'ReferenceRateUSD' : np . float64 , 'time' : np . datetime64 } df = client . get_asset_metrics ( assets = 'btc' , metrics = 'ReferenceRateUSD' , start_time = '2022-06-15' , limit_per_asset = 1 ) . to_dataframe ( dtype_mapper = dtype_mapper , optimize_pandas_types = False ) df . info () RangeIndex: 1 entries, 0 to 0 Data columns (total 3 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 asset 1 non-null object 1 time 1 non-null datetime64[ns] 2 ReferenceRateUSD 1 non-null float64 dtypes: datetime64[ns](1), float64(1), object(1) memory usage: 152.0+ bytes Note that in order to pass a custom datetime object, setting a dtype_mapper is mandatory. Pandas type conversion tends to be more performant. But if there are custom operations that must be done using numpy datatypes, this option will let you perform them.","title":"Type Conversion"},{"location":"index.html#exporting-to-csv-and-json-files","text":"You can also easily export timeseries data to csv and json files with builtin functions on the DataCollection type. For example this script will export Coinbase btc and eth trades for a date to csv and json files respectively: start_date = datetime . date ( year = 2022 , month = 1 , day = 1 ) end_date = datetime . datetime ( year = 2022 , month = 1 , day = 1 ) market_trades_btc = client . get_market_trades ( page_size = 1000 , markets = \"coinbase-btc-usd-spot\" , start_time = start_date , end_time = end_date ) market_trades_btc . export_to_csv ( \"jan_1_2022_coinbase_btc_trades.csv\" ) market_trades_eth = client . get_market_trades ( page_size = 1000 , markets = \"coinbase-eth-usd-spot\" , start_time = start_date , end_time = end_date ) market_trades_eth . export_to_json ( \"jan_1_2022_coinbase_eth.json\" )","title":"Exporting to csv and json files:"},{"location":"index.html#paging","text":"You can make the datapoints to iterate from start (default) or from end. for that you should use a paging_from argument like the following: from coinmetrics.api_client import CoinMetricsClient from coinmetrics.constants import PagingFrom client = CoinMetricsClient() for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD'], paging_from=PagingFrom.START): print(metric_data) PagingFrom.END: is available but by default it will page from the start.","title":"Paging"},{"location":"index.html#debugging-the-api-client","text":"There are two additional options for the API Client - debug_mode and verbose . These two options log network calls to the console, and in the case of debug_mode it will generate a log file of all the network requests and the time it takes to call them. These tools can be used to diagnose issues in your code and also to get a better understanding of request times so that users can write more performant code. For example, running the below code: import os from coinmetrics.api_client import CoinMetricsClient api_key = os . environ [ 'CM_API_KEY' ] if __name__ == '__main__' : client = CoinMetricsClient ( api_key = api_key , debug_mode = True ) reference_rates_example = client . get_asset_metrics ( assets = [ 'btc' , 'algo' , 'eth' ], metrics = [ 'ReferenceRateUSD' ]) for data in reference_rates_example : continue The console output will look like: [DEBUG] 2023-01-09 11:01:02,044 - Starting API Client debugging session. logging to stdout and cm_api_client_debug_2023_01_09_11_01_02.txt [DEBUG] 2023-01-09 11:01:02,044 - Using coinmetrics version 2022.11.14.16 [DEBUG] 2023-01-09 11:01:02,044 - Current state of API Client, excluding API KEY: {'_verify_ssl_certs': True, '_api_base_url': 'https://api.coinmetrics.io/v4', '_ws_api_base_url': 'wss://api.coinmetrics.io/v4', '_http_header': {'Api-Client-Version': '2022.11.14.16'}, '_proxies': {'http': None, 'https': None}, 'debug_mode': True, 'verbose': False} [DEBUG] 2023-01-09 11:01:02,044 - Attempting to call url: timeseries/asset-metrics with params: {'assets': ['btc', 'algo', 'eth'], 'metrics': ['ReferenceRateUSD'], 'frequency': None, 'page_size': None, 'paging_from': 'start', 'start_time': None, 'end_time': None, 'start_height': None, 'end_height': None, 'start_inclusive': None, 'end_inclusive': None, 'timezone': None, 'sort': None, 'limit_per_asset': None} [DEBUG] 2023-01-09 11:01:02,387 - Response status code: 200 for url: https://api.coinmetrics.io/v4/timeseries/asset-metrics?api_key=[REDACTED]&assets=btc%2Calgo%2Ceth&metrics=ReferenceRateUSD&paging_from=start took: 0:00:00.342874 response body size (bytes): 9832 [DEBUG] 2023-01-09 11:01:02,388 - Attempting to call url: timeseries/asset-metrics with params: {'assets': ['btc', 'algo', 'eth'], 'metrics': ['ReferenceRateUSD'], 'frequency': None, 'page_size': None, 'paging_from': 'start', 'start_time': None, 'end_time': None, 'start_height': None, 'end_height': None, 'start_inclusive': None, 'end_inclusive': None, 'timezone': None, 'sort': None, 'limit_per_asset': None, 'next_page_token': '0.MjAxOS0wOS0zMFQwMDowMDowMFo'} [DEBUG] 2023-01-09 11:01:02,559 - Response status code: 200 for url: https://api.coinmetrics.io/v4/timeseries/asset-metrics?api_key=[REDACTED]&assets=btc%2Calgo%2Ceth&metrics=ReferenceRateUSD&paging_from=start&next_page_token=0.MjAxOS0wOS0zMFQwMDowMDowMFo took: 0:00:00.171487 response body size (bytes): 9857 Then it can be easier to understand what network calls the API Client is making, and where any issues may exist. If you wish to dig even deeper, you may consider modifying the _send_request() method of the API Client to log additional data about the state of your environment, or anything else that would help diagnose issues. You will notice a log file generated in the format cm_api_client_debug_2023_01_09_11_01_02.txt . This log file might be helpful for your own use or to give more context if you are working with Coin Metrics customer success.","title":"Debugging the API Client"},{"location":"index.html#ssl-certs-verification","text":"Sometimes your organization network have special rules on SSL certs verification and in this case you might face the following error when running the script: SSLError: HTTPSConnectionPool(host='api.coinmetrics.io', port=443): Max retries exceeded with url: <some_url_path> (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1123)'))) In this case, you can pass an option during client initialization to disable ssl verification for requests like this: client = CoinMetricsClient ( verify_ssl_certs = False ) We don't recommend setting it to False by default and you should make sure you understand the security risks of disabling SSL certs verification. Additionally, you may choose to specify the path to the SSL certificates on your machine. This may cause errors where Python is unable to locate the certificates on your machine, particularly when using Python virtual environments. from coinmetrics.api_client import CoinMetricsClient SSL_CERT_LOCATION = '/Users/<USER_NAME>/Library/Python/3.8/lib/python/site-packages/certifi/cacert.pem' client = CoinMetricsClient ( verify_ssl_certs = SSL_CERT_LOCATION ) A quick way to find the certs on your machine is: python3 -c \"import requests; print(requests.certs.where())\" And note that this will change based on whether or not you are using a Python virtual environment or not","title":"SSL Certs verification"},{"location":"index.html#installing-and-running-coinmetrics-package-and-other-python-packages-behind-a-secure-python-network","text":"Related to SSL Certs verification, you may have trouble installing and updating PyPi packages to your local environment. So you may need to choose the best solution for your company and environment - either using package managers or installing offline.","title":"Installing and running coinmetrics package and other python packages behind a secure python network"},{"location":"index.html#installing-using-package-managers","text":"Full instructions for setting up your environment to use conda, pip, yarn, npm, etc. can be found here . Additionally, a workaround to disable SSL verification when installing a trusted Python package is this: pip install --trusted-host pypi.python.org <packagename> Although it is important to make sure you understand the risks associated with disabling SSL verification and ensure compliance with company policies.","title":"Installing using package managers"},{"location":"index.html#installing-python-packages-locally-offline","text":"It may be easier to download and install the package locally. Steps: 1. Download the files for the Coin Metrics API Client from PyPi 2. Install it locally","title":"Installing Python packages locally/ offline"},{"location":"index.html#requests-proxy","text":"Sometimes your organization has special rules on making requests to third parties and you have to use proxies in order to comply with the rules. For proxies that don't require auth you can specify them similar to this example: client = CoinMetricsClient ( proxy_url = f 'http://<hostname>:<port>' ) For proxies that require auth, you should be able to specify username and password similar to this example: client = CoinMetricsClient ( proxy_url = f 'http://<username>:<password>@<hostname>:<port>' )","title":"Requests Proxy"},{"location":"index.html#extended-documentation","text":"For more information about the available methods in the client please reference API Client Spec","title":"Extended documentation"},{"location":"CHANGELOG.html","text":"Changelog \u00b6 2024.12.16.21 \u00b6 Added \u00b6 pd.DateOffset as a valid data type for time_increment in parallel() Changed \u00b6 Update pandas dependency to >= 2.0 and websocket-client >= 1.6.0 2024.12.16.21 \u00b6 Added \u00b6 Allowed pandas Timestamp data type to be passed in client API calls Added \"deprecated\" flag to catalog v1 endpoints 2024.12.11.19 \u00b6 Added \u00b6 Catalog-v2/blockchain endpoints 2024.12.10.20 \u00b6 Changed \u00b6 Removed unused columns for reference_data_*().to_dataframe() return Improved casting for return data types 2024.11.21.20 \u00b6 Changed \u00b6 Upgraded the typer dependency to >= 0.6.1 2024.11.18.19 \u00b6 Changed \u00b6 Set format=json_stream for catalog and reference_data functions by default, drastically improving speed 2024.10.31.17 \u00b6 Fixed \u00b6 Bug where requests have double '/' in URL 2024.10.15.19 \u00b6 Changed \u00b6 Updated the request header to denote User-Agent as a Python API Client user 2024.10.9.20 \u00b6 Added \u00b6 txids as a valid parallelize_on variable 2024.10.4.15 \u00b6 Added \u00b6 Transformation logic for catalog_*_v2().to_dataframe() that flattens these dataframes Fixed \u00b6 Type casting for coin_metrics_id field from pandas dataframes for very large integers 2024.9.18.17 \u00b6 Added \u00b6 Auto-retry logic for Websockets Removed \u00b6 Redundant tests 2024.9.18.16 \u00b6 Fixed \u00b6 Bug on parallelization where end_time uses user's timezone instead of UTC Added \u00b6 base_native and quote_native fields to reference_data_markets() 2024.8.20.13 \u00b6 Changed \u00b6 Removed JSON parsing on on_error for CmStream default 2024.8.16.10 \u00b6 Removed \u00b6 Atlas V1 ( get_blockchain_() ) endpoints Added \u00b6 Warnings for upcoming catalog deprecation 2024.8.14.17 \u00b6 Added \u00b6 txid , accounts , block_hashes , heights , and sub_accounts as valid parallel variables height_increment as a valid parallel parameter 2024.8.5.13 \u00b6 Added \u00b6 Temporary patch for returning all columns for to_dataframe() call for reference_data_* and security_master_* functions 2024.7.12.14 \u00b6 Added \u00b6 Allowed timezone aware datetimes to be passed to client API calls 2024.2.6.16 \u00b6 Added \u00b6 Functions get_market_funding_rates_predicted , catalog_{full}_market_funding_rates_predicted_v2 Generic examples for Python API Client functions 2024.1.17.17 \u00b6 Fixed \u00b6 Bug where blockchain_metadata functions were not being called properly 2023.11.27.17 \u00b6 Added \u00b6 blockchain_metadata_tags() and blockchain_metadata_tagged_entities functions Changed \u00b6 Updated README to shorten example code and remove catalog v1 2023.11.13.14 \u00b6 Added \u00b6 Functions get_snapshots_of_asset_metric_constituents and get_timeframes_of_asset_metric_constituents 2023.10.30.13 \u00b6 Added \u00b6 Function get_stream_market_open_interest 2023.10.19.17 \u00b6 Added \u00b6 Function get_stream_market_liquidations 2023.9.29.14 \u00b6 Added \u00b6 metrics parameter to catalog_{full}_markets_v2 catalog_index_levels_v2 and reference_data_markets 2023.9.22.21 \u00b6 Added \u00b6 Parallelization support for blockchain endpoints 2023.9.11.14 \u00b6 Changed \u00b6 Replaced frequency parameter with granularity for get_market_quotes and get_market_orderbooks Added \u00b6 Functions reference_data_assets , reference_data_indexes , reference_data_pairs 2023.8.30.20 \u00b6 Added \u00b6 Functions security_master_assets , security_master_markets 2023.8.28.16 \u00b6 Added \u00b6 Functions catalog_{full}_pair_candles_v2 , catalog_{full}_index_candles_v2 , catalog_{full}_asset_chains_v2 , catalog_{full}_mempool_feerates_v2 , catalog_{full}_mining_pool_tips_summaries_v2 , catalog_{full}_transaction_tracker_assets_v2 2023.8.25.15 \u00b6 Added \u00b6 Ability to parallelize API request for significantly improved data pull speed 2023.8.24.13 \u00b6 Added \u00b6 Functions reference_data_asset_metrics , reference_data_institution_metrics Fixed \u00b6 Added frequency parameter to get_market_orderbooks (fixed in 2023.9.11.14) 2023.8.22.14 \u00b6 Added \u00b6 Functions catalog_{full}_asset_metrics_v2 , catalog_exchange_{full}_metrics_v2 , catalog_{full}_exchange_asset_metrics_v2 , catalog_{full}_pair_metrics_v2 , catalog_{full}_institution_metrics_v2 2023.8.10.19 \u00b6 Added \u00b6 on_close handler to CmStream 2023.7.11.17 \u00b6 Added \u00b6 Functions catalog_{full}_contract_prices_v2 , catalog_{full}_market_trades_v2 , catalog_{full}_market_candles_v2 , catalog_{full}_market_orderbooks_v2 , catalog_{full}_market_quotes_v2 , catalog_{full}_market_funding_rates_v2 , catalog_{full}_market_contract_prices_v2 , catalog_{full}_market_implied_volatility_v2 , catalog_{full}_market_greeks_v2 , catalog_{full}_market_open_interest , catalog_{full}_market_liquidations_v2 , catalog_{full}_market_metrics_v2 . 2023.6.8.20 \u00b6 Fixed \u00b6 Market metrics catalog implementation to prevent duplicate rows Added test to verify one row per frequency 2023.5.26.17 \u00b6 Added \u00b6 Transaction tracker parameters Include heartbeats functionality 2023.5.17.19 \u00b6 Changed \u00b6 Fixed catalog performance issues Added \u00b6 Walkthrough notebook for DS UA Workshop 2023.5.2.20 \u00b6 Added \u00b6 Rate limiter for community users Multithreading to CI pipeline Sample script for exporting atlas balance updates 2023.4.26.13 \u00b6 Fixed \u00b6 URL fixes 2023.4.24.14 \u00b6 Added \u00b6 Missing catalog endpoints Support for optional columns in API data New endpoint and tests 2023.3.16.17 \u00b6 Changed \u00b6 Updated Dockerfile and dependencies Updated poetry lock file Bug fixes in examples Added \u00b6 Missing timeseries stream endpoints 2023.2.27.22 \u00b6 Added \u00b6 Missing functions and parameters 2023.2.23.0 \u00b6 Added \u00b6 Missing functions parameters Improved documentation for DataCollections usage 2023.1.26.23 \u00b6 Added \u00b6 Unauthorized error handling to FlatFilesExporter Updated CI pipeline 2023.1.10.21 \u00b6 Added \u00b6 Debug mode to help figure out performance issues Documentation updates for to_dataframe() method for catalog Automated testing code coverage Error handling for large requests (URI too long) Support for secondary_level parameter in to_dataframe() Support for index levels via WS in the client 2022.11.14.16 \u00b6 Changed \u00b6 Modified API Client to use python requests.Session for improved performance 2022.11.3.18 \u00b6 Added \u00b6 Taxonomy endpoints Updated Atlas V2 balance endpoints Fixed \u00b6 Fixed broken examples using type parameter 2022.10.18.18 \u00b6 Changed \u00b6 Updated build pipeline 2022.10.14.20 \u00b6 Added \u00b6 New catalog endpoints for metrics Automated version updates on release Documentation generation","title":"Changelog"},{"location":"CHANGELOG.html#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG.html#2024121621","text":"","title":"2024.12.16.21"},{"location":"CHANGELOG.html#added","text":"pd.DateOffset as a valid data type for time_increment in parallel()","title":"Added"},{"location":"CHANGELOG.html#changed","text":"Update pandas dependency to >= 2.0 and websocket-client >= 1.6.0","title":"Changed"},{"location":"CHANGELOG.html#2024121621_1","text":"","title":"2024.12.16.21"},{"location":"CHANGELOG.html#added_1","text":"Allowed pandas Timestamp data type to be passed in client API calls Added \"deprecated\" flag to catalog v1 endpoints","title":"Added"},{"location":"CHANGELOG.html#2024121119","text":"","title":"2024.12.11.19"},{"location":"CHANGELOG.html#added_2","text":"Catalog-v2/blockchain endpoints","title":"Added"},{"location":"CHANGELOG.html#2024121020","text":"","title":"2024.12.10.20"},{"location":"CHANGELOG.html#changed_1","text":"Removed unused columns for reference_data_*().to_dataframe() return Improved casting for return data types","title":"Changed"},{"location":"CHANGELOG.html#2024112120","text":"","title":"2024.11.21.20"},{"location":"CHANGELOG.html#changed_2","text":"Upgraded the typer dependency to >= 0.6.1","title":"Changed"},{"location":"CHANGELOG.html#2024111819","text":"","title":"2024.11.18.19"},{"location":"CHANGELOG.html#changed_3","text":"Set format=json_stream for catalog and reference_data functions by default, drastically improving speed","title":"Changed"},{"location":"CHANGELOG.html#2024103117","text":"","title":"2024.10.31.17"},{"location":"CHANGELOG.html#fixed","text":"Bug where requests have double '/' in URL","title":"Fixed"},{"location":"CHANGELOG.html#2024101519","text":"","title":"2024.10.15.19"},{"location":"CHANGELOG.html#changed_4","text":"Updated the request header to denote User-Agent as a Python API Client user","title":"Changed"},{"location":"CHANGELOG.html#202410920","text":"","title":"2024.10.9.20"},{"location":"CHANGELOG.html#added_3","text":"txids as a valid parallelize_on variable","title":"Added"},{"location":"CHANGELOG.html#202410415","text":"","title":"2024.10.4.15"},{"location":"CHANGELOG.html#added_4","text":"Transformation logic for catalog_*_v2().to_dataframe() that flattens these dataframes","title":"Added"},{"location":"CHANGELOG.html#fixed_1","text":"Type casting for coin_metrics_id field from pandas dataframes for very large integers","title":"Fixed"},{"location":"CHANGELOG.html#202491817","text":"","title":"2024.9.18.17"},{"location":"CHANGELOG.html#added_5","text":"Auto-retry logic for Websockets","title":"Added"},{"location":"CHANGELOG.html#removed","text":"Redundant tests","title":"Removed"},{"location":"CHANGELOG.html#202491816","text":"","title":"2024.9.18.16"},{"location":"CHANGELOG.html#fixed_2","text":"Bug on parallelization where end_time uses user's timezone instead of UTC","title":"Fixed"},{"location":"CHANGELOG.html#added_6","text":"base_native and quote_native fields to reference_data_markets()","title":"Added"},{"location":"CHANGELOG.html#202482013","text":"","title":"2024.8.20.13"},{"location":"CHANGELOG.html#changed_5","text":"Removed JSON parsing on on_error for CmStream default","title":"Changed"},{"location":"CHANGELOG.html#202481610","text":"","title":"2024.8.16.10"},{"location":"CHANGELOG.html#removed_1","text":"Atlas V1 ( get_blockchain_() ) endpoints","title":"Removed"},{"location":"CHANGELOG.html#added_7","text":"Warnings for upcoming catalog deprecation","title":"Added"},{"location":"CHANGELOG.html#202481417","text":"","title":"2024.8.14.17"},{"location":"CHANGELOG.html#added_8","text":"txid , accounts , block_hashes , heights , and sub_accounts as valid parallel variables height_increment as a valid parallel parameter","title":"Added"},{"location":"CHANGELOG.html#20248513","text":"","title":"2024.8.5.13"},{"location":"CHANGELOG.html#added_9","text":"Temporary patch for returning all columns for to_dataframe() call for reference_data_* and security_master_* functions","title":"Added"},{"location":"CHANGELOG.html#202471214","text":"","title":"2024.7.12.14"},{"location":"CHANGELOG.html#added_10","text":"Allowed timezone aware datetimes to be passed to client API calls","title":"Added"},{"location":"CHANGELOG.html#20242616","text":"","title":"2024.2.6.16"},{"location":"CHANGELOG.html#added_11","text":"Functions get_market_funding_rates_predicted , catalog_{full}_market_funding_rates_predicted_v2 Generic examples for Python API Client functions","title":"Added"},{"location":"CHANGELOG.html#202411717","text":"","title":"2024.1.17.17"},{"location":"CHANGELOG.html#fixed_3","text":"Bug where blockchain_metadata functions were not being called properly","title":"Fixed"},{"location":"CHANGELOG.html#2023112717","text":"","title":"2023.11.27.17"},{"location":"CHANGELOG.html#added_12","text":"blockchain_metadata_tags() and blockchain_metadata_tagged_entities functions","title":"Added"},{"location":"CHANGELOG.html#changed_6","text":"Updated README to shorten example code and remove catalog v1","title":"Changed"},{"location":"CHANGELOG.html#2023111314","text":"","title":"2023.11.13.14"},{"location":"CHANGELOG.html#added_13","text":"Functions get_snapshots_of_asset_metric_constituents and get_timeframes_of_asset_metric_constituents","title":"Added"},{"location":"CHANGELOG.html#2023103013","text":"","title":"2023.10.30.13"},{"location":"CHANGELOG.html#added_14","text":"Function get_stream_market_open_interest","title":"Added"},{"location":"CHANGELOG.html#2023101917","text":"","title":"2023.10.19.17"},{"location":"CHANGELOG.html#added_15","text":"Function get_stream_market_liquidations","title":"Added"},{"location":"CHANGELOG.html#202392914","text":"","title":"2023.9.29.14"},{"location":"CHANGELOG.html#added_16","text":"metrics parameter to catalog_{full}_markets_v2 catalog_index_levels_v2 and reference_data_markets","title":"Added"},{"location":"CHANGELOG.html#202392221","text":"","title":"2023.9.22.21"},{"location":"CHANGELOG.html#added_17","text":"Parallelization support for blockchain endpoints","title":"Added"},{"location":"CHANGELOG.html#202391114","text":"","title":"2023.9.11.14"},{"location":"CHANGELOG.html#changed_7","text":"Replaced frequency parameter with granularity for get_market_quotes and get_market_orderbooks","title":"Changed"},{"location":"CHANGELOG.html#added_18","text":"Functions reference_data_assets , reference_data_indexes , reference_data_pairs","title":"Added"},{"location":"CHANGELOG.html#202383020","text":"","title":"2023.8.30.20"},{"location":"CHANGELOG.html#added_19","text":"Functions security_master_assets , security_master_markets","title":"Added"},{"location":"CHANGELOG.html#202382816","text":"","title":"2023.8.28.16"},{"location":"CHANGELOG.html#added_20","text":"Functions catalog_{full}_pair_candles_v2 , catalog_{full}_index_candles_v2 , catalog_{full}_asset_chains_v2 , catalog_{full}_mempool_feerates_v2 , catalog_{full}_mining_pool_tips_summaries_v2 , catalog_{full}_transaction_tracker_assets_v2","title":"Added"},{"location":"CHANGELOG.html#202382515","text":"","title":"2023.8.25.15"},{"location":"CHANGELOG.html#added_21","text":"Ability to parallelize API request for significantly improved data pull speed","title":"Added"},{"location":"CHANGELOG.html#202382413","text":"","title":"2023.8.24.13"},{"location":"CHANGELOG.html#added_22","text":"Functions reference_data_asset_metrics , reference_data_institution_metrics","title":"Added"},{"location":"CHANGELOG.html#fixed_4","text":"Added frequency parameter to get_market_orderbooks (fixed in 2023.9.11.14)","title":"Fixed"},{"location":"CHANGELOG.html#202382214","text":"","title":"2023.8.22.14"},{"location":"CHANGELOG.html#added_23","text":"Functions catalog_{full}_asset_metrics_v2 , catalog_exchange_{full}_metrics_v2 , catalog_{full}_exchange_asset_metrics_v2 , catalog_{full}_pair_metrics_v2 , catalog_{full}_institution_metrics_v2","title":"Added"},{"location":"CHANGELOG.html#202381019","text":"","title":"2023.8.10.19"},{"location":"CHANGELOG.html#added_24","text":"on_close handler to CmStream","title":"Added"},{"location":"CHANGELOG.html#202371117","text":"","title":"2023.7.11.17"},{"location":"CHANGELOG.html#added_25","text":"Functions catalog_{full}_contract_prices_v2 , catalog_{full}_market_trades_v2 , catalog_{full}_market_candles_v2 , catalog_{full}_market_orderbooks_v2 , catalog_{full}_market_quotes_v2 , catalog_{full}_market_funding_rates_v2 , catalog_{full}_market_contract_prices_v2 , catalog_{full}_market_implied_volatility_v2 , catalog_{full}_market_greeks_v2 , catalog_{full}_market_open_interest , catalog_{full}_market_liquidations_v2 , catalog_{full}_market_metrics_v2 .","title":"Added"},{"location":"CHANGELOG.html#20236820","text":"","title":"2023.6.8.20"},{"location":"CHANGELOG.html#fixed_5","text":"Market metrics catalog implementation to prevent duplicate rows Added test to verify one row per frequency","title":"Fixed"},{"location":"CHANGELOG.html#202352617","text":"","title":"2023.5.26.17"},{"location":"CHANGELOG.html#added_26","text":"Transaction tracker parameters Include heartbeats functionality","title":"Added"},{"location":"CHANGELOG.html#202351719","text":"","title":"2023.5.17.19"},{"location":"CHANGELOG.html#changed_8","text":"Fixed catalog performance issues","title":"Changed"},{"location":"CHANGELOG.html#added_27","text":"Walkthrough notebook for DS UA Workshop","title":"Added"},{"location":"CHANGELOG.html#20235220","text":"","title":"2023.5.2.20"},{"location":"CHANGELOG.html#added_28","text":"Rate limiter for community users Multithreading to CI pipeline Sample script for exporting atlas balance updates","title":"Added"},{"location":"CHANGELOG.html#202342613","text":"","title":"2023.4.26.13"},{"location":"CHANGELOG.html#fixed_6","text":"URL fixes","title":"Fixed"},{"location":"CHANGELOG.html#202342414","text":"","title":"2023.4.24.14"},{"location":"CHANGELOG.html#added_29","text":"Missing catalog endpoints Support for optional columns in API data New endpoint and tests","title":"Added"},{"location":"CHANGELOG.html#202331617","text":"","title":"2023.3.16.17"},{"location":"CHANGELOG.html#changed_9","text":"Updated Dockerfile and dependencies Updated poetry lock file Bug fixes in examples","title":"Changed"},{"location":"CHANGELOG.html#added_30","text":"Missing timeseries stream endpoints","title":"Added"},{"location":"CHANGELOG.html#202322722","text":"","title":"2023.2.27.22"},{"location":"CHANGELOG.html#added_31","text":"Missing functions and parameters","title":"Added"},{"location":"CHANGELOG.html#20232230","text":"","title":"2023.2.23.0"},{"location":"CHANGELOG.html#added_32","text":"Missing functions parameters Improved documentation for DataCollections usage","title":"Added"},{"location":"CHANGELOG.html#202312623","text":"","title":"2023.1.26.23"},{"location":"CHANGELOG.html#added_33","text":"Unauthorized error handling to FlatFilesExporter Updated CI pipeline","title":"Added"},{"location":"CHANGELOG.html#202311021","text":"","title":"2023.1.10.21"},{"location":"CHANGELOG.html#added_34","text":"Debug mode to help figure out performance issues Documentation updates for to_dataframe() method for catalog Automated testing code coverage Error handling for large requests (URI too long) Support for secondary_level parameter in to_dataframe() Support for index levels via WS in the client","title":"Added"},{"location":"CHANGELOG.html#2022111416","text":"","title":"2022.11.14.16"},{"location":"CHANGELOG.html#changed_10","text":"Modified API Client to use python requests.Session for improved performance","title":"Changed"},{"location":"CHANGELOG.html#202211318","text":"","title":"2022.11.3.18"},{"location":"CHANGELOG.html#added_35","text":"Taxonomy endpoints Updated Atlas V2 balance endpoints","title":"Added"},{"location":"CHANGELOG.html#fixed_7","text":"Fixed broken examples using type parameter","title":"Fixed"},{"location":"CHANGELOG.html#2022101818","text":"","title":"2022.10.18.18"},{"location":"CHANGELOG.html#changed_11","text":"Updated build pipeline","title":"Changed"},{"location":"CHANGELOG.html#2022101420","text":"","title":"2022.10.14.20"},{"location":"CHANGELOG.html#added_36","text":"New catalog endpoints for metrics Automated version updates on release Documentation generation","title":"Added"},{"location":"FlatFilesExport.html","text":"Exporting flat files \u00b6 Along with the API client we provide a data exporting tool which allow downloading large amount of data as flat files rather than from the API itself. The tool allows users to download daily files over our entire provided history for market trades, market quotes, and market candles. Authorization for flat files download \u00b6 This program was set up to easily access a flat files server provided to Coin Metrics commercial clients. If you are a community API user or a client without access to this server, a 403 error will be returned. If you are a community API user and looking to get historical asset prices, Coin Metrics does offer historical asset prices for download . The CoinMetricsDataExporter class will return a CoinMetricsUnauthorizedException if your API key is not authorized to access this server. The flat files export is considered a separate product from the Coin Metrics API, if you would like to gain access or believe you should have access but do not, please contact coinmetrics support. Installation and set up \u00b6 The tool is installed a long with the coinmetrics-api-client , it's recommended to create a new Python [virtual environment] for your project and install the package: python -m venv .venv source .venv/bin/activate pip install coinmetrics-api-client The export tool requires access to a CoinMetrics API key, and is accessed with the environment variable CM_API_KEY , the easiest way to set this is to run export CM_API_KEY=<API_KEY> in your terminal on MacOS/Linux or just set CM_API_KEY=<API_KEY> on Windows. Additionally, you have the option of passing it in which each command instead. To confirm the tool is installed correct execute the command coinmetrics export --help which brings up relevant documentation. At the bottom of the help message all the available commands are shown: Commands: get-asset-pairs get-exchanges market-candles-future Used to export data related to future market... market-candles-spot Used to export data related to spot market candles. market-quotes-future Used to export data related to future market... market-quotes-spot Used to export data related to spot market quotes... market-trades-future Used to export data related to future market... market-trades-spot Used to export data related to spot market trades. Exporting Market Trades Files \u00b6 Further documentation is available on any of the commands by running coinmetrics export <command> --help , for example running coinmetrics export market-trades-spot --help prints: Usage: coinmetrics export market-trades-spot [OPTIONS] EXCHANGES [START_DATE]: [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m -%d %H:%M:%S] [END_DATE]:[%Y-%m-% d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Used to export data related to spot market trades. Format: coinmetrics export market-trades-spot <exchanges> <start_date> <end_date> Example: coinmetrics export market-trades-spot coinbase,binance 2022-01-01 2022-01-03. Arguments: EXCHANGES Pass in arguments as a list of strings separated by by commas i.e. binance,coinbase,bitmex [required] [START_DATE]:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] [default: 2022-08-10] [END_DATE]:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] [default: 2022-08-10] Options: --output-format TEXT [default: json.gz] --threaded / --no-threaded [default: False] --api-key TEXT --help Show this message and exit. Example: \u00b6 If you want to get the flat files for spot-market-trades from coinbase and binance for the first 5 days of June 2022: coinmetrics export market-trades-spot binance,coinbase 2022-06-01 2022-06-05 In your current directory you will see: market-trades-spot \u251c\u2500\u2500 binance \u2502 \u251c\u2500\u2500 2022-06-01.json.gz \u2502 \u251c\u2500\u2500 2022-06-02.json.gz \u2502 \u251c\u2500\u2500 2022-06-03.json.gz \u2502 \u251c\u2500\u2500 2022-06-04.json.gz \u2502 \u2514\u2500\u2500 2022-06-05.json.gz \u2514\u2500\u2500 coinbase \u251c\u2500\u2500 2022-06-01.json.gz \u251c\u2500\u2500 2022-06-02.json.gz \u251c\u2500\u2500 2022-06-03.json.gz \u251c\u2500\u2500 2022-06-04.json.gz \u2514\u2500\u2500 2022-06-05.json.gz By default the files are downloaded as gzipped json files - they are compressed in order to take up less space. If you instead wish to download the data as a csv or json you can use: coinmetrics export market-trades-spot binance,coinbase 2022-06-01 2022-06-05 --output-format csv The functionality for getting future, rather than spot market trades is the exact same, just replace market-trades-spot with market-trades-future In order to figure out what exchanges are supported for a flat file type you can run coinmetrics export get-exchanges <command> , so in this case running coinmetrics export get-exchanges market-trades-spot Exporting market quotes \u00b6 Market quotes are similar to market trades, except data is separated by exchange and by asset-pair. So you must provide both what exchanges you are querying as well the specific asset pairs. Example if you wanted to export files to market quotes for ETHUSDT and BTCUSDT over a certain timeframe as json files: coinmetrics export market-quotes-spot binance ETHUSDT,BTCUSDT 2022-03-03 2022-03-05 --output-format json In order to find what asset pairs are availible you can query this information with coinmetrics export get-asset-pairs <command> <exchange> so in this case, for Binance you would run coinmetrics export get-asset-pairs market-quotes-spot binance . If you are comfortable with command line tools it may be helpful to string this with unix command line tools like grep . For example, to find all the BTC related pairs for binance you might run coinmetrics export get-asset-pairs market-quotes-spot binance | grep BTC . The functionality is the same for market-qutoes-futures . Exporting market candles \u00b6 Exporting market candles also functions similar to market trades, however you must specify a frequency in addition to an exchange and date range. The frequency denominates the range which the market candles cover. These frequencies are currently \"1m\", \"5m\", \"10m\", \"15m\", \"30m\", \"1h\", and \"1d\" . Example to download 5m spot market candles for coinbase and binance for a date range: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 Which creates these files: market-candles-spot-5m \u251c\u2500\u2500 binance \u2502 \u251c\u2500\u2500 2022-01-01.json.gz \u2502 \u251c\u2500\u2500 2022-01-02.json.gz \u2502 \u251c\u2500\u2500 2022-01-03.json.gz \u2502 \u251c\u2500\u2500 2022-01-04.json.gz \u2502 \u2514\u2500\u2500 2022-01-05.json.gz \u2514\u2500\u2500 coinbase \u251c\u2500\u2500 2022-01-01.json.gz \u251c\u2500\u2500 2022-01-02.json.gz \u251c\u2500\u2500 2022-01-03.json.gz \u251c\u2500\u2500 2022-01-04.json.gz \u2514\u2500\u2500 2022-01-05.json.gz The functionality is the same for market-candles-future Using API Key without setting an environment variable \u00b6 If you don't wish to put your CoinMetrics API key in your environment, you may also pass it in with any command with the flag --api-key . Example: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 --api-key <API_KEY> Downloading files in parallel \u00b6 If you are downloading many files and want to speed the process up there is an option to concurrently download multiple rather than one at a time, using the --threaded flag. Example: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 --threaded Note that using this option will consume more system resources and network bandwith, and the download speed will still be limited by egress from the files server as well as the specs of your machine. Using the CoinMetricsDataExporter in Python instead of CLI \u00b6 Depending on the use case it might be more convenient to use the CoinMetricsDataExporter directly in Python rather than from the CLI. There is several examples here as well as one below: from coinmetrics.data_exporter import CoinMetricsDataExporter from datetime import datetime CM_API_KEY = \"<YOUR_API_KEY>\" data_exporter = CoinMetricsDataExporter ( api_key = CM_API_KEY ) if __name__ == \"__main__\" : \"\"\" This script will export all the daily market-trades-spot files for Coinbase and Gemini for the month of January \"\"\" start_date = datetime ( 2019 , 1 , 1 ) end_date = datetime ( 2019 , 1 , 31 ) exchanges = [ \"coinbase\" , \"gemini\" ] data_exporter . export_market_trades_spot_data ( start_date = start_date , end_date = end_date , exchanges = exchanges , threaded = True )","title":"Flat Files Exporter"},{"location":"FlatFilesExport.html#exporting-flat-files","text":"Along with the API client we provide a data exporting tool which allow downloading large amount of data as flat files rather than from the API itself. The tool allows users to download daily files over our entire provided history for market trades, market quotes, and market candles.","title":"Exporting flat files"},{"location":"FlatFilesExport.html#authorization-for-flat-files-download","text":"This program was set up to easily access a flat files server provided to Coin Metrics commercial clients. If you are a community API user or a client without access to this server, a 403 error will be returned. If you are a community API user and looking to get historical asset prices, Coin Metrics does offer historical asset prices for download . The CoinMetricsDataExporter class will return a CoinMetricsUnauthorizedException if your API key is not authorized to access this server. The flat files export is considered a separate product from the Coin Metrics API, if you would like to gain access or believe you should have access but do not, please contact coinmetrics support.","title":"Authorization for flat files download"},{"location":"FlatFilesExport.html#installation-and-set-up","text":"The tool is installed a long with the coinmetrics-api-client , it's recommended to create a new Python [virtual environment] for your project and install the package: python -m venv .venv source .venv/bin/activate pip install coinmetrics-api-client The export tool requires access to a CoinMetrics API key, and is accessed with the environment variable CM_API_KEY , the easiest way to set this is to run export CM_API_KEY=<API_KEY> in your terminal on MacOS/Linux or just set CM_API_KEY=<API_KEY> on Windows. Additionally, you have the option of passing it in which each command instead. To confirm the tool is installed correct execute the command coinmetrics export --help which brings up relevant documentation. At the bottom of the help message all the available commands are shown: Commands: get-asset-pairs get-exchanges market-candles-future Used to export data related to future market... market-candles-spot Used to export data related to spot market candles. market-quotes-future Used to export data related to future market... market-quotes-spot Used to export data related to spot market quotes... market-trades-future Used to export data related to future market... market-trades-spot Used to export data related to spot market trades.","title":"Installation and set up"},{"location":"FlatFilesExport.html#exporting-market-trades-files","text":"Further documentation is available on any of the commands by running coinmetrics export <command> --help , for example running coinmetrics export market-trades-spot --help prints: Usage: coinmetrics export market-trades-spot [OPTIONS] EXCHANGES [START_DATE]: [%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m -%d %H:%M:%S] [END_DATE]:[%Y-%m-% d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] Used to export data related to spot market trades. Format: coinmetrics export market-trades-spot <exchanges> <start_date> <end_date> Example: coinmetrics export market-trades-spot coinbase,binance 2022-01-01 2022-01-03. Arguments: EXCHANGES Pass in arguments as a list of strings separated by by commas i.e. binance,coinbase,bitmex [required] [START_DATE]:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] [default: 2022-08-10] [END_DATE]:[%Y-%m-%d|%Y-%m-%dT%H:%M:%S|%Y-%m-%d %H:%M:%S] [default: 2022-08-10] Options: --output-format TEXT [default: json.gz] --threaded / --no-threaded [default: False] --api-key TEXT --help Show this message and exit.","title":"Exporting Market Trades Files"},{"location":"FlatFilesExport.html#example","text":"If you want to get the flat files for spot-market-trades from coinbase and binance for the first 5 days of June 2022: coinmetrics export market-trades-spot binance,coinbase 2022-06-01 2022-06-05 In your current directory you will see: market-trades-spot \u251c\u2500\u2500 binance \u2502 \u251c\u2500\u2500 2022-06-01.json.gz \u2502 \u251c\u2500\u2500 2022-06-02.json.gz \u2502 \u251c\u2500\u2500 2022-06-03.json.gz \u2502 \u251c\u2500\u2500 2022-06-04.json.gz \u2502 \u2514\u2500\u2500 2022-06-05.json.gz \u2514\u2500\u2500 coinbase \u251c\u2500\u2500 2022-06-01.json.gz \u251c\u2500\u2500 2022-06-02.json.gz \u251c\u2500\u2500 2022-06-03.json.gz \u251c\u2500\u2500 2022-06-04.json.gz \u2514\u2500\u2500 2022-06-05.json.gz By default the files are downloaded as gzipped json files - they are compressed in order to take up less space. If you instead wish to download the data as a csv or json you can use: coinmetrics export market-trades-spot binance,coinbase 2022-06-01 2022-06-05 --output-format csv The functionality for getting future, rather than spot market trades is the exact same, just replace market-trades-spot with market-trades-future In order to figure out what exchanges are supported for a flat file type you can run coinmetrics export get-exchanges <command> , so in this case running coinmetrics export get-exchanges market-trades-spot","title":"Example:"},{"location":"FlatFilesExport.html#exporting-market-quotes","text":"Market quotes are similar to market trades, except data is separated by exchange and by asset-pair. So you must provide both what exchanges you are querying as well the specific asset pairs. Example if you wanted to export files to market quotes for ETHUSDT and BTCUSDT over a certain timeframe as json files: coinmetrics export market-quotes-spot binance ETHUSDT,BTCUSDT 2022-03-03 2022-03-05 --output-format json In order to find what asset pairs are availible you can query this information with coinmetrics export get-asset-pairs <command> <exchange> so in this case, for Binance you would run coinmetrics export get-asset-pairs market-quotes-spot binance . If you are comfortable with command line tools it may be helpful to string this with unix command line tools like grep . For example, to find all the BTC related pairs for binance you might run coinmetrics export get-asset-pairs market-quotes-spot binance | grep BTC . The functionality is the same for market-qutoes-futures .","title":"Exporting market quotes"},{"location":"FlatFilesExport.html#exporting-market-candles","text":"Exporting market candles also functions similar to market trades, however you must specify a frequency in addition to an exchange and date range. The frequency denominates the range which the market candles cover. These frequencies are currently \"1m\", \"5m\", \"10m\", \"15m\", \"30m\", \"1h\", and \"1d\" . Example to download 5m spot market candles for coinbase and binance for a date range: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 Which creates these files: market-candles-spot-5m \u251c\u2500\u2500 binance \u2502 \u251c\u2500\u2500 2022-01-01.json.gz \u2502 \u251c\u2500\u2500 2022-01-02.json.gz \u2502 \u251c\u2500\u2500 2022-01-03.json.gz \u2502 \u251c\u2500\u2500 2022-01-04.json.gz \u2502 \u2514\u2500\u2500 2022-01-05.json.gz \u2514\u2500\u2500 coinbase \u251c\u2500\u2500 2022-01-01.json.gz \u251c\u2500\u2500 2022-01-02.json.gz \u251c\u2500\u2500 2022-01-03.json.gz \u251c\u2500\u2500 2022-01-04.json.gz \u2514\u2500\u2500 2022-01-05.json.gz The functionality is the same for market-candles-future","title":"Exporting market candles"},{"location":"FlatFilesExport.html#using-api-key-without-setting-an-environment-variable","text":"If you don't wish to put your CoinMetrics API key in your environment, you may also pass it in with any command with the flag --api-key . Example: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 --api-key <API_KEY>","title":"Using API Key without setting an environment variable"},{"location":"FlatFilesExport.html#downloading-files-in-parallel","text":"If you are downloading many files and want to speed the process up there is an option to concurrently download multiple rather than one at a time, using the --threaded flag. Example: coinmetrics export market-candles-spot 5m coinbase,binance 2022-01-01 2022-01-05 --threaded Note that using this option will consume more system resources and network bandwith, and the download speed will still be limited by egress from the files server as well as the specs of your machine.","title":"Downloading files in parallel"},{"location":"FlatFilesExport.html#using-the-coinmetricsdataexporter-in-python-instead-of-cli","text":"Depending on the use case it might be more convenient to use the CoinMetricsDataExporter directly in Python rather than from the CLI. There is several examples here as well as one below: from coinmetrics.data_exporter import CoinMetricsDataExporter from datetime import datetime CM_API_KEY = \"<YOUR_API_KEY>\" data_exporter = CoinMetricsDataExporter ( api_key = CM_API_KEY ) if __name__ == \"__main__\" : \"\"\" This script will export all the daily market-trades-spot files for Coinbase and Gemini for the month of January \"\"\" start_date = datetime ( 2019 , 1 , 1 ) end_date = datetime ( 2019 , 1 , 31 ) exchanges = [ \"coinbase\" , \"gemini\" ] data_exporter . export_market_trades_spot_data ( start_date = start_date , end_date = end_date , exchanges = exchanges , threaded = True )","title":"Using the CoinMetricsDataExporter in Python instead of CLI"},{"location":"api_client.html","text":"coinmetrics.api_client \u00b6 CoinMetricsClient Objects \u00b6 class CoinMetricsClient () catalog_assets \u00b6 @deprecated ( \"catalog\" ) def catalog_assets ( assets : Optional [ Union [ List [ str ], str ]] = None , include : Optional [ Union [ List [ str ], str ]] = None , exclude : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetsData Returns meta information about available assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. include ( list(str), str ): list of fields to include in response. Supported values are metrics, markets, exchanges. Included by default if omitted. exclude ( list(str), str ): list of fields to include in response. Supported values are metrics, markets, exchanges. Included by default if omitted. Returns : list(dict(str, any)) : Information that is available for requested assets, like: Full name, metrics and available frequencies, markets, exchanges, etc. catalog_asset_alerts \u00b6 @deprecated ( \"catalog\" ) def catalog_asset_alerts ( assets : Optional [ Union [ str , List [ str ]]] = None , alerts : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogAssetAlertsData Arguments : assets ( Union[str, List[str]] ): Comma separated list of assets. By default all assets are returned. alerts ( Union[str, List[str]] ): Comma separated list of asset alert names. By default all asset alerts are returned. Returns : CatalogAssetAlertsData : List of asset alerts. catalog_asset_chains \u00b6 @deprecated ( \"catalog\" ) def catalog_asset_chains ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogAssetChainsData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogAssetChainsData : List of asset chains assets catalog_mempool_feerates \u00b6 @deprecated ( \"catalog\" ) def catalog_mempool_feerates ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogMempoolFeeratesData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogMempoolFeeratesData : List of mempool feerates assets catalog_mining_pool_tips_summaries \u00b6 @deprecated ( \"catalog\" ) def catalog_mining_pool_tips_summaries ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogMiningPoolTipsData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogMiningPoolTipsData : List of mining pool tips assets catalog_transaction_tracker_assets \u00b6 @deprecated ( \"catalog\" ) def catalog_transaction_tracker_assets ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogTransactionTrackerData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogTransactionTrackerData : List of transaction tracker assets catalog_asset_pairs \u00b6 @deprecated ( \"catalog\" ) def catalog_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairsData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested asset-asset pair like metrics and their respective frequencies and time ranges catalog_asset_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_asset_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of available asset metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single asset metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about asset metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_exchange_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_exchange_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of available exchange metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single exchange metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about exchange metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_exchange_asset_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_exchange_asset_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogExchangeAssetMetricsData Returns list of available exchange metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single exchange metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about exchange metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_pair_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_pair_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogPairMetricsData Returns list of available pair metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single pair metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about pair metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_institution_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_institution_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogInstitutionMetricsData Returns list of available institution metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single institution metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about institution metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_asset_pair_candles \u00b6 @deprecated ( \"catalog\" ) def catalog_asset_pair_candles ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairCandlesData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Returns a list of available asset pair candles along with the time ranges of available data per candle duration. catalog_exchanges \u00b6 @deprecated ( \"catalog\" ) def catalog_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangesData Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all available exchanges are returned. Returns : list(dict(str, any)) : Information that is available for requested exchanges, like: markets, min and max time available. catalog_exchange_assets \u00b6 @deprecated ( \"catalog\" ) def catalog_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangeAssetsData Returns meta information about available exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested exchange-asset pair like metrics and their respective frequencies and time ranges catalog_indexes \u00b6 @deprecated ( \"catalog\" ) def catalog_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogIndexesData Returns meta information about available indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all available indexes are returned. Returns : list(dict(str, any)) : Information that is available for requested indexes, like: Full name, and available frequencies. catalog_index_candles \u00b6 @deprecated ( \"catalog\" ) def catalog_index_candles ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogMarketCandlesData Returns meta information about available index candles. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all available index candles are returned. Returns : list(dict(str, any)) : Information that is available for requested index candles, like: Full name, and available frequencies. catalog_institutions \u00b6 @deprecated ( \"catalog\" ) def catalog_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogInstitutionsData Returns meta information about available institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested institution like metrics and their respective frequencies and time ranges. catalog_markets \u00b6 @deprecated ( \"catalog\" ) def catalog_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , include : Optional [ Union [ List [ str ], str ]] = None , exclude : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogMarketsData Returns list of available markets that correspond to a filter. If no filter is set, returns all available assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. include ( list(str), str ): list of fields to include in response. Supported values are trades, orderbooks, quotes, funding_rates, openinterest, liquidations. Included by default if omitted. exclude ( list(str), str ): list of fields to exclude from response. Supported values are trades, orderbooks, quotes, funding_rates, openinterest, liquidations. Included by default if omitted. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_market_trades \u00b6 @deprecated ( \"catalog\" ) def catalog_market_trades ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with trades support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market trades that are available for the provided filter, as well as the time frames they are available catalog_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of available metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_market_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_market_metrics ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketMetricsData Returns list of available markets with metrics support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_market_candles \u00b6 @deprecated ( \"catalog\" ) def catalog_market_candles ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketCandlesData Returns list of available markets with candles support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_market_orderbooks \u00b6 @deprecated ( \"catalog\" ) def catalog_market_orderbooks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketOrderbooksData Returns a list of markets with orderbooks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets orderbooks that correspond to a filter catalog_market_quotes \u00b6 @deprecated ( \"catalog\" ) def catalog_market_quotes ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with quotes support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets quotes that correspond to a filter catalog_market_funding_rates \u00b6 @deprecated ( \"catalog\" ) def catalog_market_funding_rates ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with funding rates support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about funding rates that correspond to a filter catalog_market_contract_prices \u00b6 @deprecated ( \"catalog\" ) def catalog_market_contract_prices ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = None , limit : Optional [ str ] = None ) -> CatalogMarketContractPrices Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Format of the response. Supported values are json , json_stream . limit ( Optional[str] ): Limit of response items. none means no limit. Returns : CatalogMarketContractPrices : List of contract prices statistics. catalog_market_implied_volatility \u00b6 @deprecated ( \"catalog\" ) def catalog_market_implied_volatility ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = None , limit : Optional [ str ] = None ) -> CatalogMarketImpliedVolatility Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Format of the response. Supported values are json , json_stream . limit ( Optional[str] ): Limit of response items. none means no limit. Returns : CatalogMarketImpliedVolatility : List of implied volatility statistics. catalog_market_greeks \u00b6 @deprecated ( \"catalog\" ) def catalog_market_greeks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with greeks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market greeks that correspond to the filter catalog_market_open_interest \u00b6 @deprecated ( \"catalog\" ) def catalog_market_open_interest ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with open interest support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market open interest that correspond to a filter catalog_market_liquidations \u00b6 @deprecated ( \"catalog\" ) def catalog_market_liquidations ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with liquidations support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market liquidations that correspond to a filter catalog_full_assets \u00b6 @deprecated ( \"catalog\" ) def catalog_full_assets ( assets : Optional [ Union [ List [ str ], str ]] = None , include : Optional [ Union [ List [ str ], str ]] = None , exclude : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetsData Returns meta information about supported assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all supported assets are returned. include ( list(str), str ): list of fields to include in response. Supported values are metrics, markets, exchanges. Included by default if omitted. exclude ( list(str), str ): list of fields to exclude from response. Supported values are metrics, markets, exchanges. Included by default if omitted. Returns : list(dict(str, any)) : Information that is supported for requested assets, like: Full name, metrics and supported frequencies, markets, exchanges, etc. catalog_full_asset_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_full_asset_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of all available asset metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single asset metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about asset metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_full_asset_alerts \u00b6 @deprecated ( \"catalog\" ) def catalog_full_asset_alerts ( assets : Optional [ Union [ str , List [ str ]]] = None , alerts : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogAssetAlertsData Arguments : assets ( Union[str, List[str]] ): Comma separated list of assets. By default all assets are returned. alerts ( Union[str, List[str]] ): Comma separated list of asset alert names. By default all asset alerts are returned. Returns : CatalogAssetAlertsData : List of asset alerts. catalog_full_asset_chains \u00b6 @deprecated ( \"catalog\" ) def catalog_full_asset_chains ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogAssetChainsData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogAssetChainsData : List of asset chains assets catalog_full_mempool_feerates \u00b6 @deprecated ( \"catalog\" ) def catalog_full_mempool_feerates ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogMempoolFeeratesData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogMempoolFeeratesData : List of mempool feerates assets catalog_full_mining_pool_tips_summaries \u00b6 @deprecated ( \"catalog\" ) def catalog_full_mining_pool_tips_summaries ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogMiningPoolTipsData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogMiningPoolTipsData : List of mining pool tips assets catalog_full_transaction_tracker_assets \u00b6 @deprecated ( \"catalog\" ) def catalog_full_transaction_tracker_assets ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogTransactionTrackerData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogTransactionTrackerData : List of transaction tracker assets catalog_full_asset_pairs \u00b6 @deprecated ( \"catalog\" ) def catalog_full_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairsData Returns meta information about supported asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested asset-asset pair like metrics and their respective frequencies and time ranges catalog_full_pair_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_full_pair_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogPairMetricsData Returns list of all available pair metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single pair metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about pair metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_full_institution_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_full_institution_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogInstitutionMetricsData Returns list of available institution metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single institution metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about institution metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_full_asset_pair_candles \u00b6 @deprecated ( \"catalog\" ) def catalog_full_asset_pair_candles ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairCandlesData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Returns a list of available asset pair candles along with the time ranges of available data per candle duration. catalog_full_exchanges \u00b6 @deprecated ( \"catalog\" ) def catalog_full_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangesData Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all supported exchanges are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchanges, like: markets, min and max time supported. catalog_full_exchange_assets \u00b6 @deprecated ( \"catalog\" ) def catalog_full_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangeAssetsData Returns meta information about supported exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchange-asset pair like metrics and their respective frequencies and time ranges catalog_full_exchange_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_full_exchange_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of all available exchange metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single exchange metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about exchange metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_full_exchange_asset_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_full_exchange_asset_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogExchangeAssetMetricsData Returns list of available exchange metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single exchange metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about exchange metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_full_indexes \u00b6 @deprecated ( \"catalog\" ) def catalog_full_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogIndexesData Returns meta information about supported indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all supported indexes are returned. Returns : list(dict(str, any)) : Information that is supported for requested indexes, like: Full name, and supported frequencies. catalog_full_index_candles \u00b6 @deprecated ( \"catalog\" ) def catalog_full_index_candles ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogMarketCandlesData Returns meta information about supported index candles. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all supported indexes are returned. Returns : list(dict(str, any)) : Information that is supported for requested index candles, like: Full name, and supported frequencies. catalog_full_institutions \u00b6 @deprecated ( \"catalog\" ) def catalog_full_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogInstitutionsData Returns meta information about supported institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested institution like metrics and their respective frequencies and time ranges. catalog_full_markets \u00b6 @deprecated ( \"catalog\" ) def catalog_full_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , include : Optional [ str ] = None , exclude : Optional [ str ] = None ) -> CatalogMarketsData Returns list of supported markets that correspond to a filter. If no filter is set, returns all supported assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. include ( list(str), str ): ist of fields to include in response. Supported values are trades, orderbooks, quotes, funding_rates, openinterest, liquidations. Included by default if omitted. exclude ( list(str), str ): list of fields to exclude from response. Supported values are trades, orderbooks, quotes, funding_rates, openinterest, liquidations. Included by default if omitted. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max supported time frames. catalog_full_market_trades \u00b6 @deprecated ( \"catalog\" ) def catalog_full_market_trades ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with trades support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market trades that are available for the provided filter, as well as the time frames they are available catalog_full_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_full_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of supported metrics along with information for them like description, category, precision and assets for which a metric is supported. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all supported metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is supported. catalog_full_market_metrics \u00b6 @deprecated ( \"catalog\" ) def catalog_full_market_metrics ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketMetricsData Returns list of supported markets with metrics support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_full_market_candles \u00b6 @deprecated ( \"catalog\" ) def catalog_full_market_candles ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketCandlesData Returns list of available markets with candles support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_full_market_orderbooks \u00b6 @deprecated ( \"catalog\" ) def catalog_full_market_orderbooks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with orderbooks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets orderbooks that correspond to a filter catalog_full_market_quotes \u00b6 @deprecated ( \"catalog\" ) def catalog_full_market_quotes ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with quotes support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets quotes that correspond to a filter catalog_full_market_funding_rates \u00b6 @deprecated ( \"catalog\" ) def catalog_full_market_funding_rates ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with funding rates support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about funding rates that correspond to a filter catalog_full_market_contract_prices \u00b6 @deprecated ( \"catalog\" ) def catalog_full_market_contract_prices ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = None , limit : Optional [ str ] = None ) -> CatalogMarketContractPrices Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Format of the response. Supported values are json , json_stream . limit ( Optional[str] ): Limit of response items. none means no limit. Returns : CatalogMarketContractPrices : List of contract prices statistics. catalog_full_contract_prices_v2 \u00b6 def catalog_full_contract_prices_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of contract prices statistics. catalog_full_market_implied_volatility \u00b6 def catalog_full_market_implied_volatility ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = None , limit : Optional [ str ] = None ) -> CatalogMarketImpliedVolatility Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. limit ( Optional[str] ): Limit of response items. none means no limit. Returns : CatalogMarketImpliedVolatility : List of implied volatility statistics. catalog_full_market_greeks \u00b6 def catalog_full_market_greeks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with greeks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market greeks that correspond to the filter catalog_full_market_open_interest \u00b6 def catalog_full_market_open_interest ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with open interest support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market open interest that correspond to a filter catalog_full_market_liquidations \u00b6 def catalog_full_market_liquidations ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with liquidations support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market liquidations that correspond to a filter catalog_market_trades_v2 \u00b6 def catalog_market_trades_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market trades statistics. catalog_market_candles_v2 \u00b6 def catalog_market_candles_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market candles statistics. catalog_market_orderbooks_v2 \u00b6 def catalog_market_orderbooks_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market orderbooks statistics. catalog_market_quotes_v2 \u00b6 def catalog_market_quotes_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market quotes statistics. catalog_market_funding_rates_v2 \u00b6 def catalog_market_funding_rates_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market funding rates statistics. catalog_market_funding_rates_predicted_v2 \u00b6 def catalog_market_funding_rates_predicted_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market funding rates statistics. catalog_market_contract_prices_v2 \u00b6 def catalog_market_contract_prices_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of contract prices statistics. catalog_market_implied_volatility_v2 \u00b6 def catalog_market_implied_volatility_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of implied volatility statistics. catalog_market_greeks_v2 \u00b6 def catalog_market_greeks_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of greeks statistics. catalog_market_open_interest_v2 \u00b6 def catalog_market_open_interest_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market open interest statistics. catalog_market_liquidations_v2 \u00b6 def catalog_market_liquidations_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market liquidations statistics. catalog_market_metrics_v2 \u00b6 def catalog_market_metrics_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market metrics statistics. catalog_full_market_trades_v2 \u00b6 def catalog_full_market_trades_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market trades statistics. catalog_full_market_candles_v2 \u00b6 def catalog_full_market_candles_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market candles statistics. catalog_full_market_orderbooks_v2 \u00b6 def catalog_full_market_orderbooks_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market orderbooks statistics. catalog_full_market_quotes_v2 \u00b6 def catalog_full_market_quotes_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market quotes statistics. catalog_full_market_funding_rates_v2 \u00b6 def catalog_full_market_funding_rates_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market funding rates statistics. catalog_full_market_funding_rates_predicted_v2 \u00b6 def catalog_full_market_funding_rates_predicted_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market funding rates statistics. catalog_full_market_contract_prices_v2 \u00b6 def catalog_full_market_contract_prices_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of contract prices statistics. catalog_full_market_implied_volatility_v2 \u00b6 def catalog_full_market_implied_volatility_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of implied volatility statistics. catalog_full_market_greeks_v2 \u00b6 def catalog_full_market_greeks_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of greeks statistics. catalog_full_market_open_interest_v2 \u00b6 def catalog_full_market_open_interest_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market open interest statistics. catalog_full_market_liquidations_v2 \u00b6 def catalog_full_market_liquidations_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market liquidations statistics. catalog_full_market_metrics_v2 \u00b6 def catalog_full_market_metrics_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market metrics statistics. catalog_asset_metrics_v2 \u00b6 def catalog_asset_metrics_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset metrics. catalog_full_asset_metrics_v2 \u00b6 def catalog_full_asset_metrics_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset metrics. catalog_exchange_metrics_v2 \u00b6 def catalog_exchange_metrics_v2 ( exchanges : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : exchanges ( Optional[Union[str, List[str]]] ): Comma separated list of exchanges. By default all exchanges are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of exchange metrics. catalog_full_exchange_metrics_v2 \u00b6 def catalog_full_exchange_metrics_v2 ( exchanges : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : exchanges ( Optional[Union[str, List[str]]] ): Comma separated list of exchanges. By default all exchanges are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of exchange metrics. catalog_exchange_asset_metrics_v2 \u00b6 def catalog_exchange_asset_metrics_v2 ( exchange_assets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : exchange_assets ( Optional[Union[str, List[str]]] ): Comma separated list of exchange-assets. By default, all exchange-assets pairs are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of exchange-asset metrics. catalog_full_exchange_asset_metrics_v2 \u00b6 def catalog_full_exchange_asset_metrics_v2 ( exchange_assets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : exchange_assets ( Optional[Union[str, List[str]]] ): Comma separated list of exchange-assets. By default, all exchange-assets pairs are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of exchange-asset metrics. catalog_pair_metrics_v2 \u00b6 def catalog_pair_metrics_v2 ( pairs : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of pair metrics. catalog_full_pair_metrics_v2 \u00b6 def catalog_full_pair_metrics_v2 ( pairs : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of pair metrics. catalog_institution_metrics_v2 \u00b6 def catalog_institution_metrics_v2 ( institutions : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : institutions ( Optional[Union[str, List[str]]] ): Comma separated list of institutions. By default, all institutions are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of institution metrics. catalog_full_institution_metrics_v2 \u00b6 def catalog_full_institution_metrics_v2 ( institutions : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : institutions ( Optional[Union[str, List[str]]] ): Comma separated list of institutions. By default, all institutions are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of institution metrics. catalog_pair_candles_v2 \u00b6 def catalog_pair_candles_v2 ( pairs : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset pair candles statistics. catalog_index_candles_v2 \u00b6 def catalog_index_candles_v2 ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of index candles statistics. catalog_index_levels_v2 \u00b6 def catalog_index_levels_v2 ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all indexes are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of index levels. catalog_asset_chains_v2 \u00b6 def catalog_asset_chains_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset chains assets catalog_mempool_feerates_v2 \u00b6 def catalog_mempool_feerates_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of mempool feerates assets catalog_mining_pool_tips_summaries_v2 \u00b6 def catalog_mining_pool_tips_summaries_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of mining pool tips assets catalog_transaction_tracker_assets_v2 \u00b6 def catalog_transaction_tracker_assets_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of transaction tracker assets catalog_full_pair_candles_v2 \u00b6 def catalog_full_pair_candles_v2 ( pairs : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset pair candles statistics. catalog_full_index_candles_v2 \u00b6 def catalog_full_index_candles_v2 ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of index candles statistics. catalog_full_index_levels_v2 \u00b6 def catalog_full_index_levels_v2 ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all indexes are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of index levels. catalog_full_asset_chains_v2 \u00b6 def catalog_full_asset_chains_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset chains assets catalog_full_mempool_feerates_v2 \u00b6 def catalog_full_mempool_feerates_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of mempool feerates assets catalog_full_mining_pool_tips_summaries_v2 \u00b6 def catalog_full_mining_pool_tips_summaries_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of mining pool tips assets catalog_full_transaction_tracker_assets_v2 \u00b6 def catalog_full_transaction_tracker_assets_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of transaction tracker assets catalog_blockchain_accounts_v2 \u00b6 def catalog_blockchain_accounts_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of blockchain-v2/accounts assets using catalog-v2 catalog_blockchain_balance_updates_v2 \u00b6 def catalog_blockchain_balance_updates_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of blockchain-v2/balance-updates assets using catalog-v2 catalog_blockchain_blocks_v2 \u00b6 def catalog_blockchain_blocks_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of blockchain-v2/blocks assets using catalog-v2 catalog_blockchain_transactions_v2 \u00b6 def catalog_blockchain_transactions_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of blockchain-v2/transactions assets using catalog-v2 catalog_full_blockchain_accounts_v2 \u00b6 def catalog_full_blockchain_accounts_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : Full list of blockchain-v2/accounts assets using catalog-v2 catalog_full_blockchain_balance_updates_v2 \u00b6 def catalog_full_blockchain_balance_updates_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : Full list of blockchain-v2/balance-updates assets using catalog-v2 catalog_full_blockchain_blocks_v2 \u00b6 def catalog_full_blockchain_blocks_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : Full list of blockchain-v2/blocks assets using catalog-v2 catalog_full_blockchain_transactions_v2 \u00b6 def catalog_full_blockchain_transactions_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : Full list of blockchain-v2/transactions assets using catalog-v2 get_asset_alerts \u00b6 def get_asset_alerts ( assets : Union [ List [ str ], str ], alerts : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , include_heartbeats : Optional [ bool ] = None ) -> DataCollection Returns asset alerts for the specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' alerts ( list(str), str ): list of asset alert names page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. include_heartbeats ( bool ): If set to true, includes information about most recent time asset was successfully evaluated. Returns : DataCollection : Asset alerts timeseries. get_defi_balance_sheets \u00b6 def get_defi_balance_sheets ( defi_protocols : Union [ str , List [ str ]], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns Defi Balance Sheet records for specified DeFi protocols. Arguments : defi_protocols ( str, List[str] ): list of DeFi protocols like aave_v2_eth or protocol patterns like aave_v2_* or aave_*_eth or *_eth. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata get_asset_chains \u00b6 def get_asset_chains ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> AssetChainsDataCollection Returns the chains of blocks for the specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : AssetChainsDataCollection : Asset chains timeseries. get_asset_metrics \u00b6 def get_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_asset : Optional [ int ] = None , status : Optional [ str ] = None , start_hash : Optional [ str ] = None , end_hash : Optional [ str ] = None , min_confirmations : Optional [ int ] = None , null_as_zero : Optional [ bool ] = None , ignore_forbidden_errors : Optional [ bool ] = None , ignore_unsupported_errors : Optional [ bool ] = None ) -> DataCollection Returns requested metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"asset\", \"height\", or \"time\". Default is \"asset\". Metrics with 1b frequency are sorted by (asset, height, block_hash) tuples by default. Metrics with other frequencies are sorted by (asset, time) by default. If you want to sort 1d metrics by (time, asset) you should choose time as value for the sort parameter. Sorting by time is useful if you request metrics for a set of assets. limit_per_asset ( int ): How many entries per asset the result should contain. status ( str ): Which metric values do you want to see. Applicable only for \"reviewable\" metrics. You can find them in the /catalog/metrics endpoint. Default: \"all\". Supported: \"all\" \"flash\" \"reviewed\" \"revised\" start_hash ( str ): The start hash indicates the beginning block height for the set of data that are returned. Inclusive by default. Mutually exclusive with start_time and start_height. end_hash ( str ): The end hash indicates the ending block height for the set of data that are returned. Inclusive by default. Mutually exclusive with end_time and end_height. min_confirmations ( int ): Specifies how many blocks behind the chain tip block by block metrics (1b frequency) are based on. Default for btc is 2 and 99 for eth. null_as_zero ( bool ): Default: false. Nulls are represented as zeros in the response. ignore_forbidden_errors ( bool ): Default: false. Ignore HTTP 403 Forbidden errors ignore_unsupported_errors ( bool ): Default: false. Ignore errors for unsupported assets, metrics or frequencies. Returns : DataCollection : Asset Metrics timeseries. get_exchange_metrics \u00b6 def get_exchange_metrics ( exchanges : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. 'exchange', 'time'. Metrics are sorted by 'exchange' by default. limit_per_exchange ( int ): How many entries per exchange the result should contain. Returns : DataCollection : Asset Metrics timeseries. get_exchange_asset_metrics \u00b6 def get_exchange_asset_metrics ( exchange_assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange_asset : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchange-asset. Arguments : exchange_assets ( list(str), str ): A single exchange-asset pairs (e.g. \"binance-btc\" or a list of exchange-asset-pair to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"exchange_asset\", \"time\". Default is \"exchange_asset\". limit_per_exchange_asset ( int ): How many entries per exchange-asset the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries. get_pair_metrics \u00b6 def get_pair_metrics ( pairs : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns metrics books for specified asset-asset pairs. Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g.\"pair\", \"time\". \"pair\" by default limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries. get_pair_candles \u00b6 def get_pair_candles ( pairs : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns candles for specified asset pairs. Results are ordered by tuple (pair, time). Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Asset pair candles timeseries. get_institution_metrics \u00b6 def get_institution_metrics ( institutions : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_institution : Optional [ int ] = None ) -> DataCollection Returns metrics for specified institutions. Arguments : institutions ( list(str), str ): A single institution name or a list of institutions to return info for. metrics ( list(str), str ): list of institution-specific metric names, e.g. 'gbtc_total_assets' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"institution\", or \"time\". Default is \"institution\". limit_per_institution ( int ): How many entries per institution the result should contain. Returns : DataCollection : Asset Metrics timeseries. get_index_candles \u00b6 def get_index_candles ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_index : Optional [ int ] = None ) -> DataCollection Returns index candles for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_index ( int ): How many entries per index the result should contain. Returns : DataCollection : Index Candles timeseries. get_index_levels \u00b6 def get_index_levels ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_index : Optional [ int ] = None , include_verification : Optional [ bool ] = None ) -> DataCollection Returns index levels for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_index ( int ): How many entries per index the result should contain. include_verification : Default: False set to true, includes information about verification. Returns : DataCollection : Index Levels timeseries. get_index_constituents \u00b6 def get_index_constituents ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns index constituents for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Index Constituents timeseries. get_market_metrics \u00b6 def get_market_metrics ( markets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None , sort : Optional [ str ] = None ) -> DataCollection Returns market metrics for specified markets, frequency and date range. For more information on market metrics, see: https://docs.coinmetrics.io/api/v4#operation/getTimeseriesMarketMetrics Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' metrics ( list(str), str ): list of metrics, i.e. 'liquidations_reported_future_buy_units_1d'. See market metrics catalog for a list of supported metrics: https://docs.coinmetrics.io/api/v4#operation/getCatalogMarketMetrics frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. sort ( str ): How results will be sorted. Metrics are sorted by (market, time) by default. If you want to sort 1d metrics by (time, market) you should choose time as value for the sort parameter. Sorting by time is useful if you request metrics for a set of markets. Returns : DataCollection : Market Candles timeseries. get_market_candles \u00b6 def get_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market candles for specified markets, frequency and date range. For more information on market candles, see: https://docs.coinmetrics.io/info/markets/candles Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Candles timeseries. get_market_trades \u00b6 def get_market_trades ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None , min_confirmations : Optional [ int ] = None ) -> DataCollection Returns market trades for specified markets and date range. For more information on market trades, see: https://docs.coinmetrics.io/info/markets/trades Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. min_confirmations ( int ): Specifies how many blocks behind the chain tip trades are based on. Default is 2. Returns : DataCollection : Market Trades timeseries. get_market_open_interest \u00b6 def get_market_open_interest ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , granularity : Optional [ str ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market open interest for specified markets and date range. For more information on open interest, see: https://docs.coinmetrics.io/info/markets/openinterest Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. granularity ( str ): Downsampling granularity of market open interest. Supported values are raw, 1m, 1h, and 1d. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Open Interest timeseries. get_market_liquidations \u00b6 def get_market_liquidations ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market liquidations for specified markets and date range. For more information on liquidations, see: https://docs.coinmetrics.io/info/markets/liquidations Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Liquidations timeseries. get_market_funding_rates \u00b6 def get_market_funding_rates ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market funding rates for specified markets and date range. For more information on funding rates, see: https://docs.coinmetrics.io/info/markets/fundingrates Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Funding Rates timeseries. get_predicted_market_funding_rates \u00b6 def get_predicted_market_funding_rates ( markets : Union [ List [ str ], str ], start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns predicted funding rates for specified futures markets. Results are ordered by tuple (market, time). For more information on funding rates, see: https://docs.coinmetrics.io/info/markets/fundingrates Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Funding Rates timeseries. get_market_orderbooks \u00b6 def get_market_orderbooks ( markets : Union [ List [ str ], str ], granularity : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , depth_limit : Optional [ str ] = \"100\" , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market order books for specified markets and date range. For more information on order books, see: https://docs.coinmetrics.io/info/markets/orderbook Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' granularity ( str ): Downsampling granularity of market order books and quotes. Supported values are raw, 1m, 1h, and 1d. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. depth_limit ( str ): book depth limit, 100 levels max or full book that is not limited and provided as is from the exchange. Full book snapshots are collected once per hour timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Order Books timeseries. get_market_quotes \u00b6 def get_market_quotes ( markets : Union [ List [ str ], str ], granularity : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None , include_one_sided : Optional [ bool ] = None ) -> DataCollection Returns market quotes for specified markets and date range. For more information on quotes, see: https://docs.coinmetrics.io/info/markets/quotes Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' granularity (``): Downsampling granularity of market order books and quotes. Supported values are raw, 1m, 1h, and 1d. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. include_one_sided ( bool ): Default: false Include one-side and empty books in quotes response. Returns : DataCollection : Market Quotes timeseries. get_market_contract_prices \u00b6 def get_market_contract_prices ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , granularity : Optional [ str ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None , frequency : Optional [ str ] = None ) -> DataCollection Returns contract prices for specified markets. This includes index price and mark price that are used by the exchange for settlement and risk management purposes. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. granularity ( str ): Downsampling granularity of market contract prices. Supported values are raw, 1m, 1h, and 1d. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Contract Prices timeseries. get_market_implied_volatility \u00b6 def get_market_implied_volatility ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , granularity : Optional [ str ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns implied volatility for specified markets. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. granularity ( str - one of raw, 1m, 1h, and 1d ): Downsampling granularity of market implied volatility. Supported values are raw, 1m, 1h, and 1d. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Volatility timeseries. get_market_greeks \u00b6 def get_market_greeks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , granularity : Optional [ str ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns greeks for option markets. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. granularity ( str - one of raw, 1m, 1h, and 1d ): Downsampling granularity of market greeks. Supported values are raw, 1m, 1h, and 1d timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Volatility timeseries. get_mining_pool_tips_summary \u00b6 def get_mining_pool_tips_summary ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mining pool tips summaries for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mining Pool Tips timeseries. get_mempool_feerates \u00b6 def get_mempool_feerates ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = 200 , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mempool feerates for the specified assets. Note: for this method, page_size must be <= 200. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mempool Fee Rates timeseries. get_stream_asset_metrics \u00b6 def get_stream_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Asset Metrics timeseries stream. get_stream_market_trades \u00b6 def get_stream_market_trades ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market trades. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Trades timeseries stream. get_stream_market_orderbooks \u00b6 def get_stream_market_orderbooks ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST , depth_limit : Optional [ str ] = None ) -> CmStream Returns timeseries stream of market orderbooks. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. depth_limit ( str ): Default: 100. Supported Values: 100 \"full_book\". Book depth limit. Returns : CmStream : Market Orderbooks timeseries stream. get_stream_market_quotes \u00b6 def get_stream_market_quotes ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST , include_one_sided : Optional [ bool ] = None ) -> CmStream Returns timeseries stream of market quotes. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. include_one_sided ( bool ): Default: false. Include one-side and empty books in quotes response. Returns : CmStream : Market Quotes timeseries stream. get_stream_pair_quotes \u00b6 def get_stream_pair_quotes ( pairs : Union [ str , List [ str ]], aggregation_method : Optional [ str ] = None , backfill : Optional [ str ] = None ) -> CmStream Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. Use the /catalog-all/pairs endpoint for the full list of supported asset pairs. aggregation_method ( str ): The method to use for aggregation. backfill ( str ): What data should be sent upon a connection. By default the latest values are sent just before real-time data. Returns : CmStream : get_stream_asset_quotes \u00b6 def get_stream_asset_quotes ( assets : Union [ str , List [ str ]], aggregation_method : Optional [ str ] = None , backfill : Optional [ str ] = None ) -> CmStream Arguments : assets ( Union[str, List[str]] ): Comma separated list of assets. Use the /catalog-all/assets endpoint for the full list of supported assets. aggregation_method ( str ): The method to use for aggregation. backfill ( str ): What data should be sent upon a connection. By default the latest values are sent just before real-time data. Returns : CmStream : get_stream_market_candles \u00b6 def get_stream_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market candles. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. frequency ( str ): Candle duration. Supported values are 1m, 5m, 10m, 15m, 30m, 1h, 4h, 1d. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Candles timeseries stream. get_stream_index_levels \u00b6 def get_stream_index_levels ( indexes : Union [ List [ str ], str ], include_verification : Optional [ bool ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of index levels. Arguments : indexes ( list(str), str ): list of indxes or market patterns such as CMBIBTC backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. include_verification : Default: False If set to true, includes information about verification. Returns : CmStream : Index levels data timeseries stream. get_stream_market_liquidations \u00b6 def get_stream_market_liquidations ( markets : Union [ str , List [ str ]], backfill : Optional [ str ] = None ) -> CmStream Returns timeseries stream for market liquidations Arguments : markets ( Union[str, List[str]] ): Comma separated list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future . Use the /catalog-all/markets endpoint for the full list of supported markets. backfill ( Optional[str] ): What data should be sent upon a connection. By default the latest values are sent just before real-time data. Returns : CmStream : Market liquidations timeseries stream get_stream_market_open_interest \u00b6 def get_stream_market_open_interest ( markets : Union [ str , List [ str ]], backfill : Optional [ str ] = None ) -> CmStream Arguments : markets ( Union[str, List[str]] ): Comma separated list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future . Use the /catalog-all/markets endpoint for the full list of supported markets. backfill ( Optional[str] ): What data should be sent upon a connection. By default the latest values are sent just before real-time data. Returns : CmStream : get_list_of_blocks_v2 \u00b6 def get_list_of_blocks_v2 ( asset : str , block_hashes : Optional [ Union [ List [ str ], str ]] = None , heights : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , chain : Optional [ bool ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain blocks metadata. Arguments : asset ( str ): Asset name block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. heights ( str, list(str) ): Optional comma separated list of block heights to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time chain ( str ): Default: \"main\" Chain type. Supported values are main and all (includes both main and stale). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata get_list_of_accounts_v2 \u00b6 def get_list_of_accounts_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata get_list_of_sub_accounts_v2 \u00b6 def get_list_of_sub_accounts_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain sub-accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata get_list_of_transactions_v2 \u00b6 def get_list_of_transactions_v2 ( asset : str , txids : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , chain : Optional [ str ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain transactions metadata. Arguments : asset ( str ): Asset name txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time chain ( str ): Default: \"main\". Chain type. Supported values are main and all (includes both main and stale). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of transaction metadata get_list_of_balance_updates_v2 \u00b6 def get_list_of_balance_updates_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , sub_accounts : Optional [ Union [ List [ str ], str ]] = None , limit_per_account : Optional [ int ] = None , txids : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , include_sub_accounts : Optional [ bool ] = None , chain : Optional [ str ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts balance updates. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. limit_per_account ( int ): How many entries per account the result should contain. It is applicable when multiple accounts are requested. txids ( str, list(str) ): Optional comma separated list of transaction ids to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time include_sub_accounts ( bool ): bool indicating if the response should contain sub-accounts. chain : Chain type. Supported values are main and all (includes both main and stale). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of balance updates get_full_block_v2 \u00b6 def get_full_block_v2 ( asset : str , block_hash : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain block with all transactions and balance updates. Arguments : asset ( str ): Asset name block_hash ( str ): block hash include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str), any) : blockchain block data get_full_transaction_v2 \u00b6 def get_full_transaction_v2 ( asset : str , txid : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates. Arguments : asset ( str ): Asset name txid ( str ): transaction identifier include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str), any) : block transaction data get_full_transaction_for_block_v2 \u00b6 def get_full_transaction_for_block_v2 ( asset : str , block_hash : str , txid : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates for a specific block. Arguments : asset ( str ): Asset name block_hash ( str ): block hash txid ( str ): transaction identifier include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str, Any)) : block transaction data with balance updates get_list_of_balance_updates_for_account_v2 \u00b6 def get_list_of_balance_updates_for_account_v2 ( asset : str , account : str , txids : Optional [ Union [ str , List [ str ]]] = None , block_hashes : Optional [ Union [ str , List [ str ]]] = None , include_counterparties : Optional [ bool ] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , include_sub_accounts : Optional [ bool ] = None , chain : Optional [ str ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : asset ( Optional[str] ): Asset name. account ( Optional[str] ): Account id. txids ( Union[str, List[str]] ): Optional comma separated list of transaction identifiers (txid) to filter a response. The list must contain a single element for Community users. block_hashes ( Union[str, List[str]] ): Optional comma separated list of block hashes to filter a response. The list must contain a single element for Community users. include_counterparties ( bool ): Include information about the counterparties balance updates. start_time ( str ): Start of the time interval. This field refers to the time field in the response. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Inclusive by default. Mutually exclusive with start_height . UTC timezone by default. Z suffix is optional and timezone parameter has a priority over it. If start_time is omitted, response will include time series from the earliest time available. This parameter is disabled for Community users. end_time ( str ): End of the time interval. This field refers to the time field in the response. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Inclusive by default. Mutually exclusive with end_height . UTC timezone by default. Z suffix is optional and timezone parameter has a priority over it. If end_time is omitted, response will include time series up to the latest time available. This parameter is disabled for Community users. start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Inclusive by default. Mutually exclusive with start_time . This parameter is disabled for Community users. end_height ( int ): The end height indicates the ending block height for the set of data that are returned. Inclusive by default. Mutually exclusive with end_time . This parameter is disabled for Community users. start_chain_sequence_number ( int ): Start of the chain_sequence_number interval. This parameter is disabled for Community users. end_chain_sequence_number ( int ): End of the chain_sequence_number interval. This parameter is disabled for Community users. include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts. This parameter is disabled for Community users. chain ( str ): Chain type. Supported values are main and all (includes both main and stale). This parameter is disabled for Community users. start_inclusive ( bool ): Inclusive or exclusive corresponding start_* parameters. This parameter is disabled for Community users. end_inclusive ( bool ): Inclusive or exclusive corresponding end_* parameters. This parameter is disabled for Community users. timezone ( str ): Timezone name for start_time and end_time timestamps. This parameter does not modify the output times, which are always UTC . Format is defined by TZ database. page_size ( int ): Number of items per single page of results. This parameter is disabled for Community users. paging_from ( str ): Where does the first page start, at the start of the interval or at the end. next_page_token ( str ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : Blockchain balance updates for account. get_transaction_tracker \u00b6 def get_transaction_tracker ( asset : str , addresses : Optional [ Union [ List [ str ], str ]] = None , txids : Optional [ Union [ List [ str ], str ]] = None , replacements_for_txids : Optional [ Union [ List [ str ], str ]] = None , replacements_only : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , unconfirmed_only : Optional [ bool ] = None ) -> TransactionTrackerDataCollection Returns status updates for the specified or all transactions. Arguments : asset ( str ): Asset name txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to track. replacements_for_txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to get the corresponding replacement transactions for. Mutually exclusive with txids. replacements_only ( bool ): Boolean indicating if the response should contain only the replacement transactions. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : TransactionTrackerDataCollection : status updates for the specified or all transactions. get_taxonomy_assets \u00b6 def get_taxonomy_assets ( assets : Optional [ List [ str ]] = None , class_ids : Optional [ List [ str ]] = None , sector_ids : Optional [ List [ str ]] = None , subsector_ids : Optional [ List [ str ]] = None , classification_start_time : Optional [ str ] = None , classification_end_time : Optional [ str ] = None , end_inclusive : Optional [ bool ] = None , start_inclusive : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , version : Optional [ str ] = None ) -> DataCollection Returns assets with information about their sector, industry, and industry group IDs. By default reutrns all covered assets Arguments : assets ( Optional[List[str]] ): Asset names class_ids ( Optional[List[str]] ): List of class identifiers. sector_ids ( Optional[List[str]] ): Lst of sector identifiers. subsector_ids ( Optional[List[str]] ): List of subsector identifiers classification_start_time ( Optional[str] ): Start time for the taxonomy assets. ISO-8601 format date. Inclusive by default classification_end_time ( Optional[str] ): End time for the taxonomy assets. ISO-8601 format date. Inclusive by default start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. page_size ( Optional[int] ): Page size for # of assets to return, will default to 100 paging_from ( Optional[str] ): Which direction to page from \"start\" or \"end\". \"end\" by default version ( Optional[str] ): Version to query, default is \"latest\". Returns : Datacollection : Returns a data collection containing the taxonomy assets get_taxonomy_assets_metadata \u00b6 def get_taxonomy_assets_metadata ( start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , version : Optional [ str ] = None ) -> DataCollection Returns metadata about the assets, sectors, and industries included in the CM taxonomy Arguments : start_time ( Optional[Union[datetime, date, str]] ): Start time for the taxonomy version file. ISO-8601 format date. Inclusive by default end_time ( Optional[Union[datetime, date, str]] ): End time for the taxonomy version file. ISO-8601 format date. Exclusive by default start_inclusive ( str ): Start time of taxonomy version. end_inclusive ( str ): End time of taxonomy version. page_size ( Optional[int] ): Page size for # of asset metadata to return, will default to 100 paging_from ( Optional[str] ): Which direction to page from \"start\" or \"end\". \"end\" by default version ( Optional[str] ): Version to query, default is \"latest\". Returns : Datacollection : Returns a data collection containing the taxonomy assets get_asset_profiles \u00b6 def get_asset_profiles ( assets : Optional [ Union [ List [ str ], str ]] = None , full_names : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None ) -> DataCollection Returns profile data for assets, ordered by asset Arguments : assets ( Optional[Union[List[str], str]] ): Returns profile data for assets. full_names ( Optional[Union[List[str], str]] ): Comma separated list of asset full names. By default profile data for all assets is returned. Mutually exclusive with assets parameter. page_size ( int ): Number of items per single page of results. paging_from ( int ): Where does the first page start, at the \"start\" of the interval or at the \"end\" reference_data_asset_metrics \u00b6 def reference_data_asset_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of asset metrics metadata. reference_data_markets \u00b6 def reference_data_markets ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of markets metadata. reference_data_exchange_metrics \u00b6 def reference_data_exchange_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of exchange metrics metadata. reference_data_exchange_asset_metrics \u00b6 def reference_data_exchange_asset_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of exchange asset metrics metadata. reference_data_pair_metrics \u00b6 def reference_data_pair_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of pair metrics metadata. reference_data_institution_metrics \u00b6 def reference_data_institution_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of institution metrics metadata. reference_data_assets \u00b6 def reference_data_assets ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of assets metadata. reference_data_exchanges \u00b6 def reference_data_exchanges ( exchanges : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : exchanges ( Optional[Union[str, List[str]]] ): Comma separated list of exchanges. By default all exchanges are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of exchanges metadata. reference_data_indexes \u00b6 def reference_data_indexes ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all indexes are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of indexes metadata. reference_data_pairs \u00b6 def reference_data_pairs ( pairs : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of pairs metadata. reference_data_market_metrics \u00b6 def reference_data_market_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of market metrics metadata. security_master_assets \u00b6 def security_master_assets ( assets : Optional [ Union [ str , List [ str ]]] = None , codes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma-separated list of assets to query. Mutually exclusive with codes . codes ( Optional[Union[str, List[str]]] ): Comma-separated list of ten-digit alphanumeric identifying codes. Mutually exclusive with assets . page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : List of assets and their metadata in security master security_master_markets \u00b6 def security_master_markets ( type : Optional [ str ] = None , markets : Optional [ Union [ str , List [ str ]]] = None , symbol : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : type ( Optional[str] ): Type of markets. markets ( Optional[Union[str, List[str]]] ): List of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. exchange ( Optional[str] ): Unique name of an exchange. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : List of security master entries. get_snapshots_of_asset_metric_constituents \u00b6 def get_snapshots_of_asset_metric_constituents ( metric : str , at_time : Optional [ str ] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , next_page_token : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None ) -> DataCollection Arguments : metric ( str ): Target metric name. at_time ( Optional[str] ): Returns constituents at a specified date. Value now can be specified to get the current constituents. Mutually exclusive with start_time and/or end_time . end_time ( Optional[Union[datetime, date, str]] ): Start of the time interval, inclusive. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Mutually exclusive with at_time . start_time ( Optional[Union[datetime, date, str]] ): End of the time interval, inclusive. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Mutually exclusive with at_time . next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. Returns : DataCollection : Snapshots of asset metric constituents. get_timeframes_of_asset_metric_constituents \u00b6 def get_timeframes_of_asset_metric_constituents ( metric : str , constituents : Optional [ Union [ str , List [ str ]]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , next_page_token : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None ) -> DataCollection Arguments : metric ( str ): Target metric name. constituents ( Optional[Union[str, List[str]]] ): Comma separated list of constituents. By default all constituents are returned. Different asset metrics may have different constituents. For example, constituents for volume_trusted_spot_usd_1d are exchanges. end_time ( Optional[Union[datetime, date, str]] ): Start of the time interval, inclusive. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Mutually exclusive with at_time . start_time ( Optional[Union[datetime, date, str]] ): End of the time interval, inclusive. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Mutually exclusive with at_time . next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. Returns : DataCollection : List of timeframes. blockchain_metadata_tags \u00b6 def blockchain_metadata_tags ( type : Optional [ str ] = None , page_size : Optional [ int ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : type ( Optional[str] ): The type of a tag. page_size ( Optional[int] ): Number of items per single page of results. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : List of tags. blockchain_metadata_tagged_entities \u00b6 def blockchain_metadata_tagged_entities ( tags : Optional [ Union [ str , List [ str ]]] = None , entities : Optional [ Union [ str , List [ str ]]] = None , locations : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : tags ( Optional[Union[str, List[str]]] ): Comma separated list of tags. Mutually exclusive with entities parameter. Currently a single tag is allowed per each request. entities ( Optional[Union[str, List[str]]] ): Comma separated list of entities. Mutually exclusive with tags parameter. locations ( Optional[Union[str, List[str]]] ): Comma separated list of entity locations (asset representation where the entity has been tagged). Currently a single entity location is allowed per each request. page_size ( Optional[int] ): Number of items per single page of results. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : List of tagged entities. Ordered by tuple (entity, tag, location, start_time) if requested by providing entities parameter. Ordered by tuple (tag, location, entity, started_time) if requested by providing tags parameter.","title":"API Client Spec"},{"location":"api_client.html#coinmetricsapi_client","text":"","title":"coinmetrics.api_client"},{"location":"api_client.html#coinmetricsclient-objects","text":"class CoinMetricsClient ()","title":"CoinMetricsClient Objects"},{"location":"api_client.html#catalog_assets","text":"@deprecated ( \"catalog\" ) def catalog_assets ( assets : Optional [ Union [ List [ str ], str ]] = None , include : Optional [ Union [ List [ str ], str ]] = None , exclude : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetsData Returns meta information about available assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. include ( list(str), str ): list of fields to include in response. Supported values are metrics, markets, exchanges. Included by default if omitted. exclude ( list(str), str ): list of fields to include in response. Supported values are metrics, markets, exchanges. Included by default if omitted. Returns : list(dict(str, any)) : Information that is available for requested assets, like: Full name, metrics and available frequencies, markets, exchanges, etc.","title":"catalog_assets"},{"location":"api_client.html#catalog_asset_alerts","text":"@deprecated ( \"catalog\" ) def catalog_asset_alerts ( assets : Optional [ Union [ str , List [ str ]]] = None , alerts : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogAssetAlertsData Arguments : assets ( Union[str, List[str]] ): Comma separated list of assets. By default all assets are returned. alerts ( Union[str, List[str]] ): Comma separated list of asset alert names. By default all asset alerts are returned. Returns : CatalogAssetAlertsData : List of asset alerts.","title":"catalog_asset_alerts"},{"location":"api_client.html#catalog_asset_chains","text":"@deprecated ( \"catalog\" ) def catalog_asset_chains ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogAssetChainsData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogAssetChainsData : List of asset chains assets","title":"catalog_asset_chains"},{"location":"api_client.html#catalog_mempool_feerates","text":"@deprecated ( \"catalog\" ) def catalog_mempool_feerates ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogMempoolFeeratesData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogMempoolFeeratesData : List of mempool feerates assets","title":"catalog_mempool_feerates"},{"location":"api_client.html#catalog_mining_pool_tips_summaries","text":"@deprecated ( \"catalog\" ) def catalog_mining_pool_tips_summaries ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogMiningPoolTipsData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogMiningPoolTipsData : List of mining pool tips assets","title":"catalog_mining_pool_tips_summaries"},{"location":"api_client.html#catalog_transaction_tracker_assets","text":"@deprecated ( \"catalog\" ) def catalog_transaction_tracker_assets ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogTransactionTrackerData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogTransactionTrackerData : List of transaction tracker assets","title":"catalog_transaction_tracker_assets"},{"location":"api_client.html#catalog_asset_pairs","text":"@deprecated ( \"catalog\" ) def catalog_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairsData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested asset-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_asset_pairs"},{"location":"api_client.html#catalog_asset_metrics","text":"@deprecated ( \"catalog\" ) def catalog_asset_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of available asset metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single asset metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about asset metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_asset_metrics"},{"location":"api_client.html#catalog_exchange_metrics","text":"@deprecated ( \"catalog\" ) def catalog_exchange_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of available exchange metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single exchange metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about exchange metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_exchange_metrics"},{"location":"api_client.html#catalog_exchange_asset_metrics","text":"@deprecated ( \"catalog\" ) def catalog_exchange_asset_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogExchangeAssetMetricsData Returns list of available exchange metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single exchange metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about exchange metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_exchange_asset_metrics"},{"location":"api_client.html#catalog_pair_metrics","text":"@deprecated ( \"catalog\" ) def catalog_pair_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogPairMetricsData Returns list of available pair metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single pair metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about pair metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_pair_metrics"},{"location":"api_client.html#catalog_institution_metrics","text":"@deprecated ( \"catalog\" ) def catalog_institution_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogInstitutionMetricsData Returns list of available institution metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single institution metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about institution metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_institution_metrics"},{"location":"api_client.html#catalog_asset_pair_candles","text":"@deprecated ( \"catalog\" ) def catalog_asset_pair_candles ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairCandlesData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Returns a list of available asset pair candles along with the time ranges of available data per candle duration.","title":"catalog_asset_pair_candles"},{"location":"api_client.html#catalog_exchanges","text":"@deprecated ( \"catalog\" ) def catalog_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangesData Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all available exchanges are returned. Returns : list(dict(str, any)) : Information that is available for requested exchanges, like: markets, min and max time available.","title":"catalog_exchanges"},{"location":"api_client.html#catalog_exchange_assets","text":"@deprecated ( \"catalog\" ) def catalog_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangeAssetsData Returns meta information about available exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested exchange-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_exchange_assets"},{"location":"api_client.html#catalog_indexes","text":"@deprecated ( \"catalog\" ) def catalog_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogIndexesData Returns meta information about available indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all available indexes are returned. Returns : list(dict(str, any)) : Information that is available for requested indexes, like: Full name, and available frequencies.","title":"catalog_indexes"},{"location":"api_client.html#catalog_index_candles","text":"@deprecated ( \"catalog\" ) def catalog_index_candles ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogMarketCandlesData Returns meta information about available index candles. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all available index candles are returned. Returns : list(dict(str, any)) : Information that is available for requested index candles, like: Full name, and available frequencies.","title":"catalog_index_candles"},{"location":"api_client.html#catalog_institutions","text":"@deprecated ( \"catalog\" ) def catalog_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogInstitutionsData Returns meta information about available institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested institution like metrics and their respective frequencies and time ranges.","title":"catalog_institutions"},{"location":"api_client.html#catalog_markets","text":"@deprecated ( \"catalog\" ) def catalog_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , include : Optional [ Union [ List [ str ], str ]] = None , exclude : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogMarketsData Returns list of available markets that correspond to a filter. If no filter is set, returns all available assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. include ( list(str), str ): list of fields to include in response. Supported values are trades, orderbooks, quotes, funding_rates, openinterest, liquidations. Included by default if omitted. exclude ( list(str), str ): list of fields to exclude from response. Supported values are trades, orderbooks, quotes, funding_rates, openinterest, liquidations. Included by default if omitted. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_markets"},{"location":"api_client.html#catalog_market_trades","text":"@deprecated ( \"catalog\" ) def catalog_market_trades ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with trades support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market trades that are available for the provided filter, as well as the time frames they are available","title":"catalog_market_trades"},{"location":"api_client.html#catalog_metrics","text":"@deprecated ( \"catalog\" ) def catalog_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of available metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_metrics"},{"location":"api_client.html#catalog_market_metrics","text":"@deprecated ( \"catalog\" ) def catalog_market_metrics ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketMetricsData Returns list of available markets with metrics support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_market_metrics"},{"location":"api_client.html#catalog_market_candles","text":"@deprecated ( \"catalog\" ) def catalog_market_candles ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketCandlesData Returns list of available markets with candles support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_market_candles"},{"location":"api_client.html#catalog_market_orderbooks","text":"@deprecated ( \"catalog\" ) def catalog_market_orderbooks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketOrderbooksData Returns a list of markets with orderbooks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets orderbooks that correspond to a filter","title":"catalog_market_orderbooks"},{"location":"api_client.html#catalog_market_quotes","text":"@deprecated ( \"catalog\" ) def catalog_market_quotes ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with quotes support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets quotes that correspond to a filter","title":"catalog_market_quotes"},{"location":"api_client.html#catalog_market_funding_rates","text":"@deprecated ( \"catalog\" ) def catalog_market_funding_rates ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with funding rates support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about funding rates that correspond to a filter","title":"catalog_market_funding_rates"},{"location":"api_client.html#catalog_market_contract_prices","text":"@deprecated ( \"catalog\" ) def catalog_market_contract_prices ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = None , limit : Optional [ str ] = None ) -> CatalogMarketContractPrices Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Format of the response. Supported values are json , json_stream . limit ( Optional[str] ): Limit of response items. none means no limit. Returns : CatalogMarketContractPrices : List of contract prices statistics.","title":"catalog_market_contract_prices"},{"location":"api_client.html#catalog_market_implied_volatility","text":"@deprecated ( \"catalog\" ) def catalog_market_implied_volatility ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = None , limit : Optional [ str ] = None ) -> CatalogMarketImpliedVolatility Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Format of the response. Supported values are json , json_stream . limit ( Optional[str] ): Limit of response items. none means no limit. Returns : CatalogMarketImpliedVolatility : List of implied volatility statistics.","title":"catalog_market_implied_volatility"},{"location":"api_client.html#catalog_market_greeks","text":"@deprecated ( \"catalog\" ) def catalog_market_greeks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with greeks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market greeks that correspond to the filter","title":"catalog_market_greeks"},{"location":"api_client.html#catalog_market_open_interest","text":"@deprecated ( \"catalog\" ) def catalog_market_open_interest ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with open interest support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market open interest that correspond to a filter","title":"catalog_market_open_interest"},{"location":"api_client.html#catalog_market_liquidations","text":"@deprecated ( \"catalog\" ) def catalog_market_liquidations ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with liquidations support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market liquidations that correspond to a filter","title":"catalog_market_liquidations"},{"location":"api_client.html#catalog_full_assets","text":"@deprecated ( \"catalog\" ) def catalog_full_assets ( assets : Optional [ Union [ List [ str ], str ]] = None , include : Optional [ Union [ List [ str ], str ]] = None , exclude : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetsData Returns meta information about supported assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all supported assets are returned. include ( list(str), str ): list of fields to include in response. Supported values are metrics, markets, exchanges. Included by default if omitted. exclude ( list(str), str ): list of fields to exclude from response. Supported values are metrics, markets, exchanges. Included by default if omitted. Returns : list(dict(str, any)) : Information that is supported for requested assets, like: Full name, metrics and supported frequencies, markets, exchanges, etc.","title":"catalog_full_assets"},{"location":"api_client.html#catalog_full_asset_metrics","text":"@deprecated ( \"catalog\" ) def catalog_full_asset_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of all available asset metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single asset metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about asset metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_full_asset_metrics"},{"location":"api_client.html#catalog_full_asset_alerts","text":"@deprecated ( \"catalog\" ) def catalog_full_asset_alerts ( assets : Optional [ Union [ str , List [ str ]]] = None , alerts : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogAssetAlertsData Arguments : assets ( Union[str, List[str]] ): Comma separated list of assets. By default all assets are returned. alerts ( Union[str, List[str]] ): Comma separated list of asset alert names. By default all asset alerts are returned. Returns : CatalogAssetAlertsData : List of asset alerts.","title":"catalog_full_asset_alerts"},{"location":"api_client.html#catalog_full_asset_chains","text":"@deprecated ( \"catalog\" ) def catalog_full_asset_chains ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogAssetChainsData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogAssetChainsData : List of asset chains assets","title":"catalog_full_asset_chains"},{"location":"api_client.html#catalog_full_mempool_feerates","text":"@deprecated ( \"catalog\" ) def catalog_full_mempool_feerates ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogMempoolFeeratesData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogMempoolFeeratesData : List of mempool feerates assets","title":"catalog_full_mempool_feerates"},{"location":"api_client.html#catalog_full_mining_pool_tips_summaries","text":"@deprecated ( \"catalog\" ) def catalog_full_mining_pool_tips_summaries ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogMiningPoolTipsData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogMiningPoolTipsData : List of mining pool tips assets","title":"catalog_full_mining_pool_tips_summaries"},{"location":"api_client.html#catalog_full_transaction_tracker_assets","text":"@deprecated ( \"catalog\" ) def catalog_full_transaction_tracker_assets ( assets : Optional [ Union [ str , List [ str ]]] = None ) -> CatalogTransactionTrackerData Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. Returns : CatalogTransactionTrackerData : List of transaction tracker assets","title":"catalog_full_transaction_tracker_assets"},{"location":"api_client.html#catalog_full_asset_pairs","text":"@deprecated ( \"catalog\" ) def catalog_full_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairsData Returns meta information about supported asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested asset-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_full_asset_pairs"},{"location":"api_client.html#catalog_full_pair_metrics","text":"@deprecated ( \"catalog\" ) def catalog_full_pair_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogPairMetricsData Returns list of all available pair metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single pair metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about pair metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_full_pair_metrics"},{"location":"api_client.html#catalog_full_institution_metrics","text":"@deprecated ( \"catalog\" ) def catalog_full_institution_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogInstitutionMetricsData Returns list of available institution metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single institution metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about institution metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_full_institution_metrics"},{"location":"api_client.html#catalog_full_asset_pair_candles","text":"@deprecated ( \"catalog\" ) def catalog_full_asset_pair_candles ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogAssetPairCandlesData Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Returns a list of available asset pair candles along with the time ranges of available data per candle duration.","title":"catalog_full_asset_pair_candles"},{"location":"api_client.html#catalog_full_exchanges","text":"@deprecated ( \"catalog\" ) def catalog_full_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangesData Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all supported exchanges are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchanges, like: markets, min and max time supported.","title":"catalog_full_exchanges"},{"location":"api_client.html#catalog_full_exchange_assets","text":"@deprecated ( \"catalog\" ) def catalog_full_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogExchangeAssetsData Returns meta information about supported exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchange-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_full_exchange_assets"},{"location":"api_client.html#catalog_full_exchange_metrics","text":"@deprecated ( \"catalog\" ) def catalog_full_exchange_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of all available exchange metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single exchange metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about exchange metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_full_exchange_metrics"},{"location":"api_client.html#catalog_full_exchange_asset_metrics","text":"@deprecated ( \"catalog\" ) def catalog_full_exchange_asset_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogExchangeAssetMetricsData Returns list of available exchange metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single exchange metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about exchange metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_full_exchange_asset_metrics"},{"location":"api_client.html#catalog_full_indexes","text":"@deprecated ( \"catalog\" ) def catalog_full_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogIndexesData Returns meta information about supported indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all supported indexes are returned. Returns : list(dict(str, any)) : Information that is supported for requested indexes, like: Full name, and supported frequencies.","title":"catalog_full_indexes"},{"location":"api_client.html#catalog_full_index_candles","text":"@deprecated ( \"catalog\" ) def catalog_full_index_candles ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogMarketCandlesData Returns meta information about supported index candles. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all supported indexes are returned. Returns : list(dict(str, any)) : Information that is supported for requested index candles, like: Full name, and supported frequencies.","title":"catalog_full_index_candles"},{"location":"api_client.html#catalog_full_institutions","text":"@deprecated ( \"catalog\" ) def catalog_full_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> CatalogInstitutionsData Returns meta information about supported institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested institution like metrics and their respective frequencies and time ranges.","title":"catalog_full_institutions"},{"location":"api_client.html#catalog_full_markets","text":"@deprecated ( \"catalog\" ) def catalog_full_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , include : Optional [ str ] = None , exclude : Optional [ str ] = None ) -> CatalogMarketsData Returns list of supported markets that correspond to a filter. If no filter is set, returns all supported assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. include ( list(str), str ): ist of fields to include in response. Supported values are trades, orderbooks, quotes, funding_rates, openinterest, liquidations. Included by default if omitted. exclude ( list(str), str ): list of fields to exclude from response. Supported values are trades, orderbooks, quotes, funding_rates, openinterest, liquidations. Included by default if omitted. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max supported time frames.","title":"catalog_full_markets"},{"location":"api_client.html#catalog_full_market_trades","text":"@deprecated ( \"catalog\" ) def catalog_full_market_trades ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with trades support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market trades that are available for the provided filter, as well as the time frames they are available","title":"catalog_full_market_trades"},{"location":"api_client.html#catalog_full_metrics","text":"@deprecated ( \"catalog\" ) def catalog_full_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> CatalogMetricsData Returns list of supported metrics along with information for them like description, category, precision and assets for which a metric is supported. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all supported metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is supported.","title":"catalog_full_metrics"},{"location":"api_client.html#catalog_full_market_metrics","text":"@deprecated ( \"catalog\" ) def catalog_full_market_metrics ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketMetricsData Returns list of supported markets with metrics support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_full_market_metrics"},{"location":"api_client.html#catalog_full_market_candles","text":"@deprecated ( \"catalog\" ) def catalog_full_market_candles ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketCandlesData Returns list of available markets with candles support along woth time ranges of available data per metric. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_full_market_candles"},{"location":"api_client.html#catalog_full_market_orderbooks","text":"@deprecated ( \"catalog\" ) def catalog_full_market_orderbooks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with orderbooks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets orderbooks that correspond to a filter","title":"catalog_full_market_orderbooks"},{"location":"api_client.html#catalog_full_market_quotes","text":"@deprecated ( \"catalog\" ) def catalog_full_market_quotes ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with quotes support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets quotes that correspond to a filter","title":"catalog_full_market_quotes"},{"location":"api_client.html#catalog_full_market_funding_rates","text":"@deprecated ( \"catalog\" ) def catalog_full_market_funding_rates ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with funding rates support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about funding rates that correspond to a filter","title":"catalog_full_market_funding_rates"},{"location":"api_client.html#catalog_full_market_contract_prices","text":"@deprecated ( \"catalog\" ) def catalog_full_market_contract_prices ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = None , limit : Optional [ str ] = None ) -> CatalogMarketContractPrices Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Format of the response. Supported values are json , json_stream . limit ( Optional[str] ): Limit of response items. none means no limit. Returns : CatalogMarketContractPrices : List of contract prices statistics.","title":"catalog_full_market_contract_prices"},{"location":"api_client.html#catalog_full_contract_prices_v2","text":"def catalog_full_contract_prices_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of contract prices statistics.","title":"catalog_full_contract_prices_v2"},{"location":"api_client.html#catalog_full_market_implied_volatility","text":"def catalog_full_market_implied_volatility ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = None , limit : Optional [ str ] = None ) -> CatalogMarketImpliedVolatility Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. limit ( Optional[str] ): Limit of response items. none means no limit. Returns : CatalogMarketImpliedVolatility : List of implied volatility statistics.","title":"catalog_full_market_implied_volatility"},{"location":"api_client.html#catalog_full_market_greeks","text":"def catalog_full_market_greeks ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with greeks support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market greeks that correspond to the filter","title":"catalog_full_market_greeks"},{"location":"api_client.html#catalog_full_market_open_interest","text":"def catalog_full_market_open_interest ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of markets with open interest support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market open interest that correspond to a filter","title":"catalog_full_market_open_interest"},{"location":"api_client.html#catalog_full_market_liquidations","text":"def catalog_full_market_liquidations ( markets : Optional [ Union [ List [ str ], str ]] = None , market_type : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> CatalogMarketTradesData Returns a list of all markets with liquidations support along with the time ranges of available data. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' market_type ( str ): Type of market: \"spot\", \"future\", \"option\" exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about market liquidations that correspond to a filter","title":"catalog_full_market_liquidations"},{"location":"api_client.html#catalog_market_trades_v2","text":"def catalog_market_trades_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market trades statistics.","title":"catalog_market_trades_v2"},{"location":"api_client.html#catalog_market_candles_v2","text":"def catalog_market_candles_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market candles statistics.","title":"catalog_market_candles_v2"},{"location":"api_client.html#catalog_market_orderbooks_v2","text":"def catalog_market_orderbooks_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market orderbooks statistics.","title":"catalog_market_orderbooks_v2"},{"location":"api_client.html#catalog_market_quotes_v2","text":"def catalog_market_quotes_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market quotes statistics.","title":"catalog_market_quotes_v2"},{"location":"api_client.html#catalog_market_funding_rates_v2","text":"def catalog_market_funding_rates_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market funding rates statistics.","title":"catalog_market_funding_rates_v2"},{"location":"api_client.html#catalog_market_funding_rates_predicted_v2","text":"def catalog_market_funding_rates_predicted_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market funding rates statistics.","title":"catalog_market_funding_rates_predicted_v2"},{"location":"api_client.html#catalog_market_contract_prices_v2","text":"def catalog_market_contract_prices_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of contract prices statistics.","title":"catalog_market_contract_prices_v2"},{"location":"api_client.html#catalog_market_implied_volatility_v2","text":"def catalog_market_implied_volatility_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of implied volatility statistics.","title":"catalog_market_implied_volatility_v2"},{"location":"api_client.html#catalog_market_greeks_v2","text":"def catalog_market_greeks_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of greeks statistics.","title":"catalog_market_greeks_v2"},{"location":"api_client.html#catalog_market_open_interest_v2","text":"def catalog_market_open_interest_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market open interest statistics.","title":"catalog_market_open_interest_v2"},{"location":"api_client.html#catalog_market_liquidations_v2","text":"def catalog_market_liquidations_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market liquidations statistics.","title":"catalog_market_liquidations_v2"},{"location":"api_client.html#catalog_market_metrics_v2","text":"def catalog_market_metrics_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market metrics statistics.","title":"catalog_market_metrics_v2"},{"location":"api_client.html#catalog_full_market_trades_v2","text":"def catalog_full_market_trades_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market trades statistics.","title":"catalog_full_market_trades_v2"},{"location":"api_client.html#catalog_full_market_candles_v2","text":"def catalog_full_market_candles_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market candles statistics.","title":"catalog_full_market_candles_v2"},{"location":"api_client.html#catalog_full_market_orderbooks_v2","text":"def catalog_full_market_orderbooks_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market orderbooks statistics.","title":"catalog_full_market_orderbooks_v2"},{"location":"api_client.html#catalog_full_market_quotes_v2","text":"def catalog_full_market_quotes_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market quotes statistics.","title":"catalog_full_market_quotes_v2"},{"location":"api_client.html#catalog_full_market_funding_rates_v2","text":"def catalog_full_market_funding_rates_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market funding rates statistics.","title":"catalog_full_market_funding_rates_v2"},{"location":"api_client.html#catalog_full_market_funding_rates_predicted_v2","text":"def catalog_full_market_funding_rates_predicted_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market funding rates statistics.","title":"catalog_full_market_funding_rates_predicted_v2"},{"location":"api_client.html#catalog_full_market_contract_prices_v2","text":"def catalog_full_market_contract_prices_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of contract prices statistics.","title":"catalog_full_market_contract_prices_v2"},{"location":"api_client.html#catalog_full_market_implied_volatility_v2","text":"def catalog_full_market_implied_volatility_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of implied volatility statistics.","title":"catalog_full_market_implied_volatility_v2"},{"location":"api_client.html#catalog_full_market_greeks_v2","text":"def catalog_full_market_greeks_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of greeks statistics.","title":"catalog_full_market_greeks_v2"},{"location":"api_client.html#catalog_full_market_open_interest_v2","text":"def catalog_full_market_open_interest_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market open interest statistics.","title":"catalog_full_market_open_interest_v2"},{"location":"api_client.html#catalog_full_market_liquidations_v2","text":"def catalog_full_market_liquidations_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market liquidations statistics.","title":"catalog_full_market_liquidations_v2"},{"location":"api_client.html#catalog_full_market_metrics_v2","text":"def catalog_full_market_metrics_v2 ( markets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , market_type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> CatalogV2DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. exchange ( Optional[str] ): Unique name of an exchange. market_type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : CatalogV2DataCollection : List of market metrics statistics.","title":"catalog_full_market_metrics_v2"},{"location":"api_client.html#catalog_asset_metrics_v2","text":"def catalog_asset_metrics_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset metrics.","title":"catalog_asset_metrics_v2"},{"location":"api_client.html#catalog_full_asset_metrics_v2","text":"def catalog_full_asset_metrics_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset metrics.","title":"catalog_full_asset_metrics_v2"},{"location":"api_client.html#catalog_exchange_metrics_v2","text":"def catalog_exchange_metrics_v2 ( exchanges : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : exchanges ( Optional[Union[str, List[str]]] ): Comma separated list of exchanges. By default all exchanges are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of exchange metrics.","title":"catalog_exchange_metrics_v2"},{"location":"api_client.html#catalog_full_exchange_metrics_v2","text":"def catalog_full_exchange_metrics_v2 ( exchanges : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : exchanges ( Optional[Union[str, List[str]]] ): Comma separated list of exchanges. By default all exchanges are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of exchange metrics.","title":"catalog_full_exchange_metrics_v2"},{"location":"api_client.html#catalog_exchange_asset_metrics_v2","text":"def catalog_exchange_asset_metrics_v2 ( exchange_assets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : exchange_assets ( Optional[Union[str, List[str]]] ): Comma separated list of exchange-assets. By default, all exchange-assets pairs are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of exchange-asset metrics.","title":"catalog_exchange_asset_metrics_v2"},{"location":"api_client.html#catalog_full_exchange_asset_metrics_v2","text":"def catalog_full_exchange_asset_metrics_v2 ( exchange_assets : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : exchange_assets ( Optional[Union[str, List[str]]] ): Comma separated list of exchange-assets. By default, all exchange-assets pairs are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of exchange-asset metrics.","title":"catalog_full_exchange_asset_metrics_v2"},{"location":"api_client.html#catalog_pair_metrics_v2","text":"def catalog_pair_metrics_v2 ( pairs : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of pair metrics.","title":"catalog_pair_metrics_v2"},{"location":"api_client.html#catalog_full_pair_metrics_v2","text":"def catalog_full_pair_metrics_v2 ( pairs : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of pair metrics.","title":"catalog_full_pair_metrics_v2"},{"location":"api_client.html#catalog_institution_metrics_v2","text":"def catalog_institution_metrics_v2 ( institutions : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : institutions ( Optional[Union[str, List[str]]] ): Comma separated list of institutions. By default, all institutions are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of institution metrics.","title":"catalog_institution_metrics_v2"},{"location":"api_client.html#catalog_full_institution_metrics_v2","text":"def catalog_full_institution_metrics_v2 ( institutions : Optional [ Union [ str , List [ str ]]] = None , metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : institutions ( Optional[Union[str, List[str]]] ): Comma separated list of institutions. By default, all institutions are returned. metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of institution metrics.","title":"catalog_full_institution_metrics_v2"},{"location":"api_client.html#catalog_pair_candles_v2","text":"def catalog_pair_candles_v2 ( pairs : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset pair candles statistics.","title":"catalog_pair_candles_v2"},{"location":"api_client.html#catalog_index_candles_v2","text":"def catalog_index_candles_v2 ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of index candles statistics.","title":"catalog_index_candles_v2"},{"location":"api_client.html#catalog_index_levels_v2","text":"def catalog_index_levels_v2 ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all indexes are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of index levels.","title":"catalog_index_levels_v2"},{"location":"api_client.html#catalog_asset_chains_v2","text":"def catalog_asset_chains_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset chains assets","title":"catalog_asset_chains_v2"},{"location":"api_client.html#catalog_mempool_feerates_v2","text":"def catalog_mempool_feerates_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of mempool feerates assets","title":"catalog_mempool_feerates_v2"},{"location":"api_client.html#catalog_mining_pool_tips_summaries_v2","text":"def catalog_mining_pool_tips_summaries_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of mining pool tips assets","title":"catalog_mining_pool_tips_summaries_v2"},{"location":"api_client.html#catalog_transaction_tracker_assets_v2","text":"def catalog_transaction_tracker_assets_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of transaction tracker assets","title":"catalog_transaction_tracker_assets_v2"},{"location":"api_client.html#catalog_full_pair_candles_v2","text":"def catalog_full_pair_candles_v2 ( pairs : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset pair candles statistics.","title":"catalog_full_pair_candles_v2"},{"location":"api_client.html#catalog_full_index_candles_v2","text":"def catalog_full_index_candles_v2 ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of index candles statistics.","title":"catalog_full_index_candles_v2"},{"location":"api_client.html#catalog_full_index_levels_v2","text":"def catalog_full_index_levels_v2 ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all indexes are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of index levels.","title":"catalog_full_index_levels_v2"},{"location":"api_client.html#catalog_full_asset_chains_v2","text":"def catalog_full_asset_chains_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of asset chains assets","title":"catalog_full_asset_chains_v2"},{"location":"api_client.html#catalog_full_mempool_feerates_v2","text":"def catalog_full_mempool_feerates_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of mempool feerates assets","title":"catalog_full_mempool_feerates_v2"},{"location":"api_client.html#catalog_full_mining_pool_tips_summaries_v2","text":"def catalog_full_mining_pool_tips_summaries_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of mining pool tips assets","title":"catalog_full_mining_pool_tips_summaries_v2"},{"location":"api_client.html#catalog_full_transaction_tracker_assets_v2","text":"def catalog_full_transaction_tracker_assets_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of transaction tracker assets","title":"catalog_full_transaction_tracker_assets_v2"},{"location":"api_client.html#catalog_blockchain_accounts_v2","text":"def catalog_blockchain_accounts_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of blockchain-v2/accounts assets using catalog-v2","title":"catalog_blockchain_accounts_v2"},{"location":"api_client.html#catalog_blockchain_balance_updates_v2","text":"def catalog_blockchain_balance_updates_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of blockchain-v2/balance-updates assets using catalog-v2","title":"catalog_blockchain_balance_updates_v2"},{"location":"api_client.html#catalog_blockchain_blocks_v2","text":"def catalog_blockchain_blocks_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of blockchain-v2/blocks assets using catalog-v2","title":"catalog_blockchain_blocks_v2"},{"location":"api_client.html#catalog_blockchain_transactions_v2","text":"def catalog_blockchain_transactions_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : List of blockchain-v2/transactions assets using catalog-v2","title":"catalog_blockchain_transactions_v2"},{"location":"api_client.html#catalog_full_blockchain_accounts_v2","text":"def catalog_full_blockchain_accounts_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : Full list of blockchain-v2/accounts assets using catalog-v2","title":"catalog_full_blockchain_accounts_v2"},{"location":"api_client.html#catalog_full_blockchain_balance_updates_v2","text":"def catalog_full_blockchain_balance_updates_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : Full list of blockchain-v2/balance-updates assets using catalog-v2","title":"catalog_full_blockchain_balance_updates_v2"},{"location":"api_client.html#catalog_full_blockchain_blocks_v2","text":"def catalog_full_blockchain_blocks_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : Full list of blockchain-v2/blocks assets using catalog-v2","title":"catalog_full_blockchain_blocks_v2"},{"location":"api_client.html#catalog_full_blockchain_transactions_v2","text":"def catalog_full_blockchain_transactions_v2 ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> CatalogV2DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : CatalogV2DataCollection : Full list of blockchain-v2/transactions assets using catalog-v2","title":"catalog_full_blockchain_transactions_v2"},{"location":"api_client.html#get_asset_alerts","text":"def get_asset_alerts ( assets : Union [ List [ str ], str ], alerts : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , include_heartbeats : Optional [ bool ] = None ) -> DataCollection Returns asset alerts for the specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' alerts ( list(str), str ): list of asset alert names page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. include_heartbeats ( bool ): If set to true, includes information about most recent time asset was successfully evaluated. Returns : DataCollection : Asset alerts timeseries.","title":"get_asset_alerts"},{"location":"api_client.html#get_defi_balance_sheets","text":"def get_defi_balance_sheets ( defi_protocols : Union [ str , List [ str ]], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns Defi Balance Sheet records for specified DeFi protocols. Arguments : defi_protocols ( str, List[str] ): list of DeFi protocols like aave_v2_eth or protocol patterns like aave_v2_* or aave_*_eth or *_eth. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata","title":"get_defi_balance_sheets"},{"location":"api_client.html#get_asset_chains","text":"def get_asset_chains ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> AssetChainsDataCollection Returns the chains of blocks for the specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : AssetChainsDataCollection : Asset chains timeseries.","title":"get_asset_chains"},{"location":"api_client.html#get_asset_metrics","text":"def get_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_asset : Optional [ int ] = None , status : Optional [ str ] = None , start_hash : Optional [ str ] = None , end_hash : Optional [ str ] = None , min_confirmations : Optional [ int ] = None , null_as_zero : Optional [ bool ] = None , ignore_forbidden_errors : Optional [ bool ] = None , ignore_unsupported_errors : Optional [ bool ] = None ) -> DataCollection Returns requested metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"asset\", \"height\", or \"time\". Default is \"asset\". Metrics with 1b frequency are sorted by (asset, height, block_hash) tuples by default. Metrics with other frequencies are sorted by (asset, time) by default. If you want to sort 1d metrics by (time, asset) you should choose time as value for the sort parameter. Sorting by time is useful if you request metrics for a set of assets. limit_per_asset ( int ): How many entries per asset the result should contain. status ( str ): Which metric values do you want to see. Applicable only for \"reviewable\" metrics. You can find them in the /catalog/metrics endpoint. Default: \"all\". Supported: \"all\" \"flash\" \"reviewed\" \"revised\" start_hash ( str ): The start hash indicates the beginning block height for the set of data that are returned. Inclusive by default. Mutually exclusive with start_time and start_height. end_hash ( str ): The end hash indicates the ending block height for the set of data that are returned. Inclusive by default. Mutually exclusive with end_time and end_height. min_confirmations ( int ): Specifies how many blocks behind the chain tip block by block metrics (1b frequency) are based on. Default for btc is 2 and 99 for eth. null_as_zero ( bool ): Default: false. Nulls are represented as zeros in the response. ignore_forbidden_errors ( bool ): Default: false. Ignore HTTP 403 Forbidden errors ignore_unsupported_errors ( bool ): Default: false. Ignore errors for unsupported assets, metrics or frequencies. Returns : DataCollection : Asset Metrics timeseries.","title":"get_asset_metrics"},{"location":"api_client.html#get_exchange_metrics","text":"def get_exchange_metrics ( exchanges : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. 'exchange', 'time'. Metrics are sorted by 'exchange' by default. limit_per_exchange ( int ): How many entries per exchange the result should contain. Returns : DataCollection : Asset Metrics timeseries.","title":"get_exchange_metrics"},{"location":"api_client.html#get_exchange_asset_metrics","text":"def get_exchange_asset_metrics ( exchange_assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange_asset : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchange-asset. Arguments : exchange_assets ( list(str), str ): A single exchange-asset pairs (e.g. \"binance-btc\" or a list of exchange-asset-pair to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"exchange_asset\", \"time\". Default is \"exchange_asset\". limit_per_exchange_asset ( int ): How many entries per exchange-asset the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries.","title":"get_exchange_asset_metrics"},{"location":"api_client.html#get_pair_metrics","text":"def get_pair_metrics ( pairs : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns metrics books for specified asset-asset pairs. Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g.\"pair\", \"time\". \"pair\" by default limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries.","title":"get_pair_metrics"},{"location":"api_client.html#get_pair_candles","text":"def get_pair_candles ( pairs : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns candles for specified asset pairs. Results are ordered by tuple (pair, time). Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Asset pair candles timeseries.","title":"get_pair_candles"},{"location":"api_client.html#get_institution_metrics","text":"def get_institution_metrics ( institutions : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_institution : Optional [ int ] = None ) -> DataCollection Returns metrics for specified institutions. Arguments : institutions ( list(str), str ): A single institution name or a list of institutions to return info for. metrics ( list(str), str ): list of institution-specific metric names, e.g. 'gbtc_total_assets' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"institution\", or \"time\". Default is \"institution\". limit_per_institution ( int ): How many entries per institution the result should contain. Returns : DataCollection : Asset Metrics timeseries.","title":"get_institution_metrics"},{"location":"api_client.html#get_index_candles","text":"def get_index_candles ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_index : Optional [ int ] = None ) -> DataCollection Returns index candles for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_index ( int ): How many entries per index the result should contain. Returns : DataCollection : Index Candles timeseries.","title":"get_index_candles"},{"location":"api_client.html#get_index_levels","text":"def get_index_levels ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_index : Optional [ int ] = None , include_verification : Optional [ bool ] = None ) -> DataCollection Returns index levels for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_index ( int ): How many entries per index the result should contain. include_verification : Default: False set to true, includes information about verification. Returns : DataCollection : Index Levels timeseries.","title":"get_index_levels"},{"location":"api_client.html#get_index_constituents","text":"def get_index_constituents ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns index constituents for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Index Constituents timeseries.","title":"get_index_constituents"},{"location":"api_client.html#get_market_metrics","text":"def get_market_metrics ( markets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None , sort : Optional [ str ] = None ) -> DataCollection Returns market metrics for specified markets, frequency and date range. For more information on market metrics, see: https://docs.coinmetrics.io/api/v4#operation/getTimeseriesMarketMetrics Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' metrics ( list(str), str ): list of metrics, i.e. 'liquidations_reported_future_buy_units_1d'. See market metrics catalog for a list of supported metrics: https://docs.coinmetrics.io/api/v4#operation/getCatalogMarketMetrics frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. sort ( str ): How results will be sorted. Metrics are sorted by (market, time) by default. If you want to sort 1d metrics by (time, market) you should choose time as value for the sort parameter. Sorting by time is useful if you request metrics for a set of markets. Returns : DataCollection : Market Candles timeseries.","title":"get_market_metrics"},{"location":"api_client.html#get_market_candles","text":"def get_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market candles for specified markets, frequency and date range. For more information on market candles, see: https://docs.coinmetrics.io/info/markets/candles Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Candles timeseries.","title":"get_market_candles"},{"location":"api_client.html#get_market_trades","text":"def get_market_trades ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None , min_confirmations : Optional [ int ] = None ) -> DataCollection Returns market trades for specified markets and date range. For more information on market trades, see: https://docs.coinmetrics.io/info/markets/trades Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. min_confirmations ( int ): Specifies how many blocks behind the chain tip trades are based on. Default is 2. Returns : DataCollection : Market Trades timeseries.","title":"get_market_trades"},{"location":"api_client.html#get_market_open_interest","text":"def get_market_open_interest ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , granularity : Optional [ str ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market open interest for specified markets and date range. For more information on open interest, see: https://docs.coinmetrics.io/info/markets/openinterest Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. granularity ( str ): Downsampling granularity of market open interest. Supported values are raw, 1m, 1h, and 1d. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Open Interest timeseries.","title":"get_market_open_interest"},{"location":"api_client.html#get_market_liquidations","text":"def get_market_liquidations ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market liquidations for specified markets and date range. For more information on liquidations, see: https://docs.coinmetrics.io/info/markets/liquidations Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Liquidations timeseries.","title":"get_market_liquidations"},{"location":"api_client.html#get_market_funding_rates","text":"def get_market_funding_rates ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market funding rates for specified markets and date range. For more information on funding rates, see: https://docs.coinmetrics.io/info/markets/fundingrates Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Funding Rates timeseries.","title":"get_market_funding_rates"},{"location":"api_client.html#get_predicted_market_funding_rates","text":"def get_predicted_market_funding_rates ( markets : Union [ List [ str ], str ], start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns predicted funding rates for specified futures markets. Results are ordered by tuple (market, time). For more information on funding rates, see: https://docs.coinmetrics.io/info/markets/fundingrates Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Funding Rates timeseries.","title":"get_predicted_market_funding_rates"},{"location":"api_client.html#get_market_orderbooks","text":"def get_market_orderbooks ( markets : Union [ List [ str ], str ], granularity : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , depth_limit : Optional [ str ] = \"100\" , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market order books for specified markets and date range. For more information on order books, see: https://docs.coinmetrics.io/info/markets/orderbook Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' granularity ( str ): Downsampling granularity of market order books and quotes. Supported values are raw, 1m, 1h, and 1d. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. depth_limit ( str ): book depth limit, 100 levels max or full book that is not limited and provided as is from the exchange. Full book snapshots are collected once per hour timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Order Books timeseries.","title":"get_market_orderbooks"},{"location":"api_client.html#get_market_quotes","text":"def get_market_quotes ( markets : Union [ List [ str ], str ], granularity : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None , include_one_sided : Optional [ bool ] = None ) -> DataCollection Returns market quotes for specified markets and date range. For more information on quotes, see: https://docs.coinmetrics.io/info/markets/quotes Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' granularity (``): Downsampling granularity of market order books and quotes. Supported values are raw, 1m, 1h, and 1d. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. include_one_sided ( bool ): Default: false Include one-side and empty books in quotes response. Returns : DataCollection : Market Quotes timeseries.","title":"get_market_quotes"},{"location":"api_client.html#get_market_contract_prices","text":"def get_market_contract_prices ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , granularity : Optional [ str ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None , frequency : Optional [ str ] = None ) -> DataCollection Returns contract prices for specified markets. This includes index price and mark price that are used by the exchange for settlement and risk management purposes. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. granularity ( str ): Downsampling granularity of market contract prices. Supported values are raw, 1m, 1h, and 1d. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Contract Prices timeseries.","title":"get_market_contract_prices"},{"location":"api_client.html#get_market_implied_volatility","text":"def get_market_implied_volatility ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , granularity : Optional [ str ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns implied volatility for specified markets. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. granularity ( str - one of raw, 1m, 1h, and 1d ): Downsampling granularity of market implied volatility. Supported values are raw, 1m, 1h, and 1d. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Volatility timeseries.","title":"get_market_implied_volatility"},{"location":"api_client.html#get_market_greeks","text":"def get_market_greeks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , granularity : Optional [ str ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns greeks for option markets. Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future', 'deribit-ETH-25MAR22-1200-P-option' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. granularity ( str - one of raw, 1m, 1h, and 1d ): Downsampling granularity of market greeks. Supported values are raw, 1m, 1h, and 1d timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Volatility timeseries.","title":"get_market_greeks"},{"location":"api_client.html#get_mining_pool_tips_summary","text":"def get_mining_pool_tips_summary ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mining pool tips summaries for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mining Pool Tips timeseries.","title":"get_mining_pool_tips_summary"},{"location":"api_client.html#get_mempool_feerates","text":"def get_mempool_feerates ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = 200 , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mempool feerates for the specified assets. Note: for this method, page_size must be <= 200. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mempool Fee Rates timeseries.","title":"get_mempool_feerates"},{"location":"api_client.html#get_stream_asset_metrics","text":"def get_stream_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Asset Metrics timeseries stream.","title":"get_stream_asset_metrics"},{"location":"api_client.html#get_stream_market_trades","text":"def get_stream_market_trades ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market trades. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Trades timeseries stream.","title":"get_stream_market_trades"},{"location":"api_client.html#get_stream_market_orderbooks","text":"def get_stream_market_orderbooks ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST , depth_limit : Optional [ str ] = None ) -> CmStream Returns timeseries stream of market orderbooks. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. depth_limit ( str ): Default: 100. Supported Values: 100 \"full_book\". Book depth limit. Returns : CmStream : Market Orderbooks timeseries stream.","title":"get_stream_market_orderbooks"},{"location":"api_client.html#get_stream_market_quotes","text":"def get_stream_market_quotes ( markets : Union [ List [ str ], str ], backfill : Union [ Backfill , str ] = Backfill . LATEST , include_one_sided : Optional [ bool ] = None ) -> CmStream Returns timeseries stream of market quotes. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. include_one_sided ( bool ): Default: false. Include one-side and empty books in quotes response. Returns : CmStream : Market Quotes timeseries stream.","title":"get_stream_market_quotes"},{"location":"api_client.html#get_stream_pair_quotes","text":"def get_stream_pair_quotes ( pairs : Union [ str , List [ str ]], aggregation_method : Optional [ str ] = None , backfill : Optional [ str ] = None ) -> CmStream Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. Use the /catalog-all/pairs endpoint for the full list of supported asset pairs. aggregation_method ( str ): The method to use for aggregation. backfill ( str ): What data should be sent upon a connection. By default the latest values are sent just before real-time data. Returns : CmStream :","title":"get_stream_pair_quotes"},{"location":"api_client.html#get_stream_asset_quotes","text":"def get_stream_asset_quotes ( assets : Union [ str , List [ str ]], aggregation_method : Optional [ str ] = None , backfill : Optional [ str ] = None ) -> CmStream Arguments : assets ( Union[str, List[str]] ): Comma separated list of assets. Use the /catalog-all/assets endpoint for the full list of supported assets. aggregation_method ( str ): The method to use for aggregation. backfill ( str ): What data should be sent upon a connection. By default the latest values are sent just before real-time data. Returns : CmStream :","title":"get_stream_asset_quotes"},{"location":"api_client.html#get_stream_market_candles","text":"def get_stream_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of market candles. Arguments : markets ( list(str), str ): list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future. frequency ( str ): Candle duration. Supported values are 1m, 5m, 10m, 15m, 30m, 1h, 4h, 1d. backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. Returns : CmStream : Market Candles timeseries stream.","title":"get_stream_market_candles"},{"location":"api_client.html#get_stream_index_levels","text":"def get_stream_index_levels ( indexes : Union [ List [ str ], str ], include_verification : Optional [ bool ] = None , backfill : Union [ Backfill , str ] = Backfill . LATEST ) -> CmStream Returns timeseries stream of index levels. Arguments : indexes ( list(str), str ): list of indxes or market patterns such as CMBIBTC backfill ( str ): What data should be sent upon a connection (\"latest\" or \"none\"). By default the latest values are sent just before real-time data. include_verification : Default: False If set to true, includes information about verification. Returns : CmStream : Index levels data timeseries stream.","title":"get_stream_index_levels"},{"location":"api_client.html#get_stream_market_liquidations","text":"def get_stream_market_liquidations ( markets : Union [ str , List [ str ]], backfill : Optional [ str ] = None ) -> CmStream Returns timeseries stream for market liquidations Arguments : markets ( Union[str, List[str]] ): Comma separated list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future . Use the /catalog-all/markets endpoint for the full list of supported markets. backfill ( Optional[str] ): What data should be sent upon a connection. By default the latest values are sent just before real-time data. Returns : CmStream : Market liquidations timeseries stream","title":"get_stream_market_liquidations"},{"location":"api_client.html#get_stream_market_open_interest","text":"def get_stream_market_open_interest ( markets : Union [ str , List [ str ]], backfill : Optional [ str ] = None ) -> CmStream Arguments : markets ( Union[str, List[str]] ): Comma separated list of markets or market patterns like exchange-* or exchange-*-spot or *USDT-future . Use the /catalog-all/markets endpoint for the full list of supported markets. backfill ( Optional[str] ): What data should be sent upon a connection. By default the latest values are sent just before real-time data. Returns : CmStream :","title":"get_stream_market_open_interest"},{"location":"api_client.html#get_list_of_blocks_v2","text":"def get_list_of_blocks_v2 ( asset : str , block_hashes : Optional [ Union [ List [ str ], str ]] = None , heights : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , chain : Optional [ bool ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain blocks metadata. Arguments : asset ( str ): Asset name block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. heights ( str, list(str) ): Optional comma separated list of block heights to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time chain ( str ): Default: \"main\" Chain type. Supported values are main and all (includes both main and stale). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata","title":"get_list_of_blocks_v2"},{"location":"api_client.html#get_list_of_accounts_v2","text":"def get_list_of_accounts_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata","title":"get_list_of_accounts_v2"},{"location":"api_client.html#get_list_of_sub_accounts_v2","text":"def get_list_of_sub_accounts_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain sub-accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata","title":"get_list_of_sub_accounts_v2"},{"location":"api_client.html#get_list_of_transactions_v2","text":"def get_list_of_transactions_v2 ( asset : str , txids : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , chain : Optional [ str ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain transactions metadata. Arguments : asset ( str ): Asset name txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time chain ( str ): Default: \"main\". Chain type. Supported values are main and all (includes both main and stale). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of transaction metadata","title":"get_list_of_transactions_v2"},{"location":"api_client.html#get_list_of_balance_updates_v2","text":"def get_list_of_balance_updates_v2 ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , sub_accounts : Optional [ Union [ List [ str ], str ]] = None , limit_per_account : Optional [ int ] = None , txids : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , include_sub_accounts : Optional [ bool ] = None , chain : Optional [ str ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts balance updates. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. limit_per_account ( int ): How many entries per account the result should contain. It is applicable when multiple accounts are requested. txids ( str, list(str) ): Optional comma separated list of transaction ids to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_height ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time start_chain_sequence_number ( int ): The start height indicates the beginning block height for the set of data that are returned. Mutually exclusive with start_time end_chain_sequence_number ( int ): The end height indicates the beginning block height for the set of data that are returned. Mutually exclusive with end_time include_sub_accounts ( bool ): bool indicating if the response should contain sub-accounts. chain : Chain type. Supported values are main and all (includes both main and stale). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of balance updates","title":"get_list_of_balance_updates_v2"},{"location":"api_client.html#get_full_block_v2","text":"def get_full_block_v2 ( asset : str , block_hash : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain block with all transactions and balance updates. Arguments : asset ( str ): Asset name block_hash ( str ): block hash include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str), any) : blockchain block data","title":"get_full_block_v2"},{"location":"api_client.html#get_full_transaction_v2","text":"def get_full_transaction_v2 ( asset : str , txid : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates. Arguments : asset ( str ): Asset name txid ( str ): transaction identifier include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str), any) : block transaction data","title":"get_full_transaction_v2"},{"location":"api_client.html#get_full_transaction_for_block_v2","text":"def get_full_transaction_for_block_v2 ( asset : str , block_hash : str , txid : str , include_sub_accounts : Optional [ bool ]) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates for a specific block. Arguments : asset ( str ): Asset name block_hash ( str ): block hash txid ( str ): transaction identifier include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts Returns : list(dict(str, Any)) : block transaction data with balance updates","title":"get_full_transaction_for_block_v2"},{"location":"api_client.html#get_list_of_balance_updates_for_account_v2","text":"def get_list_of_balance_updates_for_account_v2 ( asset : str , account : str , txids : Optional [ Union [ str , List [ str ]]] = None , block_hashes : Optional [ Union [ str , List [ str ]]] = None , include_counterparties : Optional [ bool ] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_chain_sequence_number : Optional [ int ] = None , end_chain_sequence_number : Optional [ int ] = None , include_sub_accounts : Optional [ bool ] = None , chain : Optional [ str ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : asset ( Optional[str] ): Asset name. account ( Optional[str] ): Account id. txids ( Union[str, List[str]] ): Optional comma separated list of transaction identifiers (txid) to filter a response. The list must contain a single element for Community users. block_hashes ( Union[str, List[str]] ): Optional comma separated list of block hashes to filter a response. The list must contain a single element for Community users. include_counterparties ( bool ): Include information about the counterparties balance updates. start_time ( str ): Start of the time interval. This field refers to the time field in the response. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Inclusive by default. Mutually exclusive with start_height . UTC timezone by default. Z suffix is optional and timezone parameter has a priority over it. If start_time is omitted, response will include time series from the earliest time available. This parameter is disabled for Community users. end_time ( str ): End of the time interval. This field refers to the time field in the response. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Inclusive by default. Mutually exclusive with end_height . UTC timezone by default. Z suffix is optional and timezone parameter has a priority over it. If end_time is omitted, response will include time series up to the latest time available. This parameter is disabled for Community users. start_height ( int ): The start height indicates the beginning block height for the set of data that are returned. Inclusive by default. Mutually exclusive with start_time . This parameter is disabled for Community users. end_height ( int ): The end height indicates the ending block height for the set of data that are returned. Inclusive by default. Mutually exclusive with end_time . This parameter is disabled for Community users. start_chain_sequence_number ( int ): Start of the chain_sequence_number interval. This parameter is disabled for Community users. end_chain_sequence_number ( int ): End of the chain_sequence_number interval. This parameter is disabled for Community users. include_sub_accounts ( bool ): Boolean indicating if the response should contain sub-accounts. This parameter is disabled for Community users. chain ( str ): Chain type. Supported values are main and all (includes both main and stale). This parameter is disabled for Community users. start_inclusive ( bool ): Inclusive or exclusive corresponding start_* parameters. This parameter is disabled for Community users. end_inclusive ( bool ): Inclusive or exclusive corresponding end_* parameters. This parameter is disabled for Community users. timezone ( str ): Timezone name for start_time and end_time timestamps. This parameter does not modify the output times, which are always UTC . Format is defined by TZ database. page_size ( int ): Number of items per single page of results. This parameter is disabled for Community users. paging_from ( str ): Where does the first page start, at the start of the interval or at the end. next_page_token ( str ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : Blockchain balance updates for account.","title":"get_list_of_balance_updates_for_account_v2"},{"location":"api_client.html#get_transaction_tracker","text":"def get_transaction_tracker ( asset : str , addresses : Optional [ Union [ List [ str ], str ]] = None , txids : Optional [ Union [ List [ str ], str ]] = None , replacements_for_txids : Optional [ Union [ List [ str ], str ]] = None , replacements_only : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = \"start\" , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , unconfirmed_only : Optional [ bool ] = None ) -> TransactionTrackerDataCollection Returns status updates for the specified or all transactions. Arguments : asset ( str ): Asset name txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to track. replacements_for_txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to get the corresponding replacement transactions for. Mutually exclusive with txids. replacements_only ( bool ): Boolean indicating if the response should contain only the replacement transactions. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries (string or datetime). Datetime object may be timezone naive or aware. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : TransactionTrackerDataCollection : status updates for the specified or all transactions.","title":"get_transaction_tracker"},{"location":"api_client.html#get_taxonomy_assets","text":"def get_taxonomy_assets ( assets : Optional [ List [ str ]] = None , class_ids : Optional [ List [ str ]] = None , sector_ids : Optional [ List [ str ]] = None , subsector_ids : Optional [ List [ str ]] = None , classification_start_time : Optional [ str ] = None , classification_end_time : Optional [ str ] = None , end_inclusive : Optional [ bool ] = None , start_inclusive : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , version : Optional [ str ] = None ) -> DataCollection Returns assets with information about their sector, industry, and industry group IDs. By default reutrns all covered assets Arguments : assets ( Optional[List[str]] ): Asset names class_ids ( Optional[List[str]] ): List of class identifiers. sector_ids ( Optional[List[str]] ): Lst of sector identifiers. subsector_ids ( Optional[List[str]] ): List of subsector identifiers classification_start_time ( Optional[str] ): Start time for the taxonomy assets. ISO-8601 format date. Inclusive by default classification_end_time ( Optional[str] ): End time for the taxonomy assets. ISO-8601 format date. Inclusive by default start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. page_size ( Optional[int] ): Page size for # of assets to return, will default to 100 paging_from ( Optional[str] ): Which direction to page from \"start\" or \"end\". \"end\" by default version ( Optional[str] ): Version to query, default is \"latest\". Returns : Datacollection : Returns a data collection containing the taxonomy assets","title":"get_taxonomy_assets"},{"location":"api_client.html#get_taxonomy_assets_metadata","text":"def get_taxonomy_assets_metadata ( start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , version : Optional [ str ] = None ) -> DataCollection Returns metadata about the assets, sectors, and industries included in the CM taxonomy Arguments : start_time ( Optional[Union[datetime, date, str]] ): Start time for the taxonomy version file. ISO-8601 format date. Inclusive by default end_time ( Optional[Union[datetime, date, str]] ): End time for the taxonomy version file. ISO-8601 format date. Exclusive by default start_inclusive ( str ): Start time of taxonomy version. end_inclusive ( str ): End time of taxonomy version. page_size ( Optional[int] ): Page size for # of asset metadata to return, will default to 100 paging_from ( Optional[str] ): Which direction to page from \"start\" or \"end\". \"end\" by default version ( Optional[str] ): Version to query, default is \"latest\". Returns : Datacollection : Returns a data collection containing the taxonomy assets","title":"get_taxonomy_assets_metadata"},{"location":"api_client.html#get_asset_profiles","text":"def get_asset_profiles ( assets : Optional [ Union [ List [ str ], str ]] = None , full_names : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None ) -> DataCollection Returns profile data for assets, ordered by asset Arguments : assets ( Optional[Union[List[str], str]] ): Returns profile data for assets. full_names ( Optional[Union[List[str], str]] ): Comma separated list of asset full names. By default profile data for all assets is returned. Mutually exclusive with assets parameter. page_size ( int ): Number of items per single page of results. paging_from ( int ): Where does the first page start, at the \"start\" of the interval or at the \"end\"","title":"get_asset_profiles"},{"location":"api_client.html#reference_data_asset_metrics","text":"def reference_data_asset_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , reviewable : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. reviewable ( Optional[bool] ): Limit to human-reviewable metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of asset metrics metadata.","title":"reference_data_asset_metrics"},{"location":"api_client.html#reference_data_markets","text":"def reference_data_markets ( markets : Optional [ Union [ str , List [ str ]]] = None , exchange : Optional [ str ] = None , type : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : markets ( Optional[Union[str, List[str]]] ): Comma separated list of markets. By default all markets are returned. exchange ( Optional[str] ): Unique name of an exchange. type ( Optional[str] ): Type of markets. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. asset ( Optional[str] ): Any asset of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of markets metadata.","title":"reference_data_markets"},{"location":"api_client.html#reference_data_exchange_metrics","text":"def reference_data_exchange_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of exchange metrics metadata.","title":"reference_data_exchange_metrics"},{"location":"api_client.html#reference_data_exchange_asset_metrics","text":"def reference_data_exchange_asset_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of exchange asset metrics metadata.","title":"reference_data_exchange_asset_metrics"},{"location":"api_client.html#reference_data_pair_metrics","text":"def reference_data_pair_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of pair metrics metadata.","title":"reference_data_pair_metrics"},{"location":"api_client.html#reference_data_institution_metrics","text":"def reference_data_institution_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of institution metrics metadata.","title":"reference_data_institution_metrics"},{"location":"api_client.html#reference_data_assets","text":"def reference_data_assets ( assets : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma separated list of assets. By default all assets are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of assets metadata.","title":"reference_data_assets"},{"location":"api_client.html#reference_data_exchanges","text":"def reference_data_exchanges ( exchanges : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : exchanges ( Optional[Union[str, List[str]]] ): Comma separated list of exchanges. By default all exchanges are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of exchanges metadata.","title":"reference_data_exchanges"},{"location":"api_client.html#reference_data_indexes","text":"def reference_data_indexes ( indexes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : indexes ( Optional[Union[str, List[str]]] ): Comma separated list of indexes. By default all indexes are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of indexes metadata.","title":"reference_data_indexes"},{"location":"api_client.html#reference_data_pairs","text":"def reference_data_pairs ( pairs : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : pairs ( Optional[Union[str, List[str]]] ): Comma separated list of asset pairs. By default, all asset pairs are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of pairs metadata.","title":"reference_data_pairs"},{"location":"api_client.html#reference_data_market_metrics","text":"def reference_data_market_metrics ( metrics : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None , format : Optional [ str ] = \"json_stream\" ) -> DataCollection Arguments : metrics ( Optional[Union[str, List[str]]] ): Comma separated list of metrics. By default all metrics are returned. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. format ( Optional[str] ): Default: \"json_stream\" (Python API Client). Format of the response. Supported values are json, json_stream. Setting format='json_stream' is generally more performant. page_size is ignored when format='json_stream'. Returns : DataCollection : List of market metrics metadata.","title":"reference_data_market_metrics"},{"location":"api_client.html#security_master_assets","text":"def security_master_assets ( assets : Optional [ Union [ str , List [ str ]]] = None , codes : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : assets ( Optional[Union[str, List[str]]] ): Comma-separated list of assets to query. Mutually exclusive with codes . codes ( Optional[Union[str, List[str]]] ): Comma-separated list of ten-digit alphanumeric identifying codes. Mutually exclusive with assets . page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : List of assets and their metadata in security master","title":"security_master_assets"},{"location":"api_client.html#security_master_markets","text":"def security_master_markets ( type : Optional [ str ] = None , markets : Optional [ Union [ str , List [ str ]]] = None , symbol : Optional [ str ] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : type ( Optional[str] ): Type of markets. markets ( Optional[Union[str, List[str]]] ): List of markets. symbol ( Optional[str] ): Symbol of derivative markets, full instrument name. exchange ( Optional[str] ): Unique name of an exchange. base ( Optional[str] ): Base asset of markets. quote ( Optional[str] ): Quote asset of markets. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : List of security master entries.","title":"security_master_markets"},{"location":"api_client.html#get_snapshots_of_asset_metric_constituents","text":"def get_snapshots_of_asset_metric_constituents ( metric : str , at_time : Optional [ str ] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , next_page_token : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None ) -> DataCollection Arguments : metric ( str ): Target metric name. at_time ( Optional[str] ): Returns constituents at a specified date. Value now can be specified to get the current constituents. Mutually exclusive with start_time and/or end_time . end_time ( Optional[Union[datetime, date, str]] ): Start of the time interval, inclusive. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Mutually exclusive with at_time . start_time ( Optional[Union[datetime, date, str]] ): End of the time interval, inclusive. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Mutually exclusive with at_time . next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. Returns : DataCollection : Snapshots of asset metric constituents.","title":"get_snapshots_of_asset_metric_constituents"},{"location":"api_client.html#get_timeframes_of_asset_metric_constituents","text":"def get_timeframes_of_asset_metric_constituents ( metric : str , constituents : Optional [ Union [ str , List [ str ]]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , next_page_token : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ str ] = None ) -> DataCollection Arguments : metric ( str ): Target metric name. constituents ( Optional[Union[str, List[str]]] ): Comma separated list of constituents. By default all constituents are returned. Different asset metrics may have different constituents. For example, constituents for volume_trusted_spot_usd_1d are exchanges. end_time ( Optional[Union[datetime, date, str]] ): Start of the time interval, inclusive. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Mutually exclusive with at_time . start_time ( Optional[Union[datetime, date, str]] ): End of the time interval, inclusive. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z , 2006-01-20T00:00:00.000Z , 2006-01-20T00:00:00.123456Z , 2006-01-20T00:00:00.123456789, 2006-01-20, 20060120Z , 2006-01-20 , 20060120 . Mutually exclusive with at_time . next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. page_size ( Optional[int] ): Number of items per single page of results. paging_from ( Optional[str] ): Where does the first page start, at the start of the interval or at the end. Returns : DataCollection : List of timeframes.","title":"get_timeframes_of_asset_metric_constituents"},{"location":"api_client.html#blockchain_metadata_tags","text":"def blockchain_metadata_tags ( type : Optional [ str ] = None , page_size : Optional [ int ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : type ( Optional[str] ): The type of a tag. page_size ( Optional[int] ): Number of items per single page of results. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : List of tags.","title":"blockchain_metadata_tags"},{"location":"api_client.html#blockchain_metadata_tagged_entities","text":"def blockchain_metadata_tagged_entities ( tags : Optional [ Union [ str , List [ str ]]] = None , entities : Optional [ Union [ str , List [ str ]]] = None , locations : Optional [ Union [ str , List [ str ]]] = None , page_size : Optional [ int ] = None , next_page_token : Optional [ str ] = None ) -> DataCollection Arguments : tags ( Optional[Union[str, List[str]]] ): Comma separated list of tags. Mutually exclusive with entities parameter. Currently a single tag is allowed per each request. entities ( Optional[Union[str, List[str]]] ): Comma separated list of entities. Mutually exclusive with tags parameter. locations ( Optional[Union[str, List[str]]] ): Comma separated list of entity locations (asset representation where the entity has been tagged). Currently a single entity location is allowed per each request. page_size ( Optional[int] ): Number of items per single page of results. next_page_token ( Optional[str] ): Token for receiving the results from the next page of a query. Should not be used directly. To iterate through pages just use next_page_url response field. Returns : DataCollection : List of tagged entities. Ordered by tuple (entity, tag, location, start_time) if requested by providing entities parameter. Ordered by tuple (tag, location, entity, started_time) if requested by providing tags parameter.","title":"blockchain_metadata_tagged_entities"}]}