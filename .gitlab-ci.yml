image: docker:latest

.check-for-changes: &check-for-changes |
  DOCUMENTATION_ERROR_MESSAGE="Failing pipeline build because changes were made to the API Client without generating new documentation"
  DOCUMENTATION_SUCCESS_MESSAGE="Documentation properly generated"
  lines=$(git status --untracked-files no -s | wc -l) #ignoring changes to these files 
  if [ $lines -gt 0 ]; then
    echo $DOCUMENTATION_ERROR_MESSAGE && echo "git status output:" && git status && exit 1;
  else
    echo $DOCUMENTATION_SUCCESS_MESSAGE;
  fi

services:
  - docker:dind

stages:
  - build-test-push-image
  - generate-docs
  - deploy

variables:
#  GIT_SUBMODULE_STRATEGY: recursive
  PYPI_PASSWORD: $PYPI_PASSWORD
  PYPI_USERNAME: $PYPI_USERNAME

build-test-push-image:
  stage: build-test-push-image
  script:
    - apk add git
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --build-arg CM_API_KEY=$CM_API_KEY  .
    - docker run $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA python -m mypy -p coinmetrics -p test --install-types --non-interactive
    - docker run $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA python -m flake8 coinmetrics
    - docker run $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA python -m pytest -n auto --timeout=60 test --ignore test/test_data_exporter.py --ignore test/test_rate_limits.py  --ignore test/test_catalog.py --ignore test/test_catalog_benchmarks.py
    - docker run $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA python -m pytest test/test_rate_limits.py
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  tags:
    - linux
    - docker
    - coinmetrics-build-runner
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

build-nix:
  image: docker.io/coinmetrics/nix-builder:latest
  stage: build-test-push-image
  variables:
    KUBERNETES_CPU_REQUEST: "16"
    KUBERNETES_CPU_LIMIT: "16"
    KUBERNETES_MEMORY_REQUEST: "24Gi"
    KUBERNETES_MEMORY_LIMIT: "24Gi"
  script:
    - nix -L build .#coinmetrics-api-client-py312
    - nix -L build .#coinmetrics-api-client-py311
    - nix -L build .#coinmetrics-api-client-py310
  allow_failure: true
  before_script:
    - source /before-script.sh
  after_script:
    - /after-script.sh
  tags:
    - rt-containerd
  timeout: 8 hours

generate-docs:
  image: python:3.9-slim
  stage: generate-docs
  tags:
    - linux
    - docker
    - coinmetrics-build-runner
  before_script:
    # Git set up
    - apt-get update && apt-get install -y git ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "noreply@coinmetrics.io"
    - git config --global user.name "Release Bot"
    - git fetch
    # Python build
    - python -m venv .venv
    - source .venv/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade regex pydoc-markdown
    - python -m pip install wheel dulwich pyrsistent
    - python -m pip install poetry jinja2==3.0.3 regex
    - poetry lock
    - poetry install
  script:
    - git checkout -b $CI_COMMIT_REF_NAME-$RANDOM origin/$CI_COMMIT_REF_NAME
    - url_host=$(echo "${CI_REPOSITORY_URL}" | sed -e 's|https\?://gitlab-ci-token:.*@|ssh://git@|g')
    - echo "${url_host}"
    - git remote set-url --push origin "${url_host}"
    - git remote show origin
    - cd $CI_PROJECT_DIR
    - python -m pip install pytz
    - export UPDATE_VERSION=`python get_utc_update_time.py`
    - echo "update version:"
    - echo $UPDATE_VERSION
    - bash update_version.sh $UPDATE_VERSION
    - export PYTHONPATH=/ && pydoc-markdown -m coinmetrics.api_client > docs/docs/reference/api_client.md
    - cp -f README.md docs/docs/index.md
    - cp -f FlatFilesExport.md docs/docs/FlatFilesExport.md
    - cp -f CHANGELOG.md docs/docs/CHANGELOG.md
    - cp -f examples/README.md docs/docs/user-guide/examples.md
    - cd docs && mkdocs build
    - git add --all -- :!api-client-python/
    - git status
    - git commit -m "Release version $UPDATE_VERSION" || echo "No changes, nothing to commit!"
    - git push --follow-tags origin HEAD:$CI_COMMIT_REF_NAME
  when: manual
#  rules:
#    - if: $CI_COMMIT_BRANCH == "master"

deploy:
  stage: deploy
  dependencies:
    - generate-docs
    - build-test-push-image
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA . --build-arg PYPI_USERNAME=$PYPI_USERNAME --build-arg PYPI_PASSWORD=$PYPI_PASSWORD
    - docker run $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA python -m poetry publish --build --username $PYPI_USERNAME --password $PYPI_PASSWORD
  tags:
    - linux
    - docker
    - coinmetrics-build-runner
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
